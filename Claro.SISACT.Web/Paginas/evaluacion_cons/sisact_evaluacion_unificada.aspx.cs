using System;
using System.Collections.Generic;
using System.Configuration;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.Mail;
using System.Web.UI.WebControls;
using System.Data;
using System.Collections;
using Claro.SISACT.Business;
using Claro.SISACT.Common;
using Claro.SISACT.Entity;
using Claro.SISACT.WS;
using Claro.SISACT.Web.Base;
using Claro.SISACT.WS.ConsultarPuntosWS;
using Claro.SISACT.WS.WSLineasTecnologiaCliente;
using System.IO;
using System.Text;
using System.Web.Services;
using Claro.SISACT.Web.Comun; //PROY-31393
using Claro.SISACT.WS.ConsultaNacionalidadWS; //PROY-25335 -  Contratación Electronica - Release 0
using Claro.SISACT.Entity.ConsultarCantidadCampaniaRest; // PROY 140245
using Claro.SISACT.Entity.DataPowerRest; // PROY 140245
using Claro.SISACT.WS.RestReferences; // PROY 140245
using Claro.SISACT.Entity.ConsultarClienteFullClaroRest; // PROY-FULLCLARO.V2
using Claro.SISACT.Entity.RegistraCandidatoFullClaroRest; // PROY-FULLCLARO.V2
using Claro.SISACT.Entity.ValidarProductosFCRest;// PROY-FULLCLARO.V2
using Claro.SISACT.Entity.RegistrarServExcluyentesRest; // PROY 140383
using Claro.SISACT.Entity.RegistrarOmisionPINRest;
using Claro.SISACT.Entity.RegistrarEvaluacionMejPortaRest; //PROY-140618
using Claro.SISACT.Entity.claro_vent_pedidostienda.Response;// INICIATIVA - 803
using Claro.SISACT.Entity.claro_vent_pedidostienda.Request;// INICIATIVA - 803
//INI: INICIATIVA-219
using Claro.SISACT.WS.BWServicesCBIO;
//FIN: INICIATIVA-219 
//INICIATIVA-805 - INICIO - Campana Descuento Cargo Fijo
using Claro.SISACT.Entity.BeneficioFullClaro.registrarClienteFCDsctoCargoFijo.Request;
using Claro.SISACT.Entity.BeneficioFullClaro.registrarClienteFCDsctoCargoFijo.Response;
using Claro.SISACT.Entity.BeneficioFullClaro.validarAplicaDsctoCargoFijo.Request;
using Claro.SISACT.Entity.BeneficioFullClaro.validarAplicaDsctoCargoFijo.Response;
//INICIATIVA-805 - FIN - Campana Descuento Cargo Fijo 
//PROY-140657 INI
using Claro.SISACT.Entity.AfiliaciónDEAUAsistidosWSRest.EnviaLink;
using Claro.SISACT.Entity.AfiliaciónDEAUAsistidosWSRest.RegistraEnvio;
//PROY-140657 FIN
using PAGOANTICIPADO_ENTITY = Claro.SISACT.Entity.ClientePagoAnticipadoFijaRest; //PROY-140546
using Claro.SISACT.Entity.ClientePagoAnticipadoFijaRest.DataPower.RegistroPA; //PROY-140546
using System.Web.Script.Serialization; //INC000004091065
using Claro.SISACT.Entity.claroventacobertura.validarcobertura;
using Claro.SISACT.Entity.MotorPromociones.GetBonos;
using Claro.SISACT.Entity.MotorPromociones.SimulacionMultilineas;
using Claro.SISACT.Entity.MotorPromociones.GetMultilineaInfo; //PROY-140546
//PROY-140743 - INI
using Claro.SISACT.Entity.VentasCuotas.ValidarCuoAccPendXLinea.Response;
using Claro.SISACT.Entity.VentasCuotas.ValidarCuoAccPendXLinea.Request;
using Claro.SISACT.Entity.VentasCuotas.ValidarMaterialAccCuota.Response;
using Claro.SISACT.Entity.VentasCuotas.RegistrarVtaAccCuotas.Response;
using Claro.SISACT.Entity.VentasCuotas.RegistrarVtaAccCuotas.Request;
using Claro.SISACT.Entity.VentasCuotas.ObtenerDatosPedidoAccCuotas.Response;
//PROY-140743 - FIN

namespace Claro.SISACT.Web.Paginas.evaluacion_cons
{
    public partial class sisact_evaluacion_unificada : Sisact_Webbase
    {
        #region [Declaracion de Constantes - Config]

        string strFlujoAlta = ConfigurationManager.AppSettings["flujoAlta"];
        string strFlujoPortabilidad = ConfigurationManager.AppSettings["flujoPortabilidad"];
        string constTipoProductoCON = ConfigurationManager.AppSettings["constTipoProductoCON"];
        string constTipoProductoBUS = ConfigurationManager.AppSettings["constTipoProductoBUS"];
        string constTipoProductoB2E = ConfigurationManager.AppSettings["constCodTipoProductoB2E"];
        string constSegmentoCON = ConfigurationManager.AppSettings["constSegmentoCON"];
        string constSegmentoECA = ConfigurationManager.AppSettings["constSegmentoECA"];
        string constDesResultadoFinalAPR = ConfigurationManager.AppSettings["constDesResultadoFinalAPR"];
        string constEstadoAPRENVACT = ConfigurationManager.AppSettings["constEstadoAprobadoEnvActiva"];
        string constDesEstadoAPRENVACT = ConfigurationManager.AppSettings["constDesEstadoAprobadoEnvActiva"];
        string constEstadoEnvCreditos = ConfigurationManager.AppSettings["constEstadoEnvCreditos"];
        string constDesEstadoEnvCreditos = ConfigurationManager.AppSettings["constDesEstadoEnvCreditos"];
        string constEstadoPENDADJARCH = ConfigurationManager.AppSettings["constcodEstadoSECPENDADJARCHIVOS"];
        string constDesEstadoPENDADJARCH = ConfigurationManager.AppSettings["constdesEstadoSECPENDADJARCHIVOS"];
        string constEstadoENVPOOLEMIT = ConfigurationManager.AppSettings["constEstadoENVPOOLEMIT"];
        string constCodCodCanalDefectoMT = ConfigurationManager.AppSettings["constCodCodCanalDefectoMT"];
        string constCodEvaluadorPDV = ConfigurationManager.AppSettings["constCodEvaluadorPDV"];
        string constCodEvaluadorCET = ConfigurationManager.AppSettings["constCodEvaluadorCET"];
        string constDesEstadoENVPOOLEMIT = ConfigurationManager.AppSettings["constDesEstadoENVPOOLEMIT"];
        string constVentaRegistrado = ConfigurationManager.AppSettings["constVentaRegistrado"];
        string constVentaAprobado = ConfigurationManager.AppSettings["constVentaAprobado"];
        string constEstadoAPR = ConfigurationManager.AppSettings["constEstadoAPR"];
        string constDesEstadoAPR = ConfigurationManager.AppSettings["constDesEstadoAPR"];
        string constTipoProductoDTH = ConfigurationManager.AppSettings["constTipoProductoDTH"];
        string constTipoProductoHFC = ConfigurationManager.AppSettings["constTipoProductoHFC"];
        string constTipoProductoFTTH = ConfigurationManager.AppSettings["constTipoProductoFTTH"]; //FTTH
        string constTipoProductoInterInalam = ConfigurationManager.AppSettings["constTipoProductoInterInalam"];//PROY-140690 InterInalam
        string constTipoProductoFijo = ConfigurationManager.AppSettings["constTipoProductoFijo"];
        string constTipoProductoVentaVarios = ConfigurationManager.AppSettings["constTipoProductoVentaVarios"];
        double dblIGV = Funciones.CheckDbl(ConfigurationManager.AppSettings["TasaIGV"]);
        int constFlagConvergente = Funciones.CheckInt(ConfigurationManager.AppSettings["constFlagConvergente"]);
        int CantPlanes = 0; //PROY-30748

        //Inicio IDEA-30067
        int constFlagPortabilidadCP = Funciones.CheckInt(ConfigurationManager.AppSettings["constFlagPortabilidadCP"]);
        string constFlagPortaAutomatico = ConfigurationManager.AppSettings["constFlagPortaAutomatico"].ToString();
        //Fin IDEA-30067
        //INICIATIVA 920
        static string constCodParamModalidadVenta = ConfigurationManager.AppSettings["constCodParamModalidadPago"].ToString();
        string constTipoProducto3PlayInalam = ConfigurationManager.AppSettings["constTipoProducto3PlayInalam"];
        #endregion [Declaracion de Constantes - Config]

        BEClienteCuenta objCliente = null;
        BEDataCreditoOUT objClienteDC = null;
        BEEmpresaExperto objClienteDCCorp = null;
        ArrayList arrGuardarPrima = new ArrayList(); //PROY-24724-IDEA-28174 - INICIO
        bool blnSecTieneProteccionMovil = false;
        List<BEParametro> lstBEParametroProteccionMovil = new List<BEParametro>();
        string strCodServProteccionMovil = string.Empty;
        string strDescServProteccionMovil = string.Empty;
        string strCodEstadoGuardarPrima = string.Empty;

        string strNroSECPROA = string.Empty;//Proy 30748
        static double CuotaInicialComercial = 0.0;//INICIATIVA -803
        static double porcenCuotaInicialComercialBRMS = 0.0;//INICIATIVA- 803
        string strCuotaInicial = string.Empty; //PROY-140743

        List<BEParametro> lstBEEvaluacionProactiva = new List<BEParametro>();//Proy-36928

        //PROY-24724-IDEA-28174 - FIN
        //PROY-30166-IDEA–38863-INICIO
        String strCadenaGrabaCuotaInicial = string.Empty;
        bool blnEvalCuotaTieneMontoInicial = false;
        //PROY-30166-IDEA–38863-FIN
        //gaa20170511
        static int intCPValorEspecial = Funciones.CheckInt(ConfigurationManager.AppSettings["consCPValorEspecial"]);
        //fin gaa20170511 

        public static string strMensajeConfiguracion { get; set; }//PROY-140715

        #region Variables y Sessiones de Servidor

        private static string usuarioAplicacionDataPower = string.Empty;
        private static string claveDatapower = string.Empty;
        private static Result[] listNacionalidadDataPower = null;
        private static List<BETipoDocumento> listDocumentosIdentidad = null;

        #endregion

        protected void Page_Load(object sender, EventArgs e)
        {
            Response.Cache.SetCacheability(HttpCacheability.NoCache);
            Response.Write("<script language='javascript' src='../../Scripts/funciones_sec.js'></script>");

            if (Funciones.CheckStr(HttpContext.Current.Request.QueryString["cu"]).Length == 0)
            {
                Response.Write("<script language=javascript>validarUrl();</script>");
            }
            else
            {
                Response.Write("<script language='javascript'>restringirEventos();</script>");
            }


            //PROY-140245 
            HttpContext.Current.Session["CurrentTerminal"] = null;
            HttpContext.Current.Session["CurrentUser"] = null;

            string codUsuarioExt = Request.QueryString["cu"];
            //PROY-140245 
            HttpContext.Current.Session["CurrentTerminal"] = CurrentTerminal;
            HttpContext.Current.Session["CurrentUser"] = CurrentUser;
            //FIN PROY-140245 
            if (!Base.AccesoUsuario.ValidarAcceso(codUsuarioExt, CurrentUser))
            {
                string strRutaSite = ConfigurationManager.AppSettings["RutaSite"];
                Response.Redirect(strRutaSite);
                return;
            }

            CargarParametroFC();//INC000003048070 
            CargarParametrosProteccionMovil(); //PROY-24724-IDEA-28174
            Cargar_flag_sin_CP();//PROY-140223 IDEA-140462 
            CargarParametrosEvaluacionProactiva(); //EMMH
            CargarParametrosCAI(); //PROY-140546 Cobro Anticipado de Instalacion
            //INICIO|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18			
            string alertas = CargarParametrosBoletaElectronica();
            //FIN|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
            CargarComboBuyback();//PROY-140736

            if (!Page.IsPostBack)
            {
                //PROY-140579 NN INICIO 
                HttpContext.Current.Session["objCodigosBrmsHistorial"] = null;
                HttpContext.Current.Session["objCorrelativoBrmsHistorial"] = null;
                HttpContext.Current.Session["SessionIsWhiteList"] = null;
                HttpContext.Current.Session["objClienteDI"] = null;//PROY-140579
                HttpContext.Current.Session["objEquipoGarantiaProa"] = null;//PROY-140579
                HttpContext.Current.Session["objDireccionIdFilaIFI"] = null;//PROY-140690
                HttpContext.Current.Session["objIdsHistoricoProactiva"] = null;//PROY-140579 F2
                GeneradorLog objLog = CrearLog("140579");
                objLog.CrearArchivolog("[objCodigosBrmsHistorial] = NULL - [140579]", null, null);
                //PROY-140579 NN FIN

                //INICIO|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
                HttpContext.Current.Session["oUsuario"] = (BEUsuarioSession)Session["Usuario"];
                //FIN|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18

				//INICIO INICIATIVA-932
                if (Funciones.CheckStr(ReadKeySettings.Key_FlagGeneralCobertura) == "1")
                {
                	HttpContext.Current.Session["flagDireccionIFI"] = false;
				}
				//FIN INICIATIVA-932

                Inicio();
            }
            else
            {
                string accion = hidnValueAccion.Value;
                if (accion == "Grabar")
                {
                    //INI: PROY-BLACKOUT
                    if (blackOutRentaAdelantada())
                    {
                        Grabar();
                    }
                    //FIN: PROY-BLACKOUT
                }
            }
        }

        //PROY-140546 Cobro Anticipado de Instalacion
        private void CargarParametrosCAI()
        {
            GeneradorLog objLog = CrearLog(hidUsuarioRed.Value);
            objLog.CrearArchivolog("[Inicio][CargarParametrosCAI]", null, null);
            hidFlagAplicaCAI.Value = ReadKeySettings.ConsFlagAplicaCAI;
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][CargarParametrosCAI][ConsFlagAplicaCAI] ", ReadKeySettings.ConsFlagAplicaCAI), null, null);
            hidTiempoSecPendientePagoLink.Value = Funciones.CheckStr(ReadKeySettings.ConsTiempoSecPendientePagoLink);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][CargarParametrosCAI][ConsTiempoSecPendientePagoLink] ", ReadKeySettings.ConsTiempoSecPendientePagoLink), null, null);
            hidCodigoPDVTeleventas.Value = Funciones.CheckStr(ReadKeySettings.ConsCodigoPDVTeleventas);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][CargarParametrosCAI][ConsCodigoPDVTeleventas] ", ReadKeySettings.ConsCodigoPDVTeleventas), null, null);
            hidMsjValidacionSubformularioCAI.Value = Funciones.CheckStr(ReadKeySettings.ConsMsjValidacionSubFormularioCAI);
            hidCanalesPermitidosCAI.Value = ReadKeySettings.Key_CanalesPermitidosCAI;
            hidCaiDescuentoFullClaro.Value = ReadKeySettings.Key_MontoDescuentoPorFullClaroCAI;
            objLog.CrearArchivolog("[Fin][CargarParametrosCAI]", null, null);
        }
        //PROY-140546 Cobro Anticipado de Instalacion

        public void Inicio()
        {
            try
            {
                //INICIATIVA 920
                hdModalidaDefecto.Value = AppSettings.KeyModalidadDefecto;
 
                BEUsuarioSession objUsuarioSession = (BEUsuarioSession)Session["Usuario"];

                BLGeneral objConsulta = new BLGeneral();
                List<BEPuntoVenta> lstOficina = new List<BEPuntoVenta>();
                List<BEItemGenerico> lstTipoOficina = new List<BEItemGenerico>();
                List<BEItemGenerico> lstGeneral = null;

                // Consulta datos Usuario
                if (!(objUsuarioSession.idUsuarioSisact > 0))
                {
                    string script = string.Format("{0}{1}{2}", "alert('" + ConfigurationManager.AppSettings["constMensajeUsuarioPDV"].ToString() + "');", "setEnabled('btnNuevaEvaluacion', false, '');", "setEnabled('btnvalidarClaro', false, '');");
                    ClientScript.RegisterStartupScript(Page.GetType(), "script", "<script>" + script + ";</script>");
                    return;
                }
                hidUsuarioRed.Value = objUsuarioSession.idCuentaRed;
                hidListaPerfiles.Value = objUsuarioSession.CadenaOpcionesPagina;
                //INICIATIVA-803 INI
                BEItemGenerico itemPicking = consultaFlagPicking();
                if (itemPicking != null)
                {
                    hidFlagDelivery.Value = itemPicking.Codigo3;
                }
                hidFlagApagadoExcepcionPrecio.Value = Funciones.CheckStr(ReadKeySettings.Key_FlagApagadoExcepcionPrecio);
                //INICIATIVA-803 FIN
                //INI: 2014 Campaña PORTABILIDAD 50% DSCTO - RMZ
                hidCodigoCampaniaPorta50Dscto.Value = Comun.AppSettings.consCodigoCampaniaPorta50Dscto;
                hidNroDiasPermitidosOP.Value = Comun.AppSettings.consNroDiasPermitidosOP;
                hidMsgPermanenciaOP.Value = Comun.AppSettings.consMsgPermanenciaOP;
                //FIN: 2014 Campaña PORTABILIDAD 50% DSCTO - RMZ

                //PROY-140397-MCKINSEY INICIO LVR
                GeneradorLog objLog_ = CrearLog(hidUsuarioRed.Value.ToString());
                BEValidarMultipunto listValidarMultipunto;
                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - listValidarMultipunto -> objUsuarioSession.idUsuarioSisact  : " + objUsuarioSession.idUsuarioSisact, null, null);
                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - listValidarMultipunto -> objUsuarioSession.OficinaVenta : " + objUsuarioSession.OficinaVenta, null, null);
                listValidarMultipunto = BLMaestro.ListaValidarMultipunto(objUsuarioSession.OficinaVenta);
                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - listValidarMultipunto -> Datos : " + listValidarMultipunto.Datos.Count, null, null);
                Int64 idUsuario = objUsuarioSession.idUsuarioSisact;

                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - Perfil149 -> " + objUsuarioSession.Perfil149, null, null);
                bool flagPerfil149Mant = false;
                if (objUsuarioSession.Perfil149)
                {
                    idUsuario = 0;
                    hidPerfil_149.Value = "S";
                    hidOficinaUsuario.Value = objUsuarioSession.OficinaVenta; //PROY-140223 IDEA-140462
                    // Datos PDV x Usuario
                    lstOficina = objConsulta.ConsultaPDVUsuario(idUsuario, constTipoProductoCON);
                    lstTipoOficina = objConsulta.ConsultaTipoOficinaUsuario(idUsuario, constTipoProductoCON);

                    if (listValidarMultipunto.Datos.Count > 0 && listValidarMultipunto.Datos[0].C_FLAGEVALUACION == "1" && listValidarMultipunto.Datos[0].C_ESTADO == "1")
                    {
                        lstOficina = listValidarMultipunto.Oficinas;
                        lstTipoOficina = listValidarMultipunto.Canales;

                    }
                    flagPerfil149Mant = true;

                }
                else if (listValidarMultipunto.Datos.Count > 0)
                {

                    objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - listValidarMultipunto -> C_FLAGEVALUACION :" + listValidarMultipunto.Datos[0].C_FLAGEVALUACION, null, null);
                    objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - listValidarMultipunto -> C_ESTADO : " + listValidarMultipunto.Datos[0].C_ESTADO, null, null);

                    if (listValidarMultipunto.Datos[0].C_FLAGEVALUACION == "1" && listValidarMultipunto.Datos[0].C_ESTADO == "1")
                    {
                        hidPerfil_149.Value = "S";
                        lstOficina = listValidarMultipunto.Oficinas;
                        lstTipoOficina = listValidarMultipunto.Canales;
                        hidOficinaUsuario.Value = objUsuarioSession.OficinaVenta;
                        flagPerfil149Mant = true;
                    }
                }

                if (!flagPerfil149Mant)
                {
                    lstOficina = objConsulta.ConsultaPDVUsuario(idUsuario, constTipoProductoCON);
                    lstTipoOficina = objConsulta.ConsultaTipoOficinaUsuario(idUsuario, constTipoProductoCON);
                }
                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - hidPerfil_149 -> " + hidPerfil_149.Value, null, null);
                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - lstOficina -> " + lstOficina.Count, null, null);
                objLog_.CrearArchivolog(" PROY-140397-MCKINSEY - lstTipoOficina -> " + lstTipoOficina.Count, null, null);

                //PROY-140397-MCKINSEY LVR FIN


                hidOficinaUsuario.Value = objUsuarioSession.OficinaVenta; //PROY-140223 IDEA-140462

                // Listado de PDVs
                HttpContext.Current.Session["SeslstOficina"] = lstOficina; //PROY-140618
                //PROY-24740                 
                StringBuilder sbOficina = new StringBuilder();
                foreach (BEPuntoVenta obj in lstOficina)
                {
                    sbOficina.Append("|");
                    sbOficina.Append(obj.OvencCodigo);
                    sbOficina.Append(";");
                    sbOficina.Append(obj.OvenvDescripcion);
                    sbOficina.Append(";");
                    sbOficina.Append(obj.ToficCodigo);
                    sbOficina.Append(";");
                    sbOficina.Append(obj.CanacCodigo);
                    sbOficina.Append(";");
                    sbOficina.Append(obj.OvencRegion);
                }
                hidListaPuntoVenta.Value = sbOficina.ToString();
                //PROY-24740 
                //INICIO JVERASTEGUI PROY-32280 IDEA-42248 PICKING FASE 3 DELIVERY
                hdnFlagValidar.Value = "0";
                if (lstTipoOficina[0].Codigo == "02" || lstTipoOficina[0].Codigo == "03")
                {
                    hdnFlagValidar.Value = "1";
                }
                //FIN JVERASTEGUI PROY-32280 IDEA-42248 PICKING FASE 3 DELIVERY
                // Listado de Parametros General [Tabla: SISACT_PARAM_CONFIG]
                List<BEItemGenerico> lstParametro = objConsulta.ListarParametroGeneral("1");
                StringBuilder sbParamGeneral = new StringBuilder();
                foreach (BEItemGenerico obj in lstParametro)
                {
                    if ((obj.Codigo == ConfigurationManager.AppSettings["COD_GRUPO_CANAL_NO_ERROR_TIPO_7"].ToString()) ||
                        (obj.Codigo == ConfigurationManager.AppSettings["COD_GRUPO_DOC_NO_ERROR_TIPO_7"].ToString()))
                    {
                        obj.Valor = obj.Valor.Replace("0", "-0");
                    }

                    sbParamGeneral.Append("|");
                    sbParamGeneral.Append(obj.Codigo);
                    sbParamGeneral.Append(";");
                    sbParamGeneral.Append(obj.Valor);

                    if (ConfigurationManager.AppSettings["constNRO_EQUIPOS_3PLAY_MAX"] == Funciones.CheckStr(obj.Codigo))
                        hidNroEquipos3PlayMax.Value = obj.Valor;

                    if (obj.Codigo == ConfigurationManager.AppSettings["consUsuarioLog"].ToString())
                    {
                        BEGlobal.usuarioConsulta = obj.Valor;
                    }

                    if (ConfigurationManager.AppSettings["constPlanComboRestringido"] == Funciones.CheckStr(obj.Codigo))
                        hidPlanComboRestringido.Value = obj.Valor;

                }

                hidListaParametro.Value = sbParamGeneral.ToString();

                // Listado de Parametros General II [Tabla: SISACT_PARAMETRO]
                //EMG - Sobrecarga de datos - Consulta a tabla parametros eliminada - hidListaParametroII

                //PROY-32438 "Flag Apagado/Encendido" INI
                GeneradorLog _objLog = CrearLog(hidUsuarioRed.Value.ToString());
                _objLog.CrearArchivolog("- INI: PARAMETROS DE SALIDA PROY-32438" + null, null, null);
                var lstParamFlagApagado = objConsulta.ListaParametros(Int64.Parse(ConfigurationManager.AppSettings["codFlagApagado32438"] ?? "0"));
                _objLog.CrearArchivolog("- EVAL_UNIFICADA.INICIO - codFlagApagado32438 -> " + ConfigurationManager.AppSettings["codFlagApagado32438"], null, null);

                if (lstParamFlagApagado.Count == 1)
                {
                    HttpContext.Current.Session["FlagApagado32438"] = lstParamFlagApagado.FirstOrDefault().Valor;
                    _objLog.CrearArchivolog("- EVAL_UNIFICADA.INICIO - lstParamFlagApagado -> " + lstParamFlagApagado.FirstOrDefault().Valor, null, null);
                }
                _objLog.CrearArchivolog("- EVAL_UNIFICADA.INICIO - FlagApagado32438.session -> " + HttpContext.Current.Session["FlagApagado32438"], null, null);
                _objLog.CrearArchivolog("- FIN: PARAMETROS DE SALIDA PROY-32438" + null, null, null);
                //PROY-32438 "Flag Apagado/Encendido" FIN

                // Consulta BlackList Vendedores
                if (objUsuarioSession.Perfil149)
                {
                    //PROY-24740 
                    List<BEPuntoVenta> lstBlackListPdv = (new BLConsumer()).ListarBlackListPdv();
                    StringBuilder sbBlackListPdv = new StringBuilder();
                    foreach (BEPuntoVenta obj in lstBlackListPdv)
                    {
                        sbBlackListPdv.Append("|");
                        sbBlackListPdv.Append(obj.CanacCodigo);
                        sbBlackListPdv.Append("-");
                        sbBlackListPdv.Append(obj.OvencCodigo);
                    }

                    /* VALIDACION HIDDEN - INI */
                    HttpContext.Current.Session["sessionVal_hidListaBlackList"] = sbBlackListPdv.ToString();
                    _objLog.CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidListaBlackList]", sbBlackListPdv.ToString(), null);
                    /* VALIDACION HIDDEN - FIN */

                    hidListaBlackList.Value = sbBlackListPdv.ToString();
                    //PROY-24740 
                }
                else
                {
                    foreach (BEPuntoVenta obj in lstOficina)
                    {
                        if (((new BLConsumer()).ValidarBlackListPdv(obj.ToficCodigo, obj.OvencCodigo) == 1) && (obj.OvencRegion == "L"))
                        {
                            hidBLVendedor.Value = "S";
                        }
                    }
                }

                //PROY-24740 
                StringBuilder sbListarComodato = new StringBuilder();
                lstGeneral = new BLGeneral().ListarComodato();
                foreach (BEItemGenerico item in lstGeneral)
                {
                    sbListarComodato.Append("|");
                    sbListarComodato.Append(item.Codigo);
                    sbListarComodato.Append(";");
                    sbListarComodato.Append(item.Cantidad);
                }
                hidListaComodato.Value = sbListarComodato.ToString();

                //PROY-24740 
                lstGeneral = new BLGeneral().ListarPlanBase();
                StringBuilder sbListarPlanBase = new StringBuilder();
                foreach (BEItemGenerico item in lstGeneral)
                {
                    sbListarPlanBase.Append("|");
                    sbListarPlanBase.Append(item.Codigo);

                }
                hidPlanBase.Value = sbListarPlanBase.ToString();

                //PROY-24740 
                lstGeneral = new BLGeneral().ListarPlanCombo();
                StringBuilder sbListarPlanCombo = new StringBuilder();
                foreach (BEItemGenerico item in lstGeneral)
                {
                    sbListarPlanCombo.Append("|");
                    sbListarPlanCombo.Append(item.Codigo);
                }
                hidPlanCombo.Value = sbListarPlanCombo.ToString();

                HttpContext.Current.Session["Oficina"] = lstTipoOficina;//INICIATIVA 920
                LlenarTipoDocumento(lstTipoOficina); //PROY-31636
                LlenarNacionalidad(); //PROY-31636
                LlenarTipoCanal(lstTipoOficina);
                LlenarTipoOferta();
                LlenarTipoOperacion();
                LlenarTipoModalidad();
                //LlenarModalidadVenta();//INICIATIVA 920

                //PROY-26963 - IDEA-34399: Mejora Portabilidad Despacho PDV
                hidConsMensajesCPCarrito.Value = Comun.AppSettings.consMensajesCPCarrito;

                //PROY-2X1
                hidCampaniaPortabilidad.Value = Funciones.CheckStr(Comun.AppSettings.consflagVigenciaPromo2x1);

                //PROY-140230-MAS-INI
                HttpContext.Current.Session["strClienteSegmento"] = "";
                //PROY-140230-MAS-FIN

                //PROY-26963-F3 - GPRD
                hAdjuntarDocumento.Value = string.Empty;
                //Fin PROY-26963-F3 - GPRD

                //PROY-32439 INI MAS
                HttpContext.Current.Session["ObjNvoBRMS"] = null;
                HttpContext.Current.Session["intFlagRRLL"] = null;
                HttpContext.Current.Session["blnRRLLBRMS"] = null;
                HttpContext.Current.Session["blnRRWhiteList"] = null;
                HttpContext.Current.Session["strSoloEvaluarFijo"] = null;
                HttpContext.Current.Session["ObjTienePorta"] = null; //PROY-32439
                HttpContext.Current.Session["ParametrosBeneficioLineasAdicionales"] = null; //IDEA-142010                
                HttpContext.Current.Session["ParametrosBeneficioLineasAdicionalesDtp"] = null; //IDEA-142010          
                //PROY-32439 FIN MAS

                HttpContext.Current.Session["idBRMS_Campanas"] = null; //PROY-140439 BRMS CAMPAÑA NAVIDEÑA::INI

                //PROYECYTO 140141:: KV FASE 2 INICIO
                hdnSecCT.Value = "";
                hdnNumCT.Value = "";
                hdnOkCT.Value = "";
                if (Funciones.CheckStr(HttpContext.Current.Request.QueryString["ct"]).Length > 0)
                {
                    hdnSecCT.Value = Funciones.CheckStr(HttpContext.Current.Request.QueryString["ct"]);
                    hdnNumCT.Value = Funciones.CheckStr(HttpContext.Current.Request.QueryString["nm"]);
                    hdnOkCT.Value = "0";
                }

                #region [Mejoras Beneficio Lineas Adicionales 50% dscto cargo fijo]
                //IDEA-142010 INICIO
                List<BEParametro> objBeneficioLineasAdicionales = new BLGeneral().ListaParametrosGrupo(Funciones.CheckInt64(ConfigurationManager.AppSettings["CodigoBeneficioParametro"]));
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Mensajes Parametros Beneficio]", Funciones.CheckStr(objBeneficioLineasAdicionales.Count)), null, null);

                string strKeyVigenciaCampana = Funciones.CheckStr(objBeneficioLineasAdicionales.Where(w => w.Descripcion.Equals(Constantes.KeyVigenciaCampanas_Cantidad)).ToList()[0].Valor);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Campanas Vigentes -  Beneficio Lineas Adicionales]", Funciones.CheckStr(objBeneficioLineasAdicionales.Count)), null, null);

                string strCodigoRespuesta = string.Empty;
                string strMensajeRespuesta = string.Empty;
                int validarVigenciaCampana = new BLGeneral().ValidarVigenciaCampana(strKeyVigenciaCampana, ref strCodigoRespuesta, ref strMensajeRespuesta);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Campanas Vigentes]", validarVigenciaCampana), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Codigo Respuesta Campanas vigentes]", strCodigoRespuesta), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Mensaje Respuesta Campanas vigentes]", strMensajeRespuesta), null, null);

                BEParametro objItemBeneficioLineasAdicionales = new BEParametro();
                objItemBeneficioLineasAdicionales.Codigo = Funciones.CheckInt64(DateTime.Now.ToString("yyyyMMdd"));
                objItemBeneficioLineasAdicionales.Descripcion = "IDEA-142010 Cantidad de campañas vigentes";
                objItemBeneficioLineasAdicionales.Valor = Constantes.KeyCantidadCampanasVigentes;
                objItemBeneficioLineasAdicionales.Valor1 = Funciones.CheckStr(validarVigenciaCampana);
                objItemBeneficioLineasAdicionales.flagSistema = Funciones.CheckStr(1);
                objBeneficioLineasAdicionales.Add(objItemBeneficioLineasAdicionales);
                if (Session["ParametrosBeneficioLineasAdicionales"] == null) Session["ParametrosBeneficioLineasAdicionales"] = objBeneficioLineasAdicionales;
                //IDEA-142010 FIN
                #endregion [Mejoras Beneficio Lineas Adicionales 50% dscto cargo fijo]

                //PROYECYTO 140141:: KV FASE 2 FIN
                HttpContext.Current.Session["ListaBeneficioElegidoFC"] = null; //FullClaro.v2
                //INICIATIVA-805 - INICIO - Campana Descuento Cargo Fijo
                HttpContext.Current.Session["FullClaro"] = null;
                HttpContext.Current.Session["CandidatoFC"] = null;
                HttpContext.Current.Session["DatosPlan"] = null;
                HttpContext.Current.Session["planesEvaluadosFC"] = null;
                HttpContext.Current.Session["listOnHoldClienteFC"] = null;
                //INICIATIVA-805 - FIN - Campana Descuento Cargo Fijo

                //PROY-140457-DEBITO AUTOMATICO-INI
                HttpContext.Current.Session["InfDebitoAutomatico"] = null;
                HttpContext.Current.Session["ListaSoplnCodigo"] = null;
                //PROY-140457-DEBITO AUTOMATICO-FIN

                hidFlagCaiFullClaro.Value = "0";//PROY-140546
                hdiRestriccionCampanasFullClaro.Value = "";//INICIATIVA-1012
            }
            catch (Exception ex)
            {
                GeneradorLog _objLog = CrearLog(hidUsuarioRed.Value.ToString());
                _objLog.CrearArchivolog("[ERROR INICIO PAGINA]", null, ex);
                string script = string.Format("{0}{1}{2}", "alert('" + ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString() + "');", "setEnabled('btnNuevaEvaluacion', false, '');", "setEnabled('btnvalidarClaro', false, '');");
                ClientScript.RegisterStartupScript(Page.GetType(), "script", "<script>" + script + ";</script>");
                return;
            }
        }

        #region [WebMethod]

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod cambiarTipoOferta(string strTipoOperacion, string strTipoOferta, string strTipoFlujo, string strEvaluarSoloFijo,
                                                            string strTipoDocumento, string nroDocumento, string strOficina, string strModalidadVenta)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            try
            {
                if (strTipoDocumento == ConfigurationManager.AppSettings["TipoDocumentoRUC"])
                    strTipoDocumento = Funciones.TipoRUC1020(nroDocumento);
                //PROY-24740
                objResponse.Cadena = string.Format("{0}¬{1}¬{2}", BLReglaNegocio.LlenarTipoProductoxOferta(strTipoOferta, strTipoFlujo, strTipoOperacion, strEvaluarSoloFijo, strTipoDocumento, string.Empty, strModalidadVenta), BLReglaNegocio.LlenarCasoEspecial(strTipoOferta, strTipoFlujo, strTipoOperacion, strOficina), BLReglaNegocio.ListarCombo(strOficina, strTipoOferta, strTipoOperacion, strTipoFlujo, strTipoDocumento, strModalidadVenta));
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString();
                CrearLogStatic(string.Empty).CrearArchivolog("[ERROR][cambiarTipoOferta]", null, ex);
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BECasoEspecial cambiarCasoEspecial(string strTipoOperacion, string strTipoOferta, string strTipoFlujo, string strEvaluarSoloFijo, string strTipoDocumento,
                                                         string nroDocumento, string strCasoEspecial, string strWhitelist, string strModalidadVenta)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            _objLog.CrearArchivolog(string.Format("{0} - {1}", "[INICIO - cambiarCasoEspecial()]", "[IDEA-142010]"), null, null);

            BECasoEspecial objCasoEspecial = new BECasoEspecial();
            string listaCEPlanxProd = string.Empty;
            try
            {
                objCasoEspecial = BLReglaNegocio.CambiarCasoEspecial(strTipoOperacion, strTipoOferta, strTipoFlujo, strEvaluarSoloFijo, strTipoDocumento,
                                                                        nroDocumento, strCasoEspecial, strWhitelist, strModalidadVenta);

                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

                string strPlanxProducto = objCasoEspecial.PLANES_BSCS;
                string[] arrPlanxProducto = strPlanxProducto.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

                if (objCliente.oPlanesActivosxBilletera != null)
                {
                    foreach (BEPlanBilletera objPlan in objCliente.oPlanesActivosxBilletera)
                    {
                        foreach (string objPlanCE in arrPlanxProducto)
                        {
                            string idPlanBscs = objPlanCE.Split(';')[0];

                            if (objPlan.plan == idPlanBscs)
                            {
                                string idProducto = objPlanCE.Split(';')[1];

                                listaCEPlanxProd = string.Format("{0}|{1};{2};{3}", listaCEPlanxProd, idPlanBscs, idProducto, objPlan.nroPlanes);
                            }
                        }
                    }
                }
                objCasoEspecial.NRO_PLANES_X_PRODUCTO = listaCEPlanxProd;

                //IDEA-142010 INICIO   

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][cambiarCasoEspecial()][Flag Whitelist]", objCasoEspecial.FLAG_WHITELIST), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][cambiarCasoEspecial()][Caso Especial Seleccionado]", strCasoEspecial), null, null);
                string msgCasoEspecial = string.Empty;

                string isPortabilidad = Funciones.CheckStr(HttpContext.Current.Session["ObjTienePorta"]);//SI -> S // NO -> VACIO
                string tipoOperacionAlta = Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoOperacionVNA"]);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][cambiarCasoEspecial()][isPortabilidad]", isPortabilidad), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][cambiarCasoEspecial()][tipoOperacionAlta]", tipoOperacionAlta), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][cambiarCasoEspecial()][strTipoOperacion]", strTipoOperacion), null, null);

                if (strTipoOperacion == tipoOperacionAlta || isPortabilidad == "S")
                {
                    MensajeCasoEspecial(nroDocumento, objCasoEspecial.FLAG_WHITELIST, strCasoEspecial, ref msgCasoEspecial);
                }

                objCasoEspecial.BENEFICIOADICIONAL = msgCasoEspecial;
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][cambiarCasoEspecial()][Mensaje Caso Especial Label]", objCasoEspecial.BENEFICIOADICIONAL), null, null);

                //IDEA-142010 FIN
            }
            catch (Exception ex)
            {
                CrearLogStatic(nroDocumento).CrearArchivolog("[ERROR][cambiarCasoEspecial]", null, ex);
            }
            _objLog.CrearArchivolog(string.Format("{0} - {1}", "[FIN - cambiarCasoEspecial()]", "[IDEA-142010]"), null, null);

            return objCasoEspecial;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod cambiarTipoModalidad(string strOficina, string strTipoOperacion, string strTipoOferta, string strTipoFlujo, string strEvaluarSoloFijo,
                                                                string strTipoDocumento, string nroDocumento, string strCasoEspecial, string strModalidadVenta)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            try
            {
                if (strTipoDocumento == ConfigurationManager.AppSettings["TipoDocumentoRUC"])
                    strTipoDocumento = Funciones.TipoRUC1020(nroDocumento);
                //PROY-24740
                objResponse.Cadena = string.Format("{0}¬{1}", BLReglaNegocio.LlenarTipoProductoxOferta(strTipoOferta, strTipoFlujo, strTipoOperacion, strEvaluarSoloFijo, strTipoDocumento, strCasoEspecial, strModalidadVenta), BLReglaNegocio.ListarCombo(strOficina, strTipoOferta, strTipoOperacion, strTipoFlujo, strTipoDocumento, strModalidadVenta));
            }
            catch (Exception ex)
            {
                objResponse.Boleano = false;
                objResponse.DescripcionError = ex.Message;
                objResponse.Mensaje = "Error en el proceso, favor intentar nuevamente.";
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod consultaDNIVendedor(String strDNIVendedor, String strOficina)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            try
            {
                string strMensaje = string.Empty;
                string idVendedor = string.Empty;
                objResponse.Boleano = (new BLConsumer()).ValidarVendedor(strDNIVendedor, strOficina, ref strMensaje, ref idVendedor);
                objResponse.Cadena = idVendedor;
                objResponse.Mensaje = strMensaje;
            }
            catch (Exception ex)
            {
                objResponse.Boleano = false;
                objResponse.DescripcionError = ex.Message;
                objResponse.Mensaje = "Error en el proceso, favor intentar nuevamente.";
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod consultaSOTxMigracion(string tipoDocumento, string nroDocumento)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            string tipoDocumentoSGA = string.Empty;
            try
            {
                List<BETipoDocumento> objListaDocumento = new BLGeneral().ListarTipoDocumento();
                foreach (BETipoDocumento obj in objListaDocumento)
                {
                    if (obj.ID_SISACT == tipoDocumento)
                    {
                        tipoDocumentoSGA = obj.ID_SGA;
                        break;
                    }
                }

                Int64 nroSOT = new BLConsumer().ObtenerSOTxMigracion(tipoDocumentoSGA, nroDocumento);
                objResponse.Cadena = Funciones.CheckStr(nroSOT);
                if (nroSOT == 0)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjSinSOTMigracion"].ToString();
                }
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString();
                CrearLogStatic(nroDocumento).CrearArchivolog("[ERROR][consultaSOTxMigracion]", null, ex);
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod consultaOperadorCedente(string strTipoPortabilidad)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            List<BEParametroPortabilidad> objLista = (new BLPortabilidad()).ListarParametroPortabilidad("CO", "", "1", strTipoPortabilidad, "", 1);
            foreach (BEParametroPortabilidad obj in objLista)
            {
                objResponse.Cadena = string.Format("{0}|{1};{2}", objResponse.Cadena, obj.PK_PARAT_PARAC_COD, obj.DESCRIPCION);
            }
            HttpContext.Current.Session["OperadorCedente"] = objResponse.Cadena; //INC000002628010 + 3
            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaClaro(string tipoDocumento, string nroDocumento, string strOficina, string strFechaNac, string strFlagPortaBRMS) // PROY- 32439 PARAM strFlagPortaBRMS
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            string tipo = string.Empty;//PROY-140715
            try
            {
                //PROY-32581 - INICIO
                if (HttpContext.Current.Session["objDireccion" + nroDocumento] != null)
                {
                    HttpContext.Current.Session["objDireccion" + nroDocumento] = null;
                }
                //PROY-32581 - FIN

                HttpContext.Current.Session["ObjTienePorta"] = strFlagPortaBRMS; // PROY-32439 

                HttpContext.Current.Session["validacionLineasAdic"] = false;
                HttpContext.Current.Session["blMostrarCampanasDescuento"] = false;


                //gaa20170511
                BLConsumer objConsumer = new BLConsumer();
                BEItemMensaje objMensaje = null;
                BETipoDocumento objDocumento = null;
                int intComportamientoPago = 0;
                List<BETipoDocumento> objListaDocumento = (new BLGeneral()).ListarTipoDocumento();
                int intCPValorEspecial = Convert.ToInt32(ConfigurationManager.AppSettings["consCPValorEspecial"]);

                //INC000001337773 - INICIO
                GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
                string strUsuario = "";
                if (HttpContext.Current.Session["Usuario"] != null)
                {
                    BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                    strUsuario = objUsuario.Login;
                }

                _objLog.CrearArchivolog("INICIO Tipo cliente 140560: ", null, null);
                BEClienteCuenta objCliente = new BEClienteCuenta();
                objCliente.nroDoc = nroDocumento;
                objCliente.tipoDoc = tipoDocumento;
                string p_nrolog = "", p_deslog = "";
                //INC000001337773 - FIN
                foreach (BETipoDocumento obj in objListaDocumento)
                {
                    if (obj.ID_SISACT == tipoDocumento)
                    {
                        objDocumento = new BETipoDocumento();
                        objDocumento = obj;
                        objDocumento.ID_OAC = Funciones.CheckInt(tipoDocumento).ToString();
                        break;
                    }
                }

                _objLog.CrearArchivolog("FIN Tipo cliente 140560: ", null, null);

                _objLog.CrearArchivolog("INICIO CBIO 140560: ", null, null);

                //INI: INICIATIVA-219
                HttpContext.Current.Session["flagCBIO"] = null;
                HttpContext.Current.Session["WhiteListFlagCBIO"] = null;
                BLDatosCBIO objBLCbio = new BLDatosCBIO();
                string strflagCBIO = AppSettings.consFlagCBIO;
                string strWhiteListFlagCBIO = objBLCbio.ConsultarWhiteListCBIO(tipoDocumento, nroDocumento, strOficina);
                HttpContext.Current.Session["flagCBIO"] = Funciones.CheckStr(strflagCBIO);
                HttpContext.Current.Session["WhiteListFlagCBIO"] = Funciones.CheckStr(strWhiteListFlagCBIO);

                _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-219][strflagCBIO]", Funciones.CheckStr(strflagCBIO)), null, null);
                _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-219][strWhiteListFlagCBIO]", Funciones.CheckStr(strWhiteListFlagCBIO)), null, null);

                intComportamientoPago = objBLCbio.ObtenerComportamientoPago(tipoDocumento, nroDocumento);
                //FIN INICIATIVA-219                

                _objLog.CrearArchivolog("FIN CBIO 140560: ", null, null);

                //fin gaa20170511
                // Validación Cliente es Mayor Edad
                if (tipoDocumento != ConfigurationManager.AppSettings["TipoDocumentoRUC"].ToString() && !Comun.WebComunes.EsMayorEdad(strFechaNac))
                {
                    objResponse.Tipo = "E";
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjClienteMenordeEdad"].ToString();
                    //INC000001337773 - INICIO
                    string strMotivo = objResponse.Mensaje;
                    BLSolicitud.rechazoEvaluacion(objCliente, strMotivo, strUsuario, "1", null, ref p_nrolog, ref p_deslog);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Codigo de Respuesta: " + p_nrolog, null, null);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Mensaje de Respuesta: " + p_deslog, null, null);
                    //INC000001337773 - FIN
                    return objResponse;
                }

                // Consulta BlackList Comisiones
                objResponse.Tipo = (new BLConsumer()).ConsultaBlackListComisiones(tipoDocumento, nroDocumento);
                if (objResponse.Tipo == "S" && intComportamientoPago != intCPValorEspecial)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjBlackListComisiones"].ToString();
                    //INC000001337773 - INICIO
                    string strMotivo = objResponse.Mensaje;
                    BLSolicitud.rechazoEvaluacion(objCliente, strMotivo, strUsuario, "1", null, ref p_nrolog, ref p_deslog);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Codigo de Respuesta: " + p_nrolog, null, null);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Mensaje de Respuesta: " + p_deslog, null, null);
                    //INC000001337773 - FIN
                    return objResponse;
                }

                // Consulta SEC Pendiente con Venta y sin Pago
                Int64 nroSEC = (new BLSolicitud()).ObtenerSECPendienteVentaSinPago(tipoDocumento, nroDocumento);
                if (nroSEC > 0)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = string.Format(ConfigurationManager.AppSettings["consMsjSecConVentaSinPago"].ToString(), nroSEC.ToString());
                    //INC000001337773 - INICIO
                    string strMotivo = objResponse.Mensaje;
                    BLSolicitud.rechazoEvaluacion(objCliente, strMotivo, strUsuario, "1", null, ref p_nrolog, ref p_deslog);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Codigo de Respuesta: " + p_nrolog, null, null);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Mensaje de Respuesta: " + p_deslog, null, null);
                    //INC000001337773 - FIN
                    return objResponse;
                }

                // Consulta Datos Cliente
                objResponse = consultaDatosCliente(tipoDocumento, nroDocumento, strOficina, intComportamientoPago);
                //INC000001337773 - INICIO

                _objLog.CrearArchivolog("[INC000004091065][sisact_evaluacion_unificada][ConsultaClaro]", string.Format("{0}:{1}", "[objResponse de consultaDatosCliente()]",Funciones.CheckStr(new JavaScriptSerializer().Serialize(objResponse))), null);


                if (objResponse.Mensaje != string.Empty && objResponse.Mensaje != null)
                {
                    string strMotivo = objResponse.Mensaje;
                    BLSolicitud.rechazoEvaluacion(objCliente, strMotivo, strUsuario, "1", null, ref p_nrolog, ref p_deslog);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Codigo de Respuesta: " + p_nrolog, null, null);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Mensaje de Respuesta: " + p_deslog, null, null);
                }
                //GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
                //INC000001337773 - FIN 
                _objLog.CrearArchivolog("[Inicio][consultaClaro]", null, null);

                HttpContext.Current.Session["docCliente"] = nroDocumento;
                _objLog.CrearArchivolog("HttpContext.Current.Session[docCliente]=>" + Funciones.CheckStr(HttpContext.Current.Session["docCliente"]), null, null);

                BEClienteCuenta objClienteConsulta = new BEClienteCuenta();
                objClienteConsulta = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

                //PROY-32439 MAS INI
                //INC000001337773 - INICIO
                if (objClienteConsulta != null && objClienteConsulta.deudaTotal > 0) // PROY-32439
                {
                    string strMotivo = objClienteConsulta.mensajeDeudaBloqueo;
                    BLSolicitud.rechazoEvaluacion(objClienteConsulta, strMotivo, strUsuario, "1", null, ref p_nrolog, ref p_deslog);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Codigo de Respuesta: " + p_nrolog, null, null);
                    _objLog.CrearArchivolog("Metodo rechazoEvaluacion - Mensaje de Respuesta: " + p_deslog, null, null);
                    _objLog.CrearArchivolog("objClienteConsulta.tipoDoc =>" + Funciones.CheckStr(objClienteConsulta.tipoDoc), null, null); //PROY-32439
                    _objLog.CrearArchivolog("objClienteConsulta.nroDoc =>" + Funciones.CheckStr(objClienteConsulta.nroDoc), null, null); //PROY-32439
                }
                //INC000001337773 - FIN
                //PROY-32439 MAS FIN
                _objLog.CrearArchivolog("objClienteConsulta.tipoDoc =>" + Funciones.CheckStr(objClienteConsulta.tipoDoc), null, null);
                _objLog.CrearArchivolog("objClienteConsulta.nroDoc =>" + Funciones.CheckStr(objClienteConsulta.nroDoc), null, null);

                //INICIO|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18

                // Datos PDV x Usuario
                BLGeneral objConsulta = new BLGeneral();
                StringBuilder sbOficina = new StringBuilder();
                var strCorreosHistoricos = String.Empty;

                var strCanal = String.Empty;
                BEConsultaDatosOficina oListConsultaDatosOficina = BLSincronizaSap.ConsultaDatosOficina(Funciones.CheckStr(strOficina), null);

                //INICIO PROY-140419 Autorizar Portabilidad sin PIN
                string codigoSinergia = oListConsultaDatosOficina.CodigoInterlocutor;
                HttpContext.Current.Session["CodigoSINERGIA"] = codigoSinergia;
                //FIN PROY-140419 Autorizar Portabilidad sin PIN

                strCanal = (oListConsultaDatosOficina.TipoOficina != null && !string.IsNullOrEmpty(oListConsultaDatosOficina.TipoOficina)) ? oListConsultaDatosOficina.TipoOficina : string.Empty;

                CrearLogStatic(nroDocumento).CrearArchivolog("INICIO|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro", "", null);
                CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|CANAL: " + Funciones.CheckStr(strCanal), "", null);
                if (Funciones.CheckStr(strCanal) == Funciones.CheckStr(ConfigurationManager.AppSettings["constCodTipoOficinaCAC"]))
                {
                    var lstCorreosHistoricos = new List<BEClienteSAP>();

                    CrearLogStatic(nroDocumento).CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica", "", null);
                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica|INPUT: ", "", null);
                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica|TIPO DOCUMENTO: " + Funciones.CheckStr(tipoDocumento), "", null);
                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica|NUMERO DOCUMENTO: " + Funciones.CheckStr(nroDocumento), "", null);

                    var strEmailFact = ConsultarEmailBoletaElectronica(tipoDocumento, nroDocumento, out lstCorreosHistoricos);

                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica|OUTPUT: ", "", null);
                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica|EMAIL FACTURACION: " + Funciones.CheckStr(strEmailFact), "", null);

                    if (strEmailFact != "")
                    {
                        objResponse.DescripcionError = Funciones.CheckStr(strEmailFact);
                    }
                    else
                    {
                        objResponse.DescripcionError = "";
                    }

                    if (lstCorreosHistoricos != null && lstCorreosHistoricos.Count > 0)
                    {

                        foreach (BEClienteSAP obj in lstCorreosHistoricos)
                        {
                            strCorreosHistoricos = strCorreosHistoricos + "|" + Funciones.CheckStr(obj.EmailFact);
                        }

                    }
                    else
                    {
                        objResponse.Tipo = "";
                    }

                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica|EMAIL DEL HISTORICO: ", Funciones.CheckStr(strCorreosHistoricos), null);

                    objResponse.DescripcionError = objResponse.DescripcionError + ";" + strCorreosHistoricos;

                    CrearLogStatic(nroDocumento).CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|ConsultarEmailBoletaElectronica", "", null);

                    CrearLogStatic(nroDocumento).CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro|VALORES DE RETORNO: objResponse.DescripcionError -> ", Funciones.CheckStr(objResponse.DescripcionError), null);

                }
                CrearLogStatic(nroDocumento).CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: consultaClaro", "", null);
                //FIN|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18

                /*INICIO PROY-31948*/
                HttpContext.Current.Session["objCuotaOAC"] = null;
                HttpContext.Current.Session["objCuotaPVU"] = null;
                /*FIN PROY-31948*/

                HttpContext.Current.Session["listTelefono"] = null; /*INC-SMS_PORTA*/
                HttpContext.Current.Session["codigoValidador"] = string.Empty;
                /* [INC000002442213]VALIDACION HIDDEN - INI */
                string[] arr = objResponse.Cadena.Split(char.Parse("#"));
                string sesionVal_deudacliente = arr[19];
                HttpContext.Current.Session["sessionVal_deudacliente"] = sesionVal_deudacliente;
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_deudacliente]", sesionVal_deudacliente), null, null);
                /* [INC000002442213]VALIDACION HIDDEN - FIN */
                //PROY-FULLCLARO.V2-INI
                objResponse = consultaClienteFullClaro(objResponse, tipoDocumento, nroDocumento, strCanal, strFlagPortaBRMS);
                //PROY-FULLCLARO.V2.FIN 

                //INCICIATIVA-1012 INICIO
                objResponse.RestriccionCampanasFullClaro = "0"; //restriccion no habilitada

                #region Validando restriccion RESTRICCION FULL CLARO
                string msjConfigBeneficioFC = ReadKeySettings.key_msjConfigFullClaro;
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][key_msjConfigFullClaro]", Funciones.CheckStr(ReadKeySettings.key_msjConfigFullClaro)), null, null);
                string[] arrMsjConfigBeneficioFC = msjConfigBeneficioFC.Split('|');

                List<BEParametro> lstParametroMensajesFC = new BLGeneral().ListaParametrosGrupo(Funciones.CheckInt64(ConfigurationManager.AppSettings["key_ParanGrupoFullClaro"].ToString()));
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][MensajesFC]", Funciones.CheckStr(lstParametroMensajesFC.Count)), null, null);

                foreach (string strKeyMsjConfigBeneficioFC in arrMsjConfigBeneficioFC)
                {
                    string valorMensajeBeneficioFC = Funciones.CheckStr(lstParametroMensajesFC
                     .Where(w => w.Valor1.Equals(strKeyMsjConfigBeneficioFC)).ToList().Count > 0 ?
                     Funciones.CheckStr(lstParametroMensajesFC.Where(w => w.Valor1.Equals(strKeyMsjConfigBeneficioFC)).ToList()[0].Valor) : string.Empty);

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][objResponse.MensajeFC]", Funciones.CheckStr(objResponse.MensajeFC)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][valorMensajeBeneficioFC]", Funciones.CheckStr(valorMensajeBeneficioFC)), null, null);
                    
                    if (objResponse.MensajeFC == valorMensajeBeneficioFC)
                    {
                        objResponse.RestriccionCampanasFullClaro = "1";//restriccion habiliada
                        break;
                    }
                }
                #endregion

                #region Validando restriccion RESTRICCION FULL CLARO POPUP
                if (objResponse.RestriccionCampanasFullClaro == "0")
                {
                    string msjConfigBeneficioFCPopup = ReadKeySettings.key_msjConfigFullClaroPopup;
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][key_msjConfigFullClaroPopup]", Funciones.CheckStr(ReadKeySettings.key_msjConfigFullClaroPopup)), null, null);
                    string[] arrMsjConfigBeneficioFCPopup = msjConfigBeneficioFCPopup.Split('|');

                    List<BEParametro> lstParametroMensajesFCPopup = new BLGeneral().ListaParametrosGrupo(Funciones.CheckInt64(ConfigurationManager.AppSettings["key_ParanGrupoFullClaroPopup"].ToString()));
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][MensajesFCPopup]", Funciones.CheckStr(lstParametroMensajesFCPopup.Count)), null, null);

                    foreach (string strKeyMsjConfigBeneficioFCPopup in arrMsjConfigBeneficioFCPopup)
                    {
                        string valorMensajeBeneficioFCPopup = Funciones.CheckStr(lstParametroMensajesFCPopup
                         .Where(w => w.Valor1.Equals(strKeyMsjConfigBeneficioFCPopup)).ToList().Count > 0 ?
                         Funciones.CheckStr(lstParametroMensajesFCPopup.Where(w => w.Valor1.Equals(strKeyMsjConfigBeneficioFCPopup)).ToList()[0].Valor) : string.Empty);

                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][objResponse.MensajeFC]", Funciones.CheckStr(objResponse.MensajeFC)), null, null);
                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][strKeyMsjConfigBeneficioFCPopup]", Funciones.CheckStr(valorMensajeBeneficioFCPopup)), null, null);

                        if (objResponse.MensajeFC == valorMensajeBeneficioFCPopup)
                        {
                            objResponse.RestriccionCampanasFullClaro = "1";//restriccion habiliada
                            break;
                        }
                    }
                }
                #endregion

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIATIVA-1012][Restriccion]", Funciones.CheckStr(objResponse.RestriccionCampanasFullClaro)), null, null);
                //INCICIATIVA-1012 FIN                

                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000003443673 - consultaClaro() - objResponse.Cadena]", Funciones.CheckStr(objResponse.Cadena)), null, null);


                //IDEA-142010 INI
                List<BEParametro> objBeneficioLineasAdicionales = (List<BEParametro>)HttpContext.Current.Session["ParametrosBeneficioLineasAdicionales"];
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Mensajes Parametros Beneficio]", Funciones.CheckStr(objBeneficioLineasAdicionales.Count)), null, null);

                int validarVigenciaCampana = Funciones.CheckInt(objBeneficioLineasAdicionales.Where(w => w.Valor.Equals(Constantes.KeyCantidadCampanasVigentes)).ToList()[0].Valor1); ;
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Validacion campañas vigentes]", Funciones.CheckStr(validarVigenciaCampana)), null, null);

                if (validarVigenciaCampana > 0)
                {
                    //objListaDocumento
                    string tipoDocumentoBscs = Funciones.CheckStr(objListaDocumento.Where(w => w.ID_SISACT.Equals(tipoDocumento)).ToList()[0].ID_BSCS);
                    string desTipoDocumentoBscs = Funciones.CheckStr(objListaDocumento.Where(w => w.ID_SISACT.Equals(tipoDocumento)).ToList()[0].DESCRIPCION);
                    string mensajeRespuesta = "";
                    string codRespuesta = "";
                    bool validarCampanasActivas = new BWValidarCampana().ConsultarValidacionCampana(tipoDocumentoBscs, desTipoDocumentoBscs, nroDocumento, ref codRespuesta, ref mensajeRespuesta);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Codigo respuesta Dtp]", codRespuesta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Mensaje respuesta Dtp]", mensajeRespuesta), null, null);

                    objResponse.BeneficioAdicionalMsg = string.Empty;
                    objResponse.BeneficioEstado = string.Empty;

                    if (validarCampanasActivas)
                    {
                        objResponse.BeneficioEstado = "SI";
                    }
                    else
                    {
                        if (codRespuesta == "2")
                        {
                            objResponse.BeneficioEstado = "NO";
                        }
                        else
                        {
                            objResponse.BeneficioEstado = "-1";
                            objResponse.BeneficioAdicionalMsg = "Error con el servicio al validar la campaña de dscto.";
                        }
                    }

                    HttpContext.Current.Session["ParametrosBeneficioLineasAdicionalesDtp"] = null;
                    HttpContext.Current.Session["ParametrosBeneficioLineasAdicionalesDtp"] = objResponse.BeneficioEstado;

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Flag Portabilidad]", strFlagPortaBRMS), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Beneficio Adicional]", objResponse.BeneficioEstado), null, null);

                    if (objResponse.BeneficioEstado == "SI") objResponse.BeneficioAdicionalMsg = Funciones.CheckStr(objBeneficioLineasAdicionales.Where(w => w.Valor.Equals(Constantes.KeyMsgDtpSi)).ToList()[0].Valor1);

                    if (objResponse.BeneficioEstado == "NO") objResponse.BeneficioAdicionalMsg = (strFlagPortaBRMS == "S") ? Funciones.CheckStr(objBeneficioLineasAdicionales.Where(w => w.Valor.Equals(Constantes.KeyMsgDtpNo_PortaSi)).ToList()[0].Valor1) : Funciones.CheckStr(objBeneficioLineasAdicionales.Where(w => w.Valor.Equals(Constantes.KeyMsgDtpNo_PortaNo)).ToList()[0].Valor1);

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Estado Beneficio]", objResponse.BeneficioEstado), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Mensaje Beneficio]", objResponse.BeneficioAdicionalMsg), null, null);
                }
                else
                {
                    objResponse.BeneficioEstado = "";
                    objResponse.BeneficioAdicionalMsg = "";

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Flujo No existen Campanas vigentes]", ""), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Estado Beneficio]", objResponse.BeneficioEstado), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Mensaje Beneficio]", objResponse.BeneficioAdicionalMsg), null, null);
                }


                objResponse.Obligatorio = ObtenerSecPagadas_con_BonoPendienteEnvioBCSC(tipoDocumento, nroDocumento).Obligatorio;  //INC000004280198

                objResponse.EstadoBonoBSCSFC = ConsultarCandidatoBono(tipoDocumento, nroDocumento).EstadoBonoBSCSFC; //INC000004280198

                //PROY-140715- INI ANGEL
                _objLog.CrearArchivolog("INICIO VALIDAR CONTINGENCIA", null, null);
                string msjcontingencia = string.Empty;
                if (tipoDocumento.Equals("01") || tipoDocumento.Equals("06")) 
                {
                    msjcontingencia = ConsultaMensaje("0", "01", strOficina);
                }
                objResponse.mensaje_contingencia = msjcontingencia;
                _objLog.CrearArchivolog("FIN VALIDAR CONTINGENCIA", null, null);
                //PROY-140715- INI ANGEL
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString();
                CrearLogStatic(nroDocumento).CrearArchivolog("[ERROR][consultaClaro]", null, ex);
            }
            return objResponse;
        }

        //PROY-FULLCLARO.V2-INI
        public static BEResponseWebMethod consultaClienteFullClaro(BEResponseWebMethod objResponse, string tipoDocumento, string nroDocumento, string strCanal, string flgPorta)
        {
            HttpContext.Current.Session["clienteEnProceso"] = null;
            HttpContext.Current.Session["ListaDatosCandidatosFC"] = null;
            HttpContext.Current.Session["ListaDatosMaestraFC"] = null;

            //INICIO - PROY-140560 - FULLCLAROPOPUP
            HttpContext.Current.Session["MensajeActivoMFFC"] = null;
            //FIN - PROY-140560 - FULLCLAROPOPUP

            //INICIATIVA-805 - INICIO - Campana Descuento Cargo Fijo
            HttpContext.Current.Session["FullClaro"] = null;
            HttpContext.Current.Session["CandidatoFC"] = null;
            HttpContext.Current.Session["DatosPlan"] = null;
            HttpContext.Current.Session["planesEvaluadosFC"] = null;
            HttpContext.Current.Session["listOnHoldClienteFC"] = null;
            //INICIATIVA-805 - FIN - Campana Descuento Cargo Fijo

            //INICIO - IDEA-141897
            var tipoDocumentoONE = string.Empty;
            var strTipoDocumentoPVUDB = String.Empty;
            strTipoDocumentoPVUDB = Funciones.CheckStr(tipoDocumento);
            HttpContext.Current.Session["clienteNuevoConsultaFC"] = false;
            HttpContext.Current.Session["clienteConBeneficioNoConcretado"] = false;
            var strEstadoSesion = String.Empty;
            Int64 strIdCandidato = 0;
            //FIN - IDEA-141897

            GeneradorLog _objLog = new GeneradorLog(null, "ConsultaDatosFullClaro", null, "log_ConsultaDatosFullClaro");
            _objLog.CrearArchivolog("[FULL_CLARO][INICIO]", null, null);
            ConsultarClientesFullClaroRequest objConsultarClientesFullClaroRequest = null;
            ConsultarClientesFullClaroResponse objConsultarClientesFullClaroResponse = null;
            string codigoRespuestaServidor = string.Empty;
            string mensajeRespuestaServidor = string.Empty;
            string tipoServicioFC = string.Empty;
            bool respFlagPortab = false;
            respFlagPortab = flgPorta != "S" ? true : ReadKeySettings.key_FlagPorta == "S" ? true : false;
            List<BEDatosClienteFC> dataRespuestaServidor;
            try
            {
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][nroDocumento]", Funciones.CheckStr(nroDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][tipoDocumento]", Funciones.CheckStr(tipoDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][strCanal]", Funciones.CheckStr(strCanal)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][PARAMETRICA][OUT | key_FlagGeneralBeneficio]", ReadKeySettings.key_FlagGeneralBeneficio), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][PARAMETRICA][OUT | key_TipoDocumento]", ReadKeySettings.key_TipoDocumento), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][PARAMETRICA][OUT | key_TipoCanal]", ReadKeySettings.key_TipoCanal), null, null);

                if (ReadKeySettings.key_FlagGeneralBeneficio == "1"
                    && ReadKeySettings.key_TipoDocumento.IndexOf(tipoDocumento) > -1
                    && ReadKeySettings.key_TipoCanal.IndexOf(strCanal) > -1)
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][FlagFullClaro: Encendido]", null, null);
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][tipoDocumento: Permitido]", null, null);
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][CanalVenta: Permitido]", null, null);

                    if (respFlagPortab)
                    {

                        //INICIO - IDEA-141897
                        var strFlagCondicion = "";
                        strFlagCondicion = "C";
                        var lstFullClaro = new List<BEFullClaroBeneficio>();
                        var lstPedido = new List<BEAcuerdoDetalle>();
                        var codigo_rpta = "";
                        var mensaje_rpta = "";
                        var strTipoDocumentoBSCS = ConvierteTipoDocumento(tipoDocumento);

                        _objLog.CrearArchivolog("tipoDocumento: " + Funciones.CheckStr(strTipoDocumentoBSCS), null, null);
                        _objLog.CrearArchivolog("nroDocumento: " + Funciones.CheckStr(nroDocumento), null, null);
                        _objLog.CrearArchivolog("strFlagCondicion: " + Funciones.CheckStr(strFlagCondicion), null, null);
                        BLGeneral.consultaBeneficioFullClaro(strTipoDocumentoBSCS, nroDocumento, strFlagCondicion, out lstFullClaro, out lstPedido, ref codigo_rpta, ref mensaje_rpta);

                        _objLog.CrearArchivolog("lstPedido.count : " + Funciones.CheckStr(lstPedido.Count), null, null);//INC000004280198

                        
                        _objLog.CrearArchivolog("codigo_rpta: " + Funciones.CheckStr(codigo_rpta), null, null);
                        _objLog.CrearArchivolog("mensaje_rpta: " + Funciones.CheckStr(mensaje_rpta), null, null);

                        // INI INC000004280198
                        /*if (lstFullClaro != null)
                        {
                            if (lstFullClaro.Count > 0)
                            {
                                foreach (BEFullClaroBeneficio obj in lstFullClaro)
                                {
                                    _objLog.CrearArchivolog("obj.EstadoCandidato: " + Funciones.CheckStr(obj.EstadoCandidato), null, null);

                                    if (Funciones.CheckStr(obj.EstadoCandidato) == "1" || Funciones.CheckStr(obj.EstadoCandidato) == "2")
                                    {
                                        var strNroSECV = String.Empty;
                                        strFlagCondicion = "M";
                                        strEstadoSesion = Funciones.CheckStr(obj.EstadoCandidato);

                                        _objLog.CrearArchivolog("strFlagCondicion: " + Funciones.CheckStr(strFlagCondicion), null, null);
                                        _objLog.CrearArchivolog("strTipoDocumentoBSCS: " + Funciones.CheckStr(strTipoDocumentoBSCS), null, null);
                                        _objLog.CrearArchivolog("nroDocumento: " + Funciones.CheckStr(nroDocumento), null, null);
                                        _objLog.CrearArchivolog("strEstadoSesion: " + Funciones.CheckStr(strEstadoSesion), null, null);

                                        BLGeneral.consultaBeneficioFullClaro(strTipoDocumentoBSCS, nroDocumento, strFlagCondicion, out lstFullClaro, out lstPedido, ref codigo_rpta, ref mensaje_rpta);

                                        _objLog.CrearArchivolog("codigo_rpta: " + Funciones.CheckStr(codigo_rpta), null, null);
                                        _objLog.CrearArchivolog("mensaje_rpta: " + Funciones.CheckStr(mensaje_rpta), null, null);
                                    }
                                }
                            }
                        }*/
                        //FIN - IDEA-141897 -> // FIN INC000004280198

                        //INICIO - IDEA-141897 -> INICIO INC000004280198 INICIO -> COMENTAR CODIGO
                        /*if (!String.IsNullOrEmpty(strEstadoSesion))
                        {
                            var str = strEstadoSesion;
                            _objLog.CrearArchivolog("strFlagCondicion: " + Funciones.CheckStr(str), null, null);
                            _objLog.CrearArchivolog("strTipoDocumentoBSCS: " + Funciones.CheckStr(strTipoDocumentoBSCS), null, null);
                            _objLog.CrearArchivolog("nroDocumento: " + Funciones.CheckStr(nroDocumento), null, null);
                            _objLog.CrearArchivolog("strIdCandidato: " + Funciones.CheckStr(strIdCandidato), null, null);

                            BLGeneral.consultaBeneficioFullClaro(strTipoDocumentoBSCS, nroDocumento, str, out lstFullClaro, out lstPedido, ref codigo_rpta, ref mensaje_rpta);

                            _objLog.CrearArchivolog("codigo_rpta: " + Funciones.CheckStr(codigo_rpta), null, null);
                            _objLog.CrearArchivolog("mensaje_rpta: " + Funciones.CheckStr(mensaje_rpta), null, null);
                        }*/
                        //FIN - IDEA-141897 -> FIN INC000004280198

                        _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][PARAMETRICA][OUT | key_FlagPorta]", ReadKeySettings.key_FlagPorta), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][flagPortabilidad]", Funciones.CheckStr(respFlagPortab)), null, null);
                        tipoDocumentoONE = ConvierteTipoDocumentoONE(tipoDocumento);
                        tipoDocumento = ConvierteTipoDocumento(tipoDocumento);
                        String strTipoRUCFullClaro = ConfigurationManager.AppSettings["consTipoRUCFullClaro"].ToString();
                        tipoDocumento = tipoDocumento == "99" ? strTipoRUCFullClaro : tipoDocumento; //Escenarios con RUC que retornan tipo documento 99
                        objConsultarClientesFullClaroRequest = new ConsultarClientesFullClaroRequest();
                        BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();
                        RestConsultarClientesFullClaro objRestConsultarClientesFullClaro = new RestConsultarClientesFullClaro();
                        BLBeneficioFullClaro objBeneficioFC = new BLBeneficioFullClaro();

                        #region Body
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][tipoDocumento][ASIS]", Funciones.CheckStr(tipoDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][tipoDocumento][ONE]", Funciones.CheckStr(tipoDocumentoONE)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][nroDocumento]", Funciones.CheckStr(nroDocumento)), null, null);
                        objConsultarClientesFullClaroRequest.MessageRequest.body.tipoDocumento = tipoDocumento;
                        objConsultarClientesFullClaroRequest.MessageRequest.body.nroDocumento = nroDocumento;
                        #endregion

                        #region Auditoria
                        objBEAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                        objBEAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBEAuditoriaRequest.idTransaccion]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBEAuditoriaRequest.timestamp]", Funciones.CheckStr(objBEAuditoriaRequest.timestamp)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBEAuditoriaRequest.userId]", Funciones.CheckStr(objBEAuditoriaRequest.userId)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBEAuditoriaRequest.ipApplication]", Funciones.CheckStr(objBEAuditoriaRequest.ipApplication)), null, null);
                        #endregion

                        #region Response
                        objConsultarClientesFullClaroResponse = objBeneficioFC.ConsultarClienteFullClaro(objConsultarClientesFullClaroRequest, objBEAuditoriaRequest, tipoDocumentoONE);
                        codigoRespuestaServidor = objConsultarClientesFullClaroResponse.MessageResponse.body.codigoRespuesta;
                        mensajeRespuestaServidor = objConsultarClientesFullClaroResponse.MessageResponse.body.mensajeRespuesta;
                        dataRespuestaServidor = objConsultarClientesFullClaroResponse.MessageResponse.body.dataRespuesta;
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBodyResponse.codigoRespuestaServidor]", Funciones.CheckStr(codigoRespuestaServidor)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBodyResponse.mensajeRespuestaServidor]", Funciones.CheckStr(mensajeRespuestaServidor)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][objBodyResponse.dataRespuestaServidor]", Funciones.CheckStr(dataRespuestaServidor)), null, null);
                        objResponse.CodigoFC = codigoRespuestaServidor;
                        objResponse.objDatosClienteFC = dataRespuestaServidor;
                        #endregion


                        if (codigoRespuestaServidor == "0")
                        {
                            objResponse.MensajeFC = ReadKeySettings.key_MsjConBeneficio;
                            objResponse.ObligatoriedadFC = ReadKeySettings.key_FlagMsjConBeneficio;//obligatoriedad
                            HttpContext.Current.Session["clienteEnProceso"] = true;
                            HttpContext.Current.Session["ListaDatosCandidatosFC"] = objResponse.objDatosClienteFC;
                            _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][Cliente en proceso]", null, null);
                            HttpContext.Current.Session["FullClaro"] = 1; //INICIATIVA-805 - INICIO - Campana Descuento Cargo Fijo
                        }
                        else if (codigoRespuestaServidor == "1")
                        {
                            objResponse.MensajeFC = ReadKeySettings.key_msjConServicios;
                            objResponse.ObligatoriedadFC = ReadKeySettings.key_FlagConServicios;
                            //INICIO - PROY-140560 - FULLCLAROPOPUP
                            HttpContext.Current.Session["MensajeActivoMFFC"] = objResponse.MensajeFC;
                            //FIN - PROY-140560 - FULLCLAROPOPUP
                            HttpContext.Current.Session["clienteEnProceso"] = false;
                            HttpContext.Current.Session["ListaDatosCandidatosFC"] = objResponse.objDatosClienteFC;
                            _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][Cliente con lineas en Tabla Candidatos]", null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][MensajeFC]", Funciones.CheckStr(objResponse.MensajeFC)), null, null);

                        }
                        else if (codigoRespuestaServidor == "2")
                        {

                            _objLog.CrearArchivolog("Valida Pedidos no existe pedido: " + Funciones.CheckStr(nroDocumento), null, null);
                            if (lstPedido != null)
                            {
                                if (lstPedido.Count == 0)
                                {
                                    objResponse.MensajeFC = ReadKeySettings.key_MsjSinServicioActivos;
                                    objResponse.ObligatoriedadFC = "2";

                                    HttpContext.Current.Session["clienteEnProceso"] = false;
                                    HttpContext.Current.Session["ListaDatosCandidatosFC"] = objResponse.objDatosClienteFC;
                                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][El Cliente con no cuenta con servicio movil/fijo]", null, null);
                                }
                                else
                                {
                                    //INICIO - IDEA-141897

                                    //TIENE PLAN MAYOR A 39, VENTA PAGADA, EVALUACIÓN MOVIL PAGADA, ESTE REALIZANDO LA FIJA EN EL MOMENTO

                                    _objLog.CrearArchivolog("Valida Pedidos existe pedido: " + Funciones.CheckStr(nroDocumento), null, null);

                                    var blRespuestac = false;

                                    _objLog.CrearArchivolog("strTipoDocumentoPVUDB: " + Funciones.CheckStr(strTipoDocumentoPVUDB), null, null);
                                    _objLog.CrearArchivolog("tipoDocumento: " + Funciones.CheckStr(tipoDocumento), null, null);
                                    _objLog.CrearArchivolog("nroDocumento: " + Funciones.CheckStr(nroDocumento), null, null);
                                    blRespuestac = validarPedidosAsociados(lstPedido, tipoDocumento, nroDocumento);

                                    _objLog.CrearArchivolog("Valida Pedidos existe pedido blRespuesta: " + Funciones.CheckStr(blRespuestac), null, null);

                                    HttpContext.Current.Session["clienteEnProceso"] = false;

                                    if (blRespuestac)
                                    {
                                        _objLog.CrearArchivolog("Ingreso blRespuestac: " + Funciones.CheckStr(blRespuestac), null, null);

                                        HttpContext.Current.Session["clienteNuevoConsultaFC"] = true;
                                        objResponse.CodigoFC = "1";
                                        _objLog.CrearArchivolog("objResponse.CodigoFC: " + Funciones.CheckStr(objResponse.CodigoFC), null, null);
                                        objResponse.MensajeFC = "Cliente es un posible candidato a Full Claro, tiene un pedido de móvil pagado, ofrecer servicio FIJA";
                                        objResponse.ObligatoriedadFC = ReadKeySettings.key_FlagMsjSinServicioActivos;
                                        _objLog.CrearArchivolog("objResponse.Mensaje: " + Funciones.CheckStr(objResponse.MensajeFC), null, null);
                                        _objLog.CrearArchivolog("HttpContext.Current.Session[clienteNuevoConsultaFC]: " + Funciones.CheckStr(HttpContext.Current.Session["clienteNuevoConsultaFC"]), null, null);
                                        //objResponse.MensajeFC = "Cliente es un posible candidato a Full Claro, tiene un pedido de móvil pagado, ofrecer servicio FIJA";
                                        _objLog.CrearArchivolog("[FULL_CLARO][Es un Cliente nuevo en la Tabla de Candidatos y BSCS] ", null, null);

                                    }
                                }
                            }
                        }
                        else if (codigoRespuestaServidor == "3")
                        {
                            var blClienteNoConcretado = (bool)HttpContext.Current.Session["clienteConBeneficioNoConcretado"]; //IDEA-141897
                            tipoServicioFC = Funciones.CheckStr(dataRespuestaServidor.Select(p => p.tipoServicio).FirstOrDefault());
                            objResponse.MensajeFC = tipoServicioFC == "MOVIL" ? ReadKeySettings.key_msjServicioMovil : ReadKeySettings.key_msjServicioFijo;
                            objResponse.ObligatoriedadFC = tipoServicioFC == "MOVIL" ? ReadKeySettings.key_FlagServicioMovil : ReadKeySettings.key_FlagServicioFijo;
                            HttpContext.Current.Session["clienteEnProceso"] = false;
                            HttpContext.Current.Session["ListaDatosMaestraFC"] = objResponse.objDatosClienteFC;
                            _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][Cliente con linea en Tabla Maestra] ", null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][Tipo de Servicio]", Funciones.CheckStr(tipoServicioFC)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][MensajeFC]", Funciones.CheckStr(objResponse.MensajeFC)), null, null);

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "["+ nroDocumento + "][FULL_CLARO - Servicio Consulta Cliente Fullclaro][objResponse.ObligatoriedadFC]", Funciones.CheckStr(objResponse.ObligatoriedadFC)), null, null);//INC000004280198

                        
                        
                        }
                        else if (codigoRespuestaServidor == "7")
                        {
                            objResponse.MensajeFC = ReadKeySettings.key_MsjConBeneficioFCVentPag;
                            objResponse.ObligatoriedadFC = ReadKeySettings.key_FlagMsjConBeneficioFCVentPag;

                            HttpContext.Current.Session["clienteEnProceso"] = false;
                            HttpContext.Current.Session["ListaDatosCandidatosFC"] = objResponse.objDatosClienteFC;
                            _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][Cliente en proceso de activacion]", null, null);
                        }
                        else
                        {
                            //INICIO - IDEA-141897
                            //ES CLIENTE NUEVO
                            //TIENE PLAN MAYOR A 39, VENTA PAGADA, EVALUACIÓN MOVIL PAGADA, ESTE REALIZANDO LA FIJA EN EL MOMENTO                         
                            var blRespuesta = false;

                            _objLog.CrearArchivolog("strTipoDocumentoPVUDB: " + Funciones.CheckStr(strTipoDocumentoPVUDB), null, null);
                            _objLog.CrearArchivolog("tipoDocumento: " + Funciones.CheckStr(tipoDocumento), null, null);
                            _objLog.CrearArchivolog("nroDocumento: " + Funciones.CheckStr(nroDocumento), null, null);
                            blRespuesta = validarPedidosAsociados(lstPedido, tipoDocumento, nroDocumento);

                            _objLog.CrearArchivolog("blRespuesta: " + Funciones.CheckStr(blRespuesta), null, null);

                            HttpContext.Current.Session["clienteEnProceso"] = false;

                            if (blRespuesta)
                            {
                                HttpContext.Current.Session["clienteNuevoConsultaFC"] = true;
                                objResponse.CodigoFC = "1";
                                _objLog.CrearArchivolog("objResponse.CodigoFC: " + Funciones.CheckStr(objResponse.CodigoFC), null, null);
                                objResponse.MensajeFC = "Cliente es un posible candidato a Full Claro, tiene un pedido de móvil pagado, ofrecer servicio FIJA";
                                _objLog.CrearArchivolog("objResponse.Mensaje: " + Funciones.CheckStr(objResponse.MensajeFC), null, null);
                                _objLog.CrearArchivolog("HttpContext.Current.Session[clienteNuevoConsultaFC]: " + Funciones.CheckStr(HttpContext.Current.Session["clienteNuevoConsultaFC"]), null, null);
                                //objResponse.MensajeFC = "Cliente es un posible candidato a Full Claro, tiene un pedido de móvil pagado, ofrecer servicio FIJA";
                                _objLog.CrearArchivolog("[FULL_CLARO][Es un Cliente nuevo en la Tabla de Candidatos y BSCS] ", null, null);

                            }
                            //FIN - IDEA-141897
                            else
                            {
                                _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][Cliente no cuenta con lineas en Tabla Candidatos o Maestra] ", null, null);
                            }
                        }
                    }
                    else
                    {
                        _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][FlagPortabilidad: Apagado]", null, null);
                    }
                }
                else
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][FlagFullClaro: Apagado]", null, null);
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][tipoDocumento: No Permitido]", null, null);
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Consulta Cliente Fullclaro en BSCS][CanalVenta: No Permitido]", null, null);
                }
            }
            catch (Exception e)
            {
                objResponse.Mensaje = null;
                objResponse.CodigoFC = "-1";
                objResponse.MensajeFC = ConfigurationManager.AppSettings["consMsjErrorGeneral"];
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[PROY-FULLCLARO][ConsultaDatosFullClaro]", " ERROR[" + e.Message + "|" + e.StackTrace + "]"), null, null);
            }

            objResponse.Mensaje = null;
            _objLog.CrearArchivolog("[FULL_CLARO][FIN]", null, null);
            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod ValidarPlanesServicios(string tipoProducto, string strPlanesServicios, string tipoDocumento, string NroDocumento, string hidCadenaDetalle)
        {
            HttpContext.Current.Session["ListaBeneficioElegidoFC"] = null;
            HttpContext.Current.Session["TipoBenefElegidoFC"] = null;

            //INICIO - PROY-140560 - FULLCLARO POPUP
            string MensajeActivoMFFC = string.Empty;
            if (HttpContext.Current.Session["MensajeActivoMFFC"] != null)
            {
                MensajeActivoMFFC = (string)HttpContext.Current.Session["MensajeActivoMFFC"];
            }

            //FIN - PROY-140560 - FULLCLARO POPUP

            GeneradorLog _objLog = new GeneradorLog(null, "Valida Planes y servicios FullClaro", null, "log_ValidarPlanesServicios");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            _objLog.CrearArchivolog("[FULL_CLARO][INICIO]", null, null);

            //INICIO - IDEA-141897
            var strTipoDocumentoPVUDB = String.Empty;
            strTipoDocumentoPVUDB = Funciones.CheckStr(tipoDocumento);
            //INICIO - IDEA-141897

            try
            {
                if (ReadKeySettings.key_FlagGeneralBeneficio == "1")
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Valida Producto FullClaro][FlagFullClaro: Encendido]", null, null);
                    _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][tipoProducto]", Funciones.CheckStr(tipoProducto)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][strPlanesServicios]", Funciones.CheckStr(strPlanesServicios)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][tipoDocumento]", Funciones.CheckStr(tipoDocumento)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][NroDocumento]", Funciones.CheckStr(NroDocumento)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][hidCadenaDetalle]", Funciones.CheckStr(hidCadenaDetalle)), null, null);
                    string codigoRespuestaServidor;
                    string mensajeRespuestaServidor;
                    string strCadenaEvaluacion = Funciones.CheckStr(hidCadenaDetalle);
                    bool clienteEnProceso = false;
                    clienteEnProceso = (bool)HttpContext.Current.Session["clienteEnProceso"];
                    tipoProducto = tipoProducto == "01" ? "M" : "F";
                    tipoDocumento = ConvierteTipoDocumento(tipoDocumento);
                    HttpContext.Current.Session["ListaClienteOnHoldFC"] = null;
                    HttpContext.Current.Session["ListaNuevosProductosFC"] = null;
                    List<BEPlanDetalleVenta> objDetallePlan = ObtenerDatosdeEvaluacion(tipoProducto, strCadenaEvaluacion);
                    List<BEDatosClienteFC> listOnHoldClienteFC = null;
                    List<BEDatosClienteFC> listTempProductosFC = new List<BEDatosClienteFC>();
                    List<BEDatosClienteFC> listNuevosProductoFC = new List<BEDatosClienteFC>();
                    List<BENuevosProductosFC> planesEvaluadosFC = null;
                    ValidarProductosFCRequest objValidarProductosFCRequest = new ValidarProductosFCRequest();
                    ValidarProductosFCResponse objValidarProductosFCResponse = null;
                    BEAuditoriaRequest objBeAuditoriaRequest = new BEAuditoriaRequest();
                    ProductosFCRestRequest objProductosFCRestRequest = new ProductosFCRestRequest();
                    RestValidarProductosFC objRestValidarProductosFC = new RestValidarProductosFC();
                    BLBeneficioFullClaro objBeneficioFC = new BLBeneficioFullClaro();

                    if (clienteEnProceso)
                    {
                        objResponse.CodigoFC = "-1";
                        objResponse.MensajeFC = "El cliente tiene asignado beneficio en PVUDB";
                        _objLog.CrearArchivolog("[FULL_CLARO - Servicio Valida Producto FullClaro][Cliente tiene bono en proceso en PVUDB]", null, null);
                    }
                    else
                    {
                        #region Body
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.tipoProducto]", Funciones.CheckStr(tipoProducto)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.strPlanesServicios]", Funciones.CheckStr(strPlanesServicios)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.tipoDocumento]", Funciones.CheckStr(tipoDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.NroDocumento]", Funciones.CheckStr(NroDocumento)), null, null);
                        objValidarProductosFCRequest.MessageRequest.body = objProductosFCRestRequest;
                        objValidarProductosFCRequest.MessageRequest.body.strTipoProducto = tipoProducto;
                        objValidarProductosFCRequest.MessageRequest.body.strPlanes = strPlanesServicios;
                        objValidarProductosFCRequest.MessageRequest.body.strTipoDocumento = tipoDocumento;
                        objValidarProductosFCRequest.MessageRequest.body.strNroDocumento = NroDocumento;
                        #endregion

                        #region Auditoria
                        objBeAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBeAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                        objBeAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBeAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.idTransaccion]", Funciones.CheckStr(objBeAuditoriaRequest.idTransaccion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.timestamp]", Funciones.CheckStr(objBeAuditoriaRequest.timestamp)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.userId]", Funciones.CheckStr(objBeAuditoriaRequest.userId)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.ipApplication]", Funciones.CheckStr(objBeAuditoriaRequest.ipApplication)), null, null);
                        #endregion

                        #region Response
                        objValidarProductosFCResponse = objBeneficioFC.ValidarProductosFC(objValidarProductosFCRequest, objBeAuditoriaRequest);
                        codigoRespuestaServidor = objValidarProductosFCResponse.MessageResponse.body.codigoRespuesta;
                        mensajeRespuestaServidor = objValidarProductosFCResponse.MessageResponse.body.mensajeRespuesta;
                        listOnHoldClienteFC = objValidarProductosFCResponse.MessageResponse.body.datosOnHoldClienteFC;
                        planesEvaluadosFC = objValidarProductosFCResponse.MessageResponse.body.nuevosProductosFC;

                        HttpContext.Current.Session["planesEvaluadosFC"] = planesEvaluadosFC; //INICIATIVA-805 Campana Descuento Cargo Fijo
                        HttpContext.Current.Session["listOnHoldClienteFC"] = listOnHoldClienteFC; //INICIATIVA-805 Campana Descuento Cargo Fijo

                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyResponse.codigoRespuestaServidor]", Funciones.CheckStr(codigoRespuestaServidor)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyResponse.mensajeRespuestaServidor]", Funciones.CheckStr(mensajeRespuestaServidor)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyResponse.datosOnHoldClienteFC]", Funciones.CheckStr(listOnHoldClienteFC)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyResponse.planesEvaluadosFC]", Funciones.CheckStr(planesEvaluadosFC)), null, null);
                        objResponse.CodigoFC = codigoRespuestaServidor;
                        objResponse.MensajeFC = mensajeRespuestaServidor;
                        #endregion

                        foreach (var producto in objDetallePlan)
                        {
                            BEDatosClienteFC prodTempProductosFC = new BEDatosClienteFC();
                            prodTempProductosFC.planPvudb = producto.PLANC_CODIGO;
                            prodTempProductosFC.desTmcode = producto.PLANV_DESCRIPCION;
                            prodTempProductosFC.linea = producto.TELEFONO;
                            prodTempProductosFC.soplnOrden = Funciones.CheckStr(producto.SOPLN_ORDEN);
                            listTempProductosFC.Add(prodTempProductosFC);
                        }

                        //INICIO - IDEA-141897
                        Boolean blClienteNuevo = false;
                        var strNroSEC = String.Empty;
                        blClienteNuevo = (bool)HttpContext.Current.Session["clienteNuevoConsultaFC"];
                        _objLog.CrearArchivolog("[INICIO - Validación de Cliente Nuevo]", null, null);

                        _objLog.CrearArchivolog("[blClienteNuevo]: " + Funciones.CheckStr(blClienteNuevo), null, null);

                        if (planesEvaluadosFC != null && planesEvaluadosFC.Any())
                        {
                            var lstFullClaro = new List<BEFullClaroBeneficio>();
                            var lstPedido = new List<BEAcuerdoDetalle>();
                            var codigo_rpta = "";
                            var mensaje_rpta = "";

                            if (blClienteNuevo)
                            {
                                if (tipoProducto == "F")
                                {
                                    //ES CLIENTE NUEVO
                                    //TIENE PLAN MAYOR A 39, VENTA PAGADA, EVALUACIÓN MOVIL PAGADA, ESTE REALIZANDO LA FIJA EN EL MOMENTO
                                    BLGeneral.consultaBeneficioFullClaro(tipoDocumento, NroDocumento, "C", out lstFullClaro, out lstPedido, ref codigo_rpta, ref mensaje_rpta);

                                    if (lstPedido != null)
                                    {
                                        if (lstPedido.Count > 0)
                                        {
                                            var lstDetalleAcuerdos = new List<BEDatosClienteFC>();

                                            foreach (BEAcuerdoDetalle obj in lstPedido)
                                            {
                                                BEDatosClienteFC prodTempProductosFC = new BEDatosClienteFC();
                                                prodTempProductosFC.planPvudb = Funciones.CheckStr(obj.Plan_tarifar);
                                                prodTempProductosFC.desTmcode = Funciones.CheckStr(obj.Plan_tarifar_desc);
                                                prodTempProductosFC.linea = Funciones.CheckStr(obj.Telefono);
                                                prodTempProductosFC.soplnOrden = "0";
                                                prodTempProductosFC.tipoServicio = "MOVIL";
                                                lstDetalleAcuerdos.Add(prodTempProductosFC);
                                            }

                                            HttpContext.Current.Session["listaClienteNuevo"] = lstDetalleAcuerdos;

                                        }
                                    }

                                }
                            }

                        }
                        _objLog.CrearArchivolog("[FIN - Validación de Cliente Nuevo]", null, null);
                        //FIN - IDEA-141897

                        if (planesEvaluadosFC != null && planesEvaluadosFC.Any())
                        {
                            if (tipoProducto == "M")
                            {
                                foreach (var producto in planesEvaluadosFC)
                                {
                                    listTempProductosFC
                                        .Where(p => p.planPvudb == producto.planPvu && Funciones.CheckStr(p.tmCode) == string.Empty)
                                        .Select(p => p.tmCode = Funciones.CheckStr(producto.tmcode))
                                        .ToList();
                                    listTempProductosFC
                                        .Where(p => p.planPvudb == producto.planPvu && Funciones.CheckStr(p.tipoServicio) == string.Empty)
                                        .Select(p => p.tipoServicio = producto.tipo)
                                        .ToList();
                                }
                            }
                            else
                            {
                                foreach (var producto in planesEvaluadosFC)
                                {
                                    listTempProductosFC
                                        .Where(p => Funciones.CheckStr(p.tmCode) == string.Empty)
                                        .Select(p => p.tmCode = Funciones.CheckStr(producto.tmcode))
                                        .ToList();
                                    listTempProductosFC
                                        .Where(p => Funciones.CheckStr(p.tipoServicio) == string.Empty)
                                        .Select(p => p.tipoServicio = producto.tipo)
                                        .ToList();
                                }
                            }
                            listNuevosProductoFC = listTempProductosFC.Where(p => Funciones.CheckStr(p.tmCode) != string.Empty).ToList();
                        }
                        else
                        {
                            listNuevosProductoFC.Clear();
                        }

                        HttpContext.Current.Session["ListaClienteOnHoldFC"] = listOnHoldClienteFC;
                        HttpContext.Current.Session["ListaNuevosProductosFC"] = listNuevosProductoFC;
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][ListaClienteOnHoldFC]", Funciones.CheckStr(listOnHoldClienteFC)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][ListaNuevosProductosFC]", Funciones.CheckStr(listNuevosProductoFC)), null, null);

                        // Validar Si muestra BotonFC-INI
                        objResponse = validaMuestraBotonFC(objResponse);
                        if (objResponse.CodigoBotonFC == "0")
                        {
                            objResponse.CodigoFC = "0";
                            objResponse.MensajeFC = mensajeRespuestaServidor;
                            _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objResponse.CodigoFC]", Funciones.CheckStr(objResponse.CodigoFC)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objResponse.MensajeFC]", Funciones.CheckStr(objResponse.MensajeFC)), null, null);
                        }
                        // Validar si muestra BontonFC-FIN
                    }
                }
                else
                {
                    objResponse.CodigoFC = "1";
                    _objLog.CrearArchivolog("[FULL_CLARO - Servicio Valida Producto FullClaro][FlagFullClaro: Apagado]", null, null);
                }
            }
            catch (Exception e)
            {
                //INICIO - PROY-140560 - FULLCLARO POPUP
                if (MensajeActivoMFFC == ReadKeySettings.key_msjConServicios)
                {
                    // Validar Si muestra BotonFC-INI
                    objResponse = validaMuestraBotonFC(objResponse);
                    if (objResponse.CodigoBotonFC == "0")
                    {
                        objResponse.CodigoFC = "0";
                        objResponse.MensajeFC = "El cliente cuenta con beneficio activo FIJO y activo MOVIL";
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objResponse.CodigoFC]", Funciones.CheckStr(objResponse.CodigoFC)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objResponse.MensajeFC]", Funciones.CheckStr(objResponse.MensajeFC)), null, null);
                    }
                }
                else
                {
                    objResponse.CodigoFC = "-1";
                }
                //FIN - PROY-140560 - FULLCLARO POPUP

                objResponse.MensajeFC = ConfigurationManager.AppSettings["consMsjErrorGeneral"];
                _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[FULL_CLARO][ValidarPlanesServicios]", " ERROR[" + e.Message + "|" + e.StackTrace + "]"), null, null);
            }
            _objLog.CrearArchivolog("[FULL_CLARO][FIN]", null, null);
            return objResponse;
        }

        private static List<BEPlanDetalleVenta> ObtenerDatosdeEvaluacion(string tipoProducto, string strCadenaEvaluacion)
        {
            GeneradorLog _objLog = new GeneradorLog(null, "ObtenerDatosdeEvaluacion", null, "log_ObtenerDatosdeEvaluacion");
            _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][tipoProducto]", Funciones.CheckStr(tipoProducto)), null, null);
            _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][strCadenaEvaluacion]", Funciones.CheckStr(strCadenaEvaluacion)), null, null);
            List<BEPlanDetalleVenta> detallesEvaluacion = new List<BEPlanDetalleVenta>();
            string[] arrPlanes = strCadenaEvaluacion.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
            if (tipoProducto == "M")
            {
                foreach (string strPlanes in arrPlanes)
                {
                    string[] strPlanFila = strPlanes.Split(';');
                    BEPlanDetalleVenta objPlanDetalle = new BEPlanDetalleVenta();
                    string[] arrPlan = strPlanFila[9].Split('_');
                    objPlanDetalle.PLANC_CODIGO = arrPlan[0];
                    objPlanDetalle.PLANV_DESCRIPCION = strPlanFila[11];
                    objPlanDetalle.TELEFONO = strPlanFila[30];
                    detallesEvaluacion.Add(objPlanDetalle);
                }
            }
            else
            {
                BEPlanDetalleVenta objPlanDetalle = new BEPlanDetalleVenta();
                foreach (string strPlanes in arrPlanes)
                {
                    string[] strPlanFila = strPlanes.Split(';');
                    objPlanDetalle.SOPLN_ORDEN = 1;
                    string[] arrPlan = strPlanFila[9].Split('_');
                    objPlanDetalle.PLANC_CODIGO = arrPlan[0];
                    objPlanDetalle.PLANV_DESCRIPCION = strPlanFila[11];
                    objPlanDetalle.TELEFONO = !string.IsNullOrEmpty(strPlanFila[30]) ? strPlanFila[30] : objPlanDetalle.TELEFONO;
                }
                detallesEvaluacion.Add(objPlanDetalle);
            }
            return detallesEvaluacion;
        }

        private static BEResponseWebMethod validaMuestraBotonFC(BEResponseWebMethod objResponse)
        {
            GeneradorLog _objLog = new GeneradorLog(null, "Valida activación de boton FullClaro", null, "log_validaMuestraBotonFC");
            _objLog.CrearArchivolog("[FULL_CLARO][INICIO]", null, null);
            try
            {
                List<BEDatosClienteFC> objListaDatosCandidatosFC = null;
                List<BEDatosClienteFC> objListaDatosMaestraFC = null;
                List<BEDatosClienteFC> objDatosClientesOnHoldFC = null;
                List<BEDatosClienteFC> objNuevosProductosFC = null;
                List<BEDatosClienteFC> objTotalProductosFC = new List<BEDatosClienteFC>();
                objListaDatosCandidatosFC = (List<BEDatosClienteFC>)HttpContext.Current.Session["ListaDatosCandidatosFC"];
                objListaDatosMaestraFC = (List<BEDatosClienteFC>)HttpContext.Current.Session["ListaDatosMaestraFC"];
                objDatosClientesOnHoldFC = (List<BEDatosClienteFC>)HttpContext.Current.Session["ListaClienteOnHoldFC"];
                objNuevosProductosFC = (List<BEDatosClienteFC>)HttpContext.Current.Session["ListaNuevosProductosFC"];

                if (objListaDatosCandidatosFC != null && objListaDatosCandidatosFC.Any())
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - Valida activación de boton FullClaro][El cliente es FullClaro, se encuentra en la tabla candidatos]", null, null);
                    objTotalProductosFC.AddRange(objListaDatosCandidatosFC);
                    objResponse.CodigoBotonFC = "0";
                    objResponse.MensajeBotonFC = "El cliente es FullClaro, pendiente elección de beneficio";
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][CodigoBotonFC]", Funciones.CheckStr(objResponse.CodigoBotonFC)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][MensajeBotonFC]", Funciones.CheckStr(objResponse.MensajeBotonFC)), null, null);
                }

                else if (objListaDatosMaestraFC != null && objListaDatosMaestraFC.Any())
                {
                    objTotalProductosFC.AddRange(objListaDatosMaestraFC);
                    Int32 productoMovilMaestra = objListaDatosMaestraFC.Count(w => w.tipoServicio.ToUpper().Equals("MOVIL"));
                    Int32 productoFijaMaestra = objListaDatosMaestraFC.Count(w => w.tipoServicio.ToUpper().Equals("FIJA"));
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad de lineas moviles activas en tabla maestra del cliente:]", Funciones.CheckStr(productoMovilMaestra)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad de lineas fijas activas en tabla maestra  del cliente]", Funciones.CheckStr(productoFijaMaestra)), null, null);
                }

                if (objDatosClientesOnHoldFC != null && objDatosClientesOnHoldFC.Any())
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - Valida activación de boton FullClaro][El cliente tiene lineas onHold]", null, null);
                    objTotalProductosFC.AddRange(objDatosClientesOnHoldFC);
                    Int32 productoMovilonHold = objDatosClientesOnHoldFC.Count(w => w.tipoServicio.ToUpper().Equals("MOVIL"));
                    Int32 productoFijaonHold = objDatosClientesOnHoldFC.Count(w => w.tipoServicio.ToUpper().Equals("FIJA"));
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad de lineas moviles onHold del cliente:]", Funciones.CheckStr(productoMovilonHold)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad de lineas fijas onHold del cliente:]", Funciones.CheckStr(productoFijaonHold)), null, null);
                }

                if (objNuevosProductosFC != null && objNuevosProductosFC.Any())
                {
                    Int32 productoMovilNuevo = objNuevosProductosFC.Count(w => w.tipoServicio.ToUpper().Equals("MOVIL"));
                    Int32 productoFijaNueva = objNuevosProductosFC.Count(w => w.tipoServicio.ToUpper().Equals("FIJA"));
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad de lineas moviles en evaluacion FullClaro:]", Funciones.CheckStr(productoMovilNuevo)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad de lineas moviles en evaluacion FullClaro:]", Funciones.CheckStr(productoFijaNueva)), null, null);

                    foreach (var producto in objNuevosProductosFC)
                    {
                        BEDatosClienteFC objTemp = new BEDatosClienteFC();
                        objTemp.planPvudb = producto.planPvudb;
                        objTemp.tmCode = producto.tmCode;
                        objTemp.tipoServicio = producto.tipoServicio;
                        objTemp.linea = producto.linea;
                        objTemp.desTmcode = producto.desTmcode;
                        objTemp.soplnOrden = producto.soplnOrden;
                        objTotalProductosFC.Add(objTemp);
                    }
                }

                //INICIO - IDEA-141897
                var blClienteNuevo = false;
                List<BEDatosClienteFC> objDatosClienteNuevo = null;
                blClienteNuevo = (bool)HttpContext.Current.Session["clienteNuevoConsultaFC"];
                objDatosClienteNuevo = (List<BEDatosClienteFC>)HttpContext.Current.Session["listaClienteNuevo"];

                if (blClienteNuevo)
                {
                    if (objDatosClienteNuevo != null && objDatosClienteNuevo.Any())
                    {
                        foreach (var varios in objDatosClienteNuevo)
                        {
                            BEDatosClienteFC prodTempProductosFC = new BEDatosClienteFC();
                            prodTempProductosFC.planPvudb = Funciones.CheckStr(varios.planPvudb);
                            prodTempProductosFC.desTmcode = Funciones.CheckStr(varios.desTmcode);
                            prodTempProductosFC.linea = Funciones.CheckStr(varios.linea);
                            prodTempProductosFC.soplnOrden = Funciones.CheckStr(varios.soplnOrden);
                            prodTempProductosFC.tipoServicio = Funciones.CheckStr(varios.tipoServicio);
                            objTotalProductosFC.Add(prodTempProductosFC);
                        }
                    }
                }
                //FIN - IDEA-141897

                Int32 productoMovilGeneral = objTotalProductosFC.Count(w => w.tipoServicio.ToUpper().Equals("MOVIL"));
                Int32 productoFijaGeneral = objTotalProductosFC.Count(w => w.tipoServicio.ToUpper().Equals("FIJA"));
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad total de lineas movil FullClaro: ]", Funciones.CheckStr(productoMovilGeneral)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][Cantidad total de lineas fija FullClaro: ]", Funciones.CheckStr(productoFijaGeneral)), null, null);
                if (productoMovilGeneral > 0 && productoFijaGeneral > 0)
                {
                    objResponse.objDatosClienteFC = objTotalProductosFC;
                    objResponse.CodigoBotonFC = "0";
                    objResponse.MensajeBotonFC = "El cliente es FullClaro, se muestra boton FullClaro";
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][CodigoBotonFC]", Funciones.CheckStr(objResponse.CodigoBotonFC)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][MensajeBotonFC]", Funciones.CheckStr(objResponse.MensajeBotonFC)), null, null);
                    HttpContext.Current.Session["ListaTotalProductosFC"] = objTotalProductosFC;
                }
                else
                {
                    objResponse.CodigoBotonFC = "1";
                    objResponse.MensajeBotonFC = "El cliente es nuevo y no aplica al beneficio FullClaro, no se muestra boton FullClaro";
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][CodigoBotonFC]", Funciones.CheckStr(objResponse.CodigoBotonFC)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Valida activación de boton FullClaro][MensajeBotonFC]", Funciones.CheckStr(objResponse.MensajeBotonFC)), null, null);
                }
            }
            catch (Exception e)
            {
                objResponse.CodigoBotonFC = "-1";
                objResponse.MensajeBotonFC = ConfigurationManager.AppSettings["consMsjErrorGeneral"];
                _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[FULL_CLARO][ValidaBotonFullClaro]", " ERROR[" + e.Message + "|" + e.StackTrace + "]"), null, null);
            }
            _objLog.CrearArchivolog("[FULL_CLARO][FIN]", null, null);
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static void ObtenerListaBeneficio(string listaBeneficios)
        {
            GeneradorLog _objLog = new GeneradorLog(null, "Obtener lista de beneficio elegido", null, "log_ObtenerListaBeneficio");
            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Lista de beneficio elegido]", Funciones.CheckStr(listaBeneficios)), null, null);
            HttpContext.Current.Session["TipoBenefElegidoFC"] = null;
            List<BEDatosClienteFC> listaDatosClienteFC = new List<BEDatosClienteFC>();
            string[] arrPlanxProducto = listaBeneficios.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

            for (var i = 0; i < arrPlanxProducto.Length; i++)
            {

                string[] arrDetPlanxProducto = arrPlanxProducto[i].Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                BEDatosClienteFC datosClienteFC = new BEDatosClienteFC();
                for (int j = 0; j < arrDetPlanxProducto.Length; j++)
                {
                    if (arrDetPlanxProducto[j] == "null" || arrDetPlanxProducto[j] == "-") { arrDetPlanxProducto[j] = null; }
                }
                datosClienteFC.elegido = true;
                datosClienteFC.coId = Funciones.CheckStr(arrDetPlanxProducto[1]);
                datosClienteFC.linea = Funciones.CheckStr(arrDetPlanxProducto[2]);
                datosClienteFC.tipoServicio = Funciones.CheckStr(arrDetPlanxProducto[3]);
                datosClienteFC.planPvudb = Funciones.CheckStr(arrDetPlanxProducto[4]);
                datosClienteFC.tmCode = Funciones.CheckStr(arrDetPlanxProducto[5]);
                datosClienteFC.desTmcode = Funciones.CheckStr(arrDetPlanxProducto[6]);
                datosClienteFC.customerId = Funciones.CheckStr(arrDetPlanxProducto[7]);
                datosClienteFC.soplnOrden = Funciones.CheckStr(arrDetPlanxProducto[8]);
                listaDatosClienteFC.Add(datosClienteFC);
            }
            HttpContext.Current.Session["TipoBenefElegidoFC"] = Funciones.CheckStr(listaDatosClienteFC.Select(p => p.tipoServicio).FirstOrDefault());
            HttpContext.Current.Session["ListaBeneficioElegidoFC"] = listaDatosClienteFC;
        }

        public static string ConvierteTipoDocumento(string tipoDocumento)
        {
            List<BETipoDocumento> objListaDocumento = (new BLGeneral()).ListarTipoDocumento();
            BETipoDocumento objDocumento = new BETipoDocumento();
            foreach (BETipoDocumento obj in objListaDocumento)
            {
                if (obj.ID_SISACT == tipoDocumento)
                {
                    objDocumento = obj;
                    break;
                }
            }
            return Funciones.CheckStr(objDocumento.ID_BSCS);
        }

        public static string ConvierteTipoDocumentoONE(string tipoDocumento)
        {
            List<BETipoDocumento> objListaDocumento = (new BLGeneral()).ListarTipoDocumento();
            BETipoDocumento objDocumento = new BETipoDocumento();
            foreach (BETipoDocumento obj in objListaDocumento)
            {
                if (obj.ID_SISACT == tipoDocumento)
                {
                    objDocumento = obj;
                    break;
                }
            }
            return Funciones.CheckStr(objDocumento.ID_BSCS_IX);
        }

        //PROY-FULLCLARO.V2.FIN 

        private static bool ConsultarClienteClarify(string strTipoDoc, string strNroDoc, ref BEDatoPersonaClarify objEntity)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, strNroDoc, null, "WEB");

            bool bolExise = false;
            BWConsultaClienteUnificado objBWConsultaClienteUnificado = null;
            try
            {
                _objLog.CrearArchivolog("[Inicio][Metodo-ConsultarClienteClarify]", null, null);

                BEItemMensaje objMensaje = new BEItemMensaje(false);

                int intTimeOutWS = 0;
                if (HttpContext.Current.Session["Usuario"] != null)
                {
                    BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                    intTimeOutWS = Funciones.CheckInt(objUsuario.TimeOutServicio);
                }
                else
                {
                    intTimeOutWS = Funciones.CheckInt(ConfigurationManager.AppSettings["TimeOut_ConsultaClienteUnificadoWS"]);
                }

                _objLog.CrearArchivolog("[intTimeOutWS]=>", Funciones.CheckStr(intTimeOutWS), null);
                objBWConsultaClienteUnificado = new BWConsultaClienteUnificado(intTimeOutWS);

                BEItemGenerico objAudit = new BEItemGenerico();
                objAudit.Codigo = strNroDoc + "_" + DateTime.Now.ToString("yyyyMMddhhmmss");
                objAudit.Codigo2 = CurrentUsers;
                objAudit.Descripcion = Funciones.CheckStr(ConfigurationManager.AppSettings["constNombreAplicacion"]);
                objAudit.Descripcion2 = CurrentTerminal;

                _objLog.CrearArchivolog("[objAudit.Codigo]=>" + Funciones.CheckStr(objAudit.Codigo), null, null);
                _objLog.CrearArchivolog("[objAudit.Codigo2]=>" + Funciones.CheckStr(intTimeOutWS), null, null);
                _objLog.CrearArchivolog("[objAudit.Descripcion]=>" + Funciones.CheckStr(objAudit.Descripcion), null, null);
                _objLog.CrearArchivolog("[objAudit.Descripcion2]=>" + Funciones.CheckStr(objAudit.Descripcion2), null, null);
                _objLog.CrearArchivolog("[Inicio][ConsultarDatoCliente]", null, null);

                BEDatoPersonaClarify obj = objBWConsultaClienteUnificado.ConsultarDatoCliente(strTipoDoc, strNroDoc, objAudit, ref objMensaje);
                _objLog.CrearArchivolog("[Fin][ConsultarDatoCliente]", null, null);
                _objLog.CrearArchivolog("[objMensaje.codigo]=>" + Funciones.CheckStr(objMensaje.codigo), null, null);
                _objLog.CrearArchivolog("[objMensaje.descripcion]=>" + Funciones.CheckStr(objMensaje.descripcion), null, null);
                _objLog.CrearArchivolog("[objMensaje.mensajeCliente]=>" + Funciones.CheckStr(objMensaje.mensajeCliente), null, null);
                _objLog.CrearArchivolog("[objMensaje.mensajeSistema]=>" + Funciones.CheckStr(objMensaje.mensajeSistema), null, null);

                objEntity = obj;

                if (objMensaje.codigo != "0")
                {
                    bolExise = false;
                }
                else
                {
                    bolExise = true;
                }
            }
            catch (Exception)
            {
                bolExise = false;
            }
            finally
            {

            }

            _objLog.CrearArchivolog("[Fin][Metodo-ConsultarClienteClarify]", null, null);

            return bolExise;
        }

        public static BEResponseWebMethod consultaDatosCliente(string tipoDocumento, string nroDocumento, string strOficina, int intComportamientoPago)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");// CrearLogStatic(nroDocumento);
            //PROY-24740 
            StringBuilder sbDatosCliente = new StringBuilder();
            try
            {
                //PROY-140230-MAS-INI
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][INI]", ""), null, null);
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][tipoDocumento]", tipoDocumento), null, null);
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][nroDocumento]", nroDocumento), null, null);
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][FIN]", ""), null, null);

                ObtenerSegmentoClienteBRMS(tipoDocumento, nroDocumento);
                //PROY-140230-MAS-FIN
                _objLog.CrearArchivolog("[Inicio][consultaDatosCliente]", null, null);

                // Fecha y Hora Consulta
                string fechaHoraConsulta = (new BLEvaluacion()).ObtenerFechaHoraBD(nroDocumento);

                //PROY-29121
                BEUsuarioSession ojbUsuario = new BEUsuarioSession();
                ojbUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];

              
                             
                //PROY-32439 MAS INI
                ojbUsuario.OficinaVenta = strOficina;


                _objLog.CrearArchivolog(string.Format("{0}{1}", "[INC000003848031][CurrentTerminal]", Funciones.CheckStr(CurrentTerminal)), null, null); //INC000003848031
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[INC000003848031][intComportamientoPago]", Funciones.CheckStr(intComportamientoPago)), null, null); //INC000003848031
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[INC000003848031][ Comun.AppSettings.consAntiguedadDeuda]", Funciones.CheckStr(Comun.AppSettings.consAntiguedadDeuda)), null, null); //INC000003848031
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[INC000003848031][Comun.AppSettings.consFlagFlexibilidad]", Funciones.CheckStr(Comun.AppSettings.consFlagFlexibilidad)), null, null); //INC000003848031

               
                               
                //PROY-32439 MAS FIN
                BEClienteCuenta objCliente = (new BLDatosCliente()).ConsultarDatosCliente(CurrentTerminal, CurrentUsers, tipoDocumento, nroDocumento, intComportamientoPago, Comun.AppSettings.consAntiguedadDeuda, Comun.AppSettings.consFlagFlexibilidad, ojbUsuario, true);//PROY-29121// PROY-26963 - GPRD - PROMFACT //PROY-32439
                //PROY-32439 MAS INI

                #region [PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] | [Validacion Cliente Claro]
                _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 Venta en cuotas accesorios][objCliente.fechaActivacion]", Funciones.CheckStr(objCliente.fechaActivacion)), null, null);
                objResponse.isClienteClaro = ((Funciones.CheckInt((DateTime.Now - objCliente.fechaActivacion).TotalHours) > 0) && objCliente.fechaActivacion != new DateTime(1, 1, 1)) ? "1" : "0";
                _objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140743 Venta en cuotas accesorios][objCliente.isClienteClaro]", Funciones.CheckStr(objResponse.isClienteClaro)), null, null);
                #endregion

                if (objCliente.errorBrms)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = objCliente.mensajeDeudaBloqueo;
                    return objResponse;
                }
                //PROY-32439 MAS FIN
                //INI PROY-25906-CNH

                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Limpia la Session[objClienteClarify] ", ""), null, null);
                if (HttpContext.Current.Session["objClienteClarify" + nroDocumento] != null)
                    HttpContext.Current.Session.Remove("objClienteClarify" + nroDocumento);

                _objLog.CrearArchivolog("[Inicio][BEDatoPersonaClarify]", null, null);
                BEDatoPersonaClarify entityCliente = new BEDatoPersonaClarify();

                _objLog.CrearArchivolog("[tipoDocumento]=>" + tipoDocumento, null, null);
                _objLog.CrearArchivolog("[Ini][obtener_tipo_doc_clarify]", null, null);

                string strTipoDoc = obtener_tipo_doc_clarify(tipoDocumento);
                _objLog.CrearArchivolog("[strTipoDoc]=>" + strTipoDoc, null, null);
                _objLog.CrearArchivolog("[Fin][obtener_tipo_doc_clarify]", null, null);
                _objLog.CrearArchivolog("[Ini][ConsultarClienteClarify]", null, null);

                bool bolExisteCliente = ConsultarClienteClarify(strTipoDoc, nroDocumento, ref entityCliente);
                _objLog.CrearArchivolog("[Ini][ConsultarClienteClarify]", null, null);
                _objLog.CrearArchivolog("[bolExisteCliente]=>" + Funciones.CheckStr(bolExisteCliente), null, null);

                if (bolExisteCliente == true)
                {

                    _objLog.CrearArchivolog("[objCliente.apellidoPaterno]=>" + Funciones.CheckStr(objCliente.apellidoPaterno), null, null);
                    _objLog.CrearArchivolog("[objCliente.apellidoMaterno]=>" + Funciones.CheckStr(objCliente.apellidoMaterno), null, null);
                    _objLog.CrearArchivolog("[objCliente.nombres]=>" + Funciones.CheckStr(objCliente.nombres), null, null);
                    _objLog.CrearArchivolog("[objCliente.razonSocial]=>" + Funciones.CheckStr(objCliente.razonSocial), null, null);
                    _objLog.CrearArchivolog("[entityCliente.ApePaterno]=>" + Funciones.CheckStr(entityCliente.ApePaterno), null, null);
                    _objLog.CrearArchivolog("[entityCliente.ApeMaterno]=>" + Funciones.CheckStr(entityCliente.ApeMaterno), null, null);
                    _objLog.CrearArchivolog("[entityCliente.Nombres]=>" + Funciones.CheckStr(entityCliente.Nombres), null, null);
                    _objLog.CrearArchivolog("[entityCliente.RazonSocial]=>" + Funciones.CheckStr(entityCliente.RazonSocial), null, null);
                    _objLog.CrearArchivolog("[entityCliente.TipoValidacion]=>" + Funciones.CheckStr(entityCliente.TipoValidacion), null, null);

                    objCliente.apellidoPaterno = entityCliente.ApePaterno;
                    objCliente.apellidoMaterno = entityCliente.ApeMaterno;
                    objCliente.nombres = entityCliente.Nombres;
                    objCliente.razonSocial = entityCliente.RazonSocial;

                    HttpContext.Current.Session["objClienteClarify" + nroDocumento] = entityCliente;
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Encontro data en Clarify", ""), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Llena la Session[objClienteClarify]", ""), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Session[objClienteClarify] - objCliente.razonSocial: ", Funciones.CheckStr(objCliente.razonSocial)), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Session[objClienteClarify] - objCliente.nombres: ", Funciones.CheckStr(objCliente.nombres)), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Session[objClienteClarify] - objCliente.apellidoPaterno: ", Funciones.CheckStr(objCliente.apellidoPaterno)), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Session[objClienteClarify] - objCliente.apellidoMaterno: ", Funciones.CheckStr(objCliente.apellidoMaterno)), null, null);
                }
                _objLog.CrearArchivolog("[Fin][BEDatoPersonaClarify]", null, null);
                //FIN PROY-25906-CNH

                //INI: INICIATIVA-219
                if (objCliente.clienteCBIO)
                {
                    BLDatosCBIO objBLCbio = new BLDatosCBIO();
                    Claro.SISACT.Entity.claro_inte_cuparticipante.consultarParticipante.Participante objParticipante = new Claro.SISACT.Entity.claro_inte_cuparticipante.consultarParticipante.Participante();
                    string strIdentificador = "Detalle de Linea - Datos del Cliente";
                    objParticipante = objBLCbio.ObtenerDatosParticipanteMostrar(tipoDocumento, nroDocumento, strIdentificador);
                    objCliente.nombres = objParticipante.nombre;
                    objCliente.apellidoPaterno = objParticipante.apellidoPaterno;
                    objCliente.apellidoMaterno = objParticipante.apellidoMaterno;
                    objCliente.apellidos = string.Format("{0} {1}", objCliente.apellidoPaterno, objCliente.apellidoMaterno);
                    objCliente.razonSocial = objParticipante.razonSocial;
                    _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.clienteCBIO = TRUE le asigna lo siguinte", ""), null);
                    _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[INC000003443673 - consultaDatosCliente() - DataPowerCBIO - objCliente.nombres]: ", Funciones.CheckStr(objCliente.nombres)), null);
                    _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[INC000003443673 - consultaDatosCliente() - DataPowerCBIO - objCliente.apellidoPaterno]: ", Funciones.CheckStr(objCliente.apellidoPaterno)), null);
                    _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[INC000003443673 - consultaDatosCliente() - DataPowerCBIO - objCliente.apellidoMaterno]: ", Funciones.CheckStr(objCliente.apellidoMaterno)), null);
                }
                //FIN: INICIATIVA-219

                //gaa20170
                //if (objCliente.isBlackList && !objCliente.isWhiteList)
                if (objCliente.isBlackList && !objCliente.isWhiteList && intComportamientoPago != intCPValorEspecial)
                {//fin gaa20170511
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjBlackListCreditos"].ToString();
                    return objResponse;
                }

                objCliente.oficina = strOficina;

                // Consulta SEC Pendiente
                int intSECPendiente = (new BLSolicitud()).ObtenerNroSECPendiente(tipoDocumento, nroDocumento);

                sbDatosCliente.Append(objCliente.mensajeDeudaBloqueo);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.tipoCliente);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.soloEvaluarFijo);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.apellidoPaterno);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.apellidoMaterno);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.nombres);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.razonSocial);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(((intSECPendiente > 0) ? "S" : "N"));

                string strPlanesActivos = string.Empty;
                string strPlanesActivosVozDatos = string.Empty;
                if (objCliente.oPlanesActivosxBilletera != null)
                {
                    foreach (BEPlanBilletera obj in objCliente.oPlanesActivosxBilletera)
                    {
                        if (obj.tipoFacturador == BEPlanBilletera.TIPO_FACTURADOR.BSCS)
                        {
                            strPlanesActivos = string.Format("{0}|{1};{2}", strPlanesActivos, obj.plan, obj.nroPlanes);
                            strPlanesActivosVozDatos = string.Format("{0}|{1};{2};{3}", strPlanesActivosVozDatos, obj.plan, (int)obj.tipoPlan, obj.nroPlanes);
                        }
                    }
                }

                double dblCFDatos = 0, dblCFVoz = 0;
                int intNroPlanesDatos = 0, intNroPlanesVoz = 0;
                if (objCliente.oPlanesActivosCorporativo != null)
                {
                    foreach (BEPlanBilletera obj in objCliente.oPlanesActivosCorporativo)
                    {
                        if (obj.tipoPlan == BEPlanBilletera.TIPO_PLAN.MOVIL)
                        {
                            dblCFVoz += obj.CF;
                            intNroPlanesVoz += 1;
                        }
                        if (obj.tipoPlan == BEPlanBilletera.TIPO_PLAN.DATOS)
                        {
                            dblCFDatos += obj.CF;
                            intNroPlanesDatos += 1;
                        }
                    }
                }
                string strPlanesCorporativo = string.Format("{0};{1}|{2};{3}", intNroPlanesVoz, dblCFVoz, intNroPlanesDatos, dblCFDatos);

                sbDatosCliente.Append("#");
                sbDatosCliente.Append(strPlanesActivos);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(strPlanesActivosVozDatos);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(strPlanesCorporativo);

                sbDatosCliente.Append("#");
                sbDatosCliente.Append(string.Empty);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(string.Empty); //Funciones.CheckStr(dsOficinaSap.Tables[0].Rows[0]["VTWEG"]);                
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(string.Empty);// Funciones.CheckStr(dsOficinaSap.Tables[0].Rows[0]["VKORG"]);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(string.Empty); //Funciones.CheckStr(dsOficinaSap.Tables[0].Rows[0]["WERKS"]);

                // Consulta Líneas Prepago
                bool blnConsultaPrepago = (objCliente.lineaPrepago != null && objCliente.lineaPrepago.Rows.Count > 0);
                sbDatosCliente.Append("#");
                sbDatosCliente.Append((blnConsultaPrepago ? "S" : "N"));

                // Consulta BlackList Cuotas
                sbDatosCliente.Append("#");
                sbDatosCliente.Append((new BLConsumer()).ConsultaBlackListCuotaPdv(strOficina));

                // Fecha y Hora Consulta
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(fechaHoraConsulta);

                //DIL::INI::20170910 
                BWValidarLinea objValidaLinea = new BWValidarLinea();
                BEValidarLineaAuditoria objAudit = new BEValidarLineaAuditoria();
                BEValidarLinea objClienteLineas = new BEValidarLinea();
                Boolean blnContarLineas;
                Int32 intRespuestaCodigo;
                String strRespuestaMensaje;

                _objLog.CrearArchivolog("[Inicio][Validacion de cantida de lineas]", null, null);
                _objLog.CrearArchivolog("[Tipo Documento] =>" + tipoDocumento, null, null);

                if (AppSettings.Key_CLCodDocPermitido.IndexOf(tipoDocumento) > -1)//[PROY-140600]
                {
                    objAudit.strUsuarioAplicacion = CurrentUsers;
                    objAudit.strNombreAplicacion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                    objAudit.strIpAplicacion = CurrentTerminal;
                    objAudit.strIdTransaccion = string.Format("{0}{1}", nroDocumento, DateTime.Now.ToString("yyyyMMddss"));

                    _objLog.CrearArchivolog("[Inicio][contarLineas]", null, null);
                    _objLog.CrearArchivolog("[INP][Documento] => " + nroDocumento, null, null);
                    blnContarLineas = objValidaLinea.contarLineas(objAudit, nroDocumento, tipoDocumento, out intRespuestaCodigo, out strRespuestaMensaje, out objClienteLineas);//[PROY-140600]
                    _objLog.CrearArchivolog("[OUT][Cod Respuesta] => " + intRespuestaCodigo, null, null);
                    _objLog.CrearArchivolog("[OUT][Msg Respuesta] => " + strRespuestaMensaje, null, null);
                    _objLog.CrearArchivolog("[OUT][Cantidad Lineas] => " + objClienteLineas.intCantidadLineasActivas, null, null);
                    objClienteLineas.intCantidadLineasActivas = objClienteLineas.intCantidadLineasActivas + 1;
                    _objLog.CrearArchivolog("[OUT][Cantidad Lineas] => " + objClienteLineas.intCantidadLineasActivas, null, null);

                    if (blnContarLineas)
                    {
                        sbDatosCliente.Append("#");
                        sbDatosCliente.Append(Funciones.CheckStr(objClienteLineas.intCantidadLineasActivas));
                        _objLog.CrearArchivolog("[FIN][contarLineas]", null, null);
                    }
                    else
                    {
                        _objLog.CrearArchivolog("[ERROR][Cantidad Lineas] => " + strRespuestaMensaje, null, null);
                        _objLog.CrearArchivolog("[FIN][contarLineas]", null, null);
                        objResponse.Error = true;
                        objResponse.Mensaje = "Error al validar la cantidad de lineas del cliente.";
                        return objResponse;
                    }
                }
                else
                {
                    sbDatosCliente.Append("#");
                    sbDatosCliente.Append("0");
                }
                //DIL::FIN::20170910 

                //PROY-29121-INI
                // Consulta Deuda
                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.deudaCliente);

                string strTipoDocCliente = string.Empty;
                if (objCliente.tipoDoc.Substring(0, 1) == "0")
                {
                    strTipoDocCliente = objCliente.tipoDoc.Substring(1);
                }
                else
                {
                    strTipoDocCliente = objCliente.tipoDoc;
                }
                string strCadenaCliente = strTipoDocCliente + ";" + objCliente.nroDoc;

                if (objCliente.deudaCliente == "SI")
                {
                    strCadenaCliente = strCadenaCliente + ";" + ConfigurationManager.AppSettings["constMensajeEstatusRRLLNOOK"];
                    sbDatosCliente.Append("#");
                    sbDatosCliente.Append(strCadenaCliente);
                }
                else if (objCliente.deudaCliente == "NO")
                {
                    strCadenaCliente = strCadenaCliente + ";" + ConfigurationManager.AppSettings["constMensajeEstatusRRLLOK"];
                    sbDatosCliente.Append("#");
                    sbDatosCliente.Append(strCadenaCliente);
                }

                string strMensajeCliente = string.Empty;
                if (objCliente.deudaVencida != 0 && objCliente.nroDiasDeuda != 0)
                {
                    strMensajeCliente = ConfigurationManager.AppSettings["constMensajeDeudaRRLL1"] + nroDocumento + ConfigurationManager.AppSettings["constMensajeDeudaRRLL2"] + objCliente.deudaVencida + ConfigurationManager.AppSettings["constMensajeDeudaRRLL3"] + objCliente.nroDiasDeuda;
                }
                else
                {
                    strMensajeCliente = string.Empty;
                }

                sbDatosCliente.Append("#");
                sbDatosCliente.Append(strMensajeCliente);

                sbDatosCliente.Append("#");
                sbDatosCliente.Append(objCliente.cumpleReglaA);

                //PROY-140579 RU10 NN INICIO
                bool Val_isWhiteList = objCliente.isWhiteList;
                string SessionIsWhiteList = string.Empty;
                _objLog.CrearArchivolog("[Datos Cliente PROY-140579-isWhiteList]", Val_isWhiteList, null);
                sbDatosCliente.Append("#");
                if (objCliente.isWhiteList == true)
                {
                    //SessionIsWhiteList
                    SessionIsWhiteList = "SI";
                    sbDatosCliente.Append("SI");
                }
                else
                {
                    SessionIsWhiteList = "NO";
                    sbDatosCliente.Append("NO");
                }
                HttpContext.Current.Session["SessionIsWhiteList"] = Funciones.CheckStr(SessionIsWhiteList);
                //PROY-140579 RU10 NN FIN

                //PROY-29121-FIN   
                objResponse.Cadena = sbDatosCliente.ToString();

                _objLog.CrearArchivolog("[Datos Cliente]", objCliente, null);
                _objLog.CrearArchivolog("[Planes Activos]", objCliente.oPlanesActivosxBilletera, null);
                _objLog.CrearArchivolog("[Monto Facturado]", objCliente.oMontoFacturadoxBilletera, null);
                _objLog.CrearArchivolog("[Monto No Facturado]", objCliente.oMontoNoFacturadoxBilletera, null);

                //INC000003443673 - INI
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Cambio del valor de Apellido Paterno/Materno a punto INI", ""), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno: ", Funciones.CheckStr(ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.nombres: ", Funciones.CheckStr(objCliente.nombres)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.apellidoPaterno: ", Funciones.CheckStr(objCliente.apellidoPaterno)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.apellidoMaterno: ", Funciones.CheckStr(objCliente.apellidoMaterno)), null, null);

                if (objCliente.apellidoPaterno != string.Empty || objCliente.apellidoMaterno != string.Empty)
                {
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Comienza la validacion de Apellido Paterno", ""), null, null);
                    if (Funciones.CheckStr(ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno).IndexOf(Funciones.CheckStr(objCliente.apellidoPaterno)) > -1)
                    {
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Cliente sin apellido paterno", ""), null, null);
                        objCliente.apellidoPaterno = ".";
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.apellidoPaterno: ", Funciones.CheckStr(objCliente.apellidoPaterno)), null, null);
                    }
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Comienza la validacion de Apellido Materno", ""), null, null);
                    if (Funciones.CheckStr(ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno).IndexOf(Funciones.CheckStr(objCliente.apellidoMaterno)) > -1)
                    {
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Cliente sin apellido materno", ""), null, null);
                        objCliente.apellidoMaterno = ".";
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.apellidoMaterno: ", Funciones.CheckStr(objCliente.apellidoMaterno)), null, null);
                    }
                    objCliente.apellidos = Funciones.CheckStr(objCliente.apellidoPaterno + " " + objCliente.apellidoMaterno);
                    _objLog.CrearArchivolog(null, string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - objCliente.apellidos: ", Funciones.CheckStr(objCliente.apellidos)), null);
                }
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Cambio del valor de Apellido Paterno/Materno a punto FIN", ""), null, null);
                //INC000003443673 - FIN
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosCliente() - Se llena la Session[objCliente]", ""), null, null);
                HttpContext.Current.Session["objCliente" + nroDocumento] = objCliente;

                // Consulta Filtro Item x Pdv
                if (HttpContext.Current.Session["FiltroPlanxPdv_" + strOficina] == null)
                {
                    HttpContext.Current.Session["FiltroPlanxPdv_" + strOficina] = new BLGeneral_II().ListarItemxPDV(1, strOficina);
                }

                #region [PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] | [Obtener Lineas Moviles]
                
                objResponse.flagPermitirVV = "0";
                if (Funciones.CheckStr(ReadKeySettings.Key_FlagGeneralVtaCuotas).Equals("1"))
                {
                    _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [valCuotasAccPend] ", "[INICIO]"), null);
                    if (valCuotasAccPendXLinea(string.Empty, tipoDocumento, nroDocumento, CurrentUsers, string.Empty, CurrentTerminal))
                    {
                        StringBuilder sbLineas = new StringBuilder();
                        DataTable dtDetalleBSCS;

                        if (objCliente.lineaBSCS != null)
                        {
                            dtDetalleBSCS = objCliente.lineaBSCS;
                            foreach (DataRow dr in dtDetalleBSCS.Rows)
                            {
                                var customerID = Funciones.CheckStr(dr["CUSTOMER_ID"]);
                                var estado = Funciones.CheckStr(dr["ESTADO"]).ToUpper();
                                var estadoFijo = Funciones.CheckStr(ConfigurationManager.AppSettings["varEstadoAct"]).ToUpper();
                                var plan = Funciones.CheckStr(dr["PLAN"]);
                                var numeroTlf = Funciones.CheckStr(dr["NUMERO"]);
                                var nro_bloq = Funciones.CheckInt(dr["NRO_BLOQ"]);
                                var nro_susp = Funciones.CheckInt(dr["NRO_SUSP"]);
                                var cf_contrato = Funciones.CheckDbl(dr["CF_CONTRATO"]);

                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ CUSTOMER_ID ] ", customerID), null);
                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ NUMERO ] ", numeroTlf), null);
                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ ESTADO ] ", estado), null);
                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ PLAN ] ", plan), null);
                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ NRO_BLOQ ] ", nro_bloq), null);
                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ NRO_SUSP ] ", nro_susp), null);
                                _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ CF_CONTRATO ] ", cf_contrato), null);

                                if (estado.Equals(estadoFijo) && WebComunes.isNroTelefono(numeroTlf) && nro_bloq == 0 && nro_susp == 0 && cf_contrato > 0 && plan != "")
                                {
                                    _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [valCuotasAccPendXLinea] ", "[INICIO]"), null);
                                    if (valCuotasAccPendXLinea(numeroTlf, tipoDocumento, nroDocumento, CurrentUsers, string.Empty, CurrentTerminal))
                                    {
                                        objResponse.flagPermitirVV = "1";
                                        sbLineas.Append("|");
                                        sbLineas.Append(customerID);
                                        sbLineas.Append(";");
                                        sbLineas.Append(numeroTlf);
                                    }
                                }
                            }
                        }
                        _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ objLineasAsociadas ] ", Funciones.CheckStr(sbLineas)), null);
                        HttpContext.Current.Session["objLineasAsociadas"] = Funciones.CheckStr(sbLineas);

                        #region [Obtener datos BSCS para FIJA]
                        string strMsjRpta = string.Empty;
                        string strCodRpta = string.Empty;
                        string strNroDoc = string.Empty;
                        string strDesDoc = string.Empty;
                        StringBuilder sbCuentas = new StringBuilder();
                        try
                        {
                            List<BEItemGenerico> lstDatosCuenta = new List<BEItemGenerico>();
                            List<BEItemGenerico> lstDatosServicios = new List<BEItemGenerico>();

                            strDesDoc = Funciones.CheckStr(BLDatosCliente.ObtenerTipoDocumento(tipoDocumento, nroDocumento));
                            strNroDoc = Funciones.CheckStr(nroDocumento);

                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][INICIO] [OBTENER CONSULTA CLIENTE BSCS]", ""), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][INPUT | strDesDoc]", Funciones.CheckStr(strDesDoc)), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][INPUT | strDesDoc]", Funciones.CheckStr(strNroDoc)), null);

                            lstDatosCuenta = BLEvaluacion.ConsultaClienteBSCS(strDesDoc, strNroDoc, ref strCodRpta, ref strMsjRpta);

                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][OUTPUT | strCodRpta]", Funciones.CheckStr(strCodRpta)), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][OUTPUT | strMsjRpta]", Funciones.CheckStr(strMsjRpta)), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][OUTPUT | lstDatosCuenta]", Funciones.CheckStr(lstDatosCuenta.Count())), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][FIN] [OBTENER CONSULTA CLIENTE BSCS]", ""), null);

                            foreach (BEItemGenerico item in lstDatosCuenta)
                            {
                                if (valCuotasAccPendXLinea(string.Empty, tipoDocumento, nroDocumento, CurrentUsers, item.Codigo2, CurrentTerminal))
                                {
                                    objResponse.flagPermitirVV = "1";
                                    sbCuentas.Append("|");
                                    sbCuentas.Append(string.Format("{0}*{1}", Funciones.CheckStr(item.Codigo), Funciones.CheckStr(item.Codigo3))); // CU_ID
                                    sbCuentas.Append(";");
                                    sbCuentas.Append(Funciones.CheckStr(string.Format("{0}({1})", item.Codigo2, item.Descripcion))); // CO_ID + PRODUCTO
                                    _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][OUTPUT | sbCuentas]", Funciones.CheckStr(sbCuentas)), null);
                                }   
                            }
                            HttpContext.Current.Session["objCuentasAsociadas"] = Funciones.CheckStr(sbCuentas);
                        }
                        catch (Exception ex)
                        {
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][INI] [ERROR]", ""), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][CATCH | StackTrace]", Funciones.CheckStr(ex.StackTrace)), null);
                            _objLog.CrearArchivolog(null, string.Format("{0}-->{1}", "[PROY-140743][Venta en cuotas][ConsultaClienteBSCS][CATCH | Message]", Funciones.CheckStr(ex.Message)), null);
                            HttpContext.Current.Session["objCuentasAsociadas"] = string.Empty;
                        }
                        #endregion
                        
                    }
                        _objLog.CrearArchivolog(null, string.Format("{0} ==> {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas] - [ flagPermitirVV ] ", Funciones.CheckStr(objResponse.flagPermitirVV)), null);
                }
                #endregion
            
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjConsultarDatosCliente"].ToString();
                _objLog.CrearArchivolog("[ERROR][consultaDatosCliente]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][consultaDatosCliente]", null, null);
            }

            return objResponse;
            //PROY-24740
        }

        //PROY-140230-MAS-INI
        private static void ObtenerSegmentoClienteBRMS(string tipoDocumento, string nroDocumento)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            BWClaroClub_Services oBWClaroClub_Services = new BWClaroClub_Services();
            consultarPuntosResponse oConsultarPuntosResponse = new consultarPuntosResponse();
            BEItemGenerico oAudit = new BEItemGenerico()
            {
                Codigo = nroDocumento,
                Codigo2 = CurrentTerminal,
                Descripcion = ConfigurationManager.AppSettings["constAplicacion"],
                Descripcion2 = CurrentUsers
            };
            string strTipoDocumento = tipoDocumento;
            string strNumeroDocumento = nroDocumento;
            string strTipoDocCC = Comun.WebComunes.ListaTipoDocumento().Where(x => x.Codigo == strTipoDocumento).FirstOrDefault().Codigo3;
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][INICIO]", ""), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][Codigo]", Funciones.CheckStr(oAudit.Codigo)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][Codigo2]", Funciones.CheckStr(oAudit.Codigo2)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][Descripcion]", Funciones.CheckStr(oAudit.Descripcion)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][Descripcion2]", Funciones.CheckStr(oAudit.Descripcion2)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][strTipoDocumento]", Funciones.CheckStr(strTipoDocumento)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][strNumeroDocumento]", Funciones.CheckStr(strNumeroDocumento)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][strTipoDocCC]", Funciones.CheckStr(strTipoDocCC)), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][FIN]", ""), null, null);
            oConsultarPuntosResponse = oBWClaroClub_Services.consultarPuntosClaroClub(strTipoDocCC, strNumeroDocumento, "", oAudit);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][WS-CONSULTARPUNTOSCLAROCLUB]", ""), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT OUT][INI]", ""), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT IN][codigoSegmento]", oConsultarPuntosResponse.codigoSegmento), null, null);
            _objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE OAUDIT OUT][FIN]", ""), null, null);
            HttpContext.Current.Session["strClienteSegmento"] = Funciones.CheckStr(oConsultarPuntosResponse.codigoSegmento);
        }
        //PROY-140230-MAS-FIN

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaDatosDataCredito(string tipoDocumento, string nroDocumento, string strNombres, string strApePaterno, string strApeMaterno, string oficina)
        {
            Boolean MensajeWSDatosDataCredito = false;
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEDataCreditoIN objIN = new BEDataCreditoIN();

            if (HttpContext.Current.Session["Usuario"] == null)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjPerdidaSesion"];
                return objResponse;
            }

            try
            {
                //PROY-140230-MAS-INI
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][INI]", ""), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][tipoDocumento]", tipoDocumento), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][nroDocumento]", nroDocumento), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[PROY-140230 - SEGMENTO DEL CLIENTE][PARAMETROS DE ENTRADA][FIN]", ""), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - parametro strNombres: ", Funciones.CheckStr(strNombres)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - parametro strApePaterno: ", Funciones.CheckStr(strApePaterno)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - parametro strApeMaterno: ", Funciones.CheckStr(strApeMaterno)), null, null);
                ObtenerSegmentoClienteBRMS(tipoDocumento, nroDocumento);
                //PROY-140230-MAS-FIN
                BLDataCreditoDNI obj = new BLDataCreditoDNI();
                BEItemMensaje objMensaje = new BEItemMensaje();
                BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];

                string nroOperacion = System.DateTime.Now.ToString("ddMMyyyyhhmmss");
                objIN.istrTipoDocumento = (Funciones.CheckInt(tipoDocumento)).ToString();
                objIN.istrNumeroDocumento = nroDocumento;
                objIN.istrNOMBRES = strNombres;
                objIN.istrAPELLIDOPATERNO = strApePaterno;
                objIN.istrAPELLIDOMATERNO = strApeMaterno;
                objIN.istrPuntoVenta = oficina;
                objIN.istrANTIGUEDADLABORAL = "";
                objIN.istrArea = "0";
                objIN.istrCanal = "";
                objIN.istrDatoComplemento = "";
                objIN.istrDatoEntrada = 0;
                objIN.istrEDAD = "";
                objIN.istrIDCanal = "";
                objIN.istrIDTerminal = "";
                objIN.istrIngresoOLineaCredito = "";
                objIN.istrNUMCUENTAS = "0";
                objIN.istrSecuencia = "0";
                objIN.istrTIPOCLIENTE = "0";
                objIN.istrTIPOPRODUCTO = "0";
                objIN.istrTIPOTARJETA = "";
                objIN.istrUsuarioACC = objUsuario.idCuentaRed;
                objIN.istrNumOperaPVU = nroOperacion;
                objIN.ostrNumOperaEFT = nroOperacion;
                objIN.istrRUC = ConfigurationManager.AppSettings["RUC_Claro"].ToString();
                objIN.istrRegion = ConfigurationManager.AppSettings["ConstUbigeoLima"].ToString();
                objIN.istrEstadoCivil = ConfigurationManager.AppSettings["ConstEstadoCivilSoltero"].ToString();

                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objIN.istrNOMBRES: ", Funciones.CheckStr(objIN.istrNOMBRES)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objIN.istrAPELLIDOPATERNO: ", Funciones.CheckStr(objIN.istrAPELLIDOPATERNO)), null, null);
                CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objIN.istrAPELLIDOMATERNO: ", Funciones.CheckStr(objIN.istrAPELLIDOMATERNO)), null, null);
                HttpContext.Current.Session["objINDatosBuro"] = objIN; //INC000003111228

                //gaa20170215
                BEDataCreditoOUT objDataCredito;
                //BEDataCreditoOUT objDataCredito = obj.ConsultarDatosDataCredito(objIN, objUsuario, ref objMensaje);
                if (ConfigurationManager.AppSettings["flagBuroAntiguo"] == "1")
                {
                    CrearLogStatic(nroDocumento).CrearArchivolog("INICIO BURO ANTIGUO", null, null);
                    BLDataCreditoDNI objDataCreditoDNI = new BLDataCreditoDNI();
                    objDataCredito = objDataCreditoDNI.ConsultarDatosDataCredito(objIN, objUsuario, ref objMensaje);
                    CrearLogStatic(nroDocumento).CrearArchivolog("FIN BURO ANTIGUO", null, null);
                }
                else
                {
                    CrearLogStatic(nroDocumento).CrearArchivolog("INICIO NUEVO BURO", null, null);
                    BLCreditoWS objBLCreditoWS = new BLCreditoWS();
                    objDataCredito = objBLCreditoWS.ConsultarDatos(objIN, objUsuario, ref objMensaje);
                    CrearLogStatic(nroDocumento).CrearArchivolog("FIN NUEVO BURO", null, null);
                }
                //fin gaa20170215
                if (objDataCredito != null && objMensaje.exito)
                {
                    /*CNH*/
                    if (HttpContext.Current.Session["objClienteClarify" + nroDocumento] != null)
                    {
                        BEDatoPersonaClarify enity = (BEDatoPersonaClarify)HttpContext.Current.Session["objClienteClarify" + nroDocumento];

                        objDataCredito.NOMBRES = enity.Nombres;
                        objDataCredito.APELLIDO_PATERNO = enity.ApePaterno;
                        objDataCredito.APELLIDO_MATERNO = enity.ApeMaterno;
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Encontro data en Session[objClienteClarify]", ""), null, null);
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Session[objClienteClarify] - objDataCredito.APELLIDO_PATERNO: ", Funciones.CheckStr(objDataCredito.APELLIDO_PATERNO)), null, null);
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Session[objClienteClarify] - objDataCredito.APELLIDO_MATERNO: ", Funciones.CheckStr(objDataCredito.APELLIDO_MATERNO)), null, null);
                    }

                    //INC000003443673 - INI
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Cambio del valor de Apellido Paterno/Materno a punto INI", ""), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno: ", Funciones.CheckStr(ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno)), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objDataCredito.NOMBRES: ", Funciones.CheckStr(objDataCredito.NOMBRES)), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objDataCredito.APELLIDO_PATERNO: ", Funciones.CheckStr(objDataCredito.APELLIDO_PATERNO)), null, null);
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objDataCredito.APELLIDO_MATERNO: ", Funciones.CheckStr(objDataCredito.APELLIDO_MATERNO)), null, null);

                    if (objDataCredito.APELLIDO_PATERNO != string.Empty || objDataCredito.APELLIDO_MATERNO != string.Empty)
                    {
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Comienza la validacion de Apellido Paterno", ""), null, null);
                        if (Funciones.CheckStr(ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno).IndexOf(Funciones.CheckStr(objDataCredito.APELLIDO_PATERNO)) > -1)
                        {
                            CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Cliente sin apellido paterno", ""), null, null);
                            objDataCredito.APELLIDO_PATERNO = ".";
                            CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objDataCredito.APELLIDO_PATERNO: ", Funciones.CheckStr(objDataCredito.APELLIDO_PATERNO)), null, null);
                        }
                        CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Comienza la validacion de Apellido Materno", ""), null, null);
                        if (Funciones.CheckStr(ReadKeySettings.Key_ValorSinApellidoPaternoOMaterno).IndexOf(Funciones.CheckStr(objDataCredito.APELLIDO_MATERNO)) > -1)
                        {
                            CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Cliente sin apellido materno", ""), null, null);
                            objDataCredito.APELLIDO_MATERNO = ".";
                            CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objDataCredito.APELLIDO_MATERNO: ", Funciones.CheckStr(objDataCredito.APELLIDO_MATERNO)), null, null);
                        }
                    }
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - Cambio del valor de Apellido Paterno/Materno a punto FIN", ""), null, null);
                    //INC000003443673 - FIN

                    objResponse.Cadena = objDataCredito.toString();
                    CrearLogStatic("").CrearArchivolog(string.Format("{0}{1}", "[INC000003443673 - consultaDatosDataCredito() - objResponse.Cadena: ", Funciones.CheckStr(objResponse.Cadena)), null, null);
                    /* [INC000002442213]VALIDACION HIDDEN - INI */
                    string[] arr = objResponse.Cadena.Split(char.Parse(";"));
                    string sesionVal_BuroConsultado = arr[38];
                    HttpContext.Current.Session["sessionVal_BuroConsultado"] = sesionVal_BuroConsultado;
                    CrearLogStatic(nroDocumento).CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_BuroConsultado]", sesionVal_BuroConsultado, null);

                    string sesionVal_hidNroOperacionDC = arr[33];
                    HttpContext.Current.Session["sessionVal_hidNroOperacionDC"] = sesionVal_hidNroOperacionDC;
                    CrearLogStatic(nroDocumento).CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidNroOperacionDC]", sesionVal_hidNroOperacionDC, null);
                    /* [INC000002442213]VALIDACION HIDDEN - FIN */

                    HttpContext.Current.Session["objClienteDC" + nroDocumento] = objDataCredito;
                }
                else
                {
                    MensajeWSDatosDataCredito = true;
                    throw new Exception(objMensaje.mensajeSistema);
                }
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                if (MensajeWSDatosDataCredito)
                {
                    objResponse.Mensaje = ex.Message.ToString();
                }
                else
                {
                    BLGeneral objConsulta = new BLGeneral();
                    List<BEParametro> lstParametroI = objConsulta.ListaParametros(Funciones.CheckInt64(ConfigurationManager.AppSettings["CodMensajeErrorDCWS"]));
                    foreach (var mensaje in lstParametroI)
                    {
                        objResponse.Mensaje = mensaje.Valor;
                    }

                }
                CrearLogStatic(nroDocumento).CrearArchivolog("[ERROR][consultaDatosDataCredito]", objIN, null);
                CrearLogStatic(objIN.istrNumeroDocumento).CrearArchivolog("[ERROR][consultaDatosDataCredito]", null, ex);
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaDatosDataCreditoCorp(string tipoDocumento, string nroDocumento, string strRazonSocial)
        {
            Boolean MensajeWSDataCreditoCorp = false;
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEDataCreditoCorpIN objIN = new BEDataCreditoCorpIN();

            if (HttpContext.Current.Session["Usuario"] == null)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjPerdidaSesion"];
                return objResponse;
            }

            try
            {
                BEItemMensaje objMensaje = new BEItemMensaje();
                BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];

                objIN.istrTipoPersona = (nroDocumento.Substring(0, 2) == ConfigurationManager.AppSettings["constTipoDocumentoRUC10"]) ? "N" : "J";
                objIN.istrTipoDocumento = (Funciones.CheckInt(tipoDocumento)).ToString();
                objIN.istrNumeroDocumento = nroDocumento;
                objIN.istrNombres = strRazonSocial;
                objIN.istrApellidoPaterno = strRazonSocial;
                objIN.istrApellidoMaterno = strRazonSocial;
                objIN.istrTipoSEC = "B";

                BEEmpresaExperto objDataCredito = null; //PROY-20054

                // INICIO: PROY-20054-IDEA-23849
                if (ConfigurationManager.AppSettings["flagBuroCorporativoAntiguo"] == "1")
                {
                    CrearLogStatic(nroDocumento).CrearArchivolog("[Inicio][ConsultarDatosDataCredito: Antiguo Buro]", null, null);
                    objDataCredito = (new BLDataCreditoCorp()).ConsultarDatosDataCredito(objIN, objUsuario, ref objMensaje);
                }
                else
                {
                    CrearLogStatic(nroDocumento).CrearArchivolog("[Inicio][ConsultarDatosDataCreditoCorporativo: Nuevo Buro]", null, null);
                    objDataCredito = new BLCreditoWS().ConsultarDatosDataCreditoCorporativo(objIN, objUsuario, ref objMensaje);
                }
                //FIN

                if (objDataCredito != null && objMensaje.exito)
                {

                    /*CNH*/
                    if (HttpContext.Current.Session["objClienteClarify" + nroDocumento] != null)
                    {
                        BEDatoPersonaClarify entityBE = (BEDatoPersonaClarify)HttpContext.Current.Session["objClienteClarify" + nroDocumento];
                        bool existeClienteClarify = false;
                        if (tipoDocumento == Funciones.CheckStr(ConfigurationManager.AppSettings["constCodTipoDocumentoRUC"]))
                        {
                            if (nroDocumento.Substring(0, 2) == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoDocumentoRUC10"]))
                            {
                                if (Funciones.CheckStr(entityBE.RazonSocial) == "NN")
                                {
                                    existeClienteClarify = true;
                                }
                            }
                        }
                        //FIN - GGA //
                        if (!existeClienteClarify)
                        {
                            objDataCredito.strRazonSocial = Funciones.CheckStr(entityBE.RazonSocial);
                        }
                    }
                    //INI PORY-32438
                    string CodContribuyente = objDataCredito.CiiuContribuyente;
                    objDataCredito.TipContribuyente = Web.Comun.WebComunes.getTipoContribuyente(objDataCredito.TipContribuyente, "C");
                    objDataCredito.EstContribuyente = Web.Comun.WebComunes.getTipoContribuyente(objDataCredito.EstContribuyente, "E");
                    objDataCredito.CondContribuyente = Web.Comun.WebComunes.getTipoContribuyente(objDataCredito.CondContribuyente, "D");
                    objDataCredito.CiiuContribuyente = Web.Comun.WebComunes.getTipoContribuyente(objDataCredito.CiiuContribuyente, "I");

                    BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];
                    HttpContext.Current.Session["CodContribuyente"] = CodContribuyente;
                    //contri
                    objCliente.TipContribuyente = objDataCredito.TipContribuyente;
                    objCliente.NomComercial = objDataCredito.NomComercial;
                    objCliente.FecIniActividades = objDataCredito.FecIniActividades;
                    objCliente.EstContribuyente = objDataCredito.EstContribuyente;
                    objCliente.CondContribuyente = objDataCredito.CondContribuyente;
                    objCliente.CiiuContribuyente = objDataCredito.CiiuContribuyente;
                    objCliente.CantTrabajadores = objDataCredito.CantTrabajadores.ToString();//INT
                    objCliente.CantMesIniActividades = objDataCredito.CantMesIniActividades;
                    objCliente.EmisionComp = objDataCredito.EmisionComp;
                    objCliente.SistEmielectronica = objDataCredito.SistEmielectronica;

                    //contri
                    objCliente.oRepresentanteLegal = objDataCredito.oRepresentanteLegal;
                    HttpContext.Current.Session["objCliente" + nroDocumento] = objCliente;
                    //INI PORY-32438
                    //INCIDENCIA INC000001335834 - INICIO  
                    if (objDataCredito.strRazonSocial.IndexOf(';') > 0)
                    {
                        objDataCredito.strRazonSocial = objDataCredito.strRazonSocial.ToLower();
                        objDataCredito.strRazonSocial = HttpUtility.HtmlDecode(objDataCredito.strRazonSocial);
                        objDataCredito.strRazonSocial = objDataCredito.strRazonSocial.ToUpper();

                    }
                    //INCIDENCIA INC000001335834 - FIN 

                    //PROY-24740 
                    //INI PROY-32438
                    objResponse.Cadena = string.Format("{0}|{1}|{2}|{3}|{4}|{5}", objDataCredito.strRazonSocial,
                                                                              objDataCredito.strNroOperacion,
                                                                              objDataCredito.deuda_financiera,
                                                                              objDataCredito.strRiesgo,
                                                                              objDataCredito.buro_consultado, objDataCredito.TipContribuyente); //ADD PROY-20054-IDEA-23849 , //objDataCredito.TipContribuyente INI PORY-32438
                    //INI PROY-32438
                    /* [INC000002442213]VALIDACION HIDDEN - INI */
                    string[] arr = objResponse.Cadena.Split(char.Parse("|"));
                    string sesionVal_BuroConsultado = arr[4];
                    HttpContext.Current.Session["sessionVal_BuroConsultado"] = sesionVal_BuroConsultado;
                    CrearLogStatic(nroDocumento).CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_BuroConsultado Corp]", sesionVal_BuroConsultado, null);

                    string sesionVal_hidNroOperacionDC = arr[1];
                    HttpContext.Current.Session["sessionVal_hidNroOperacionDC"] = sesionVal_hidNroOperacionDC;
                    CrearLogStatic(nroDocumento).CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidNroOperacionDC]", sesionVal_hidNroOperacionDC, null);

                    /* [INC000002442213]VALIDACION HIDDEN - FIN */

                    CrearLogStatic(objIN.istrNumeroDocumento).CrearArchivolog("[consultaDatosDataCredito]", Funciones.CheckStr(objDataCredito.buro_consultado), null);//PROY-20054

                    HttpContext.Current.Session["objClienteDC" + nroDocumento] = objDataCredito;
                }
                else
                {
                    MensajeWSDataCreditoCorp = true;
                    throw new Exception(objMensaje.mensajeCliente);
                }
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                if (MensajeWSDataCreditoCorp)
                {
                    objResponse.Mensaje = ex.Message.ToString();
                }
                else
                {
                    BLGeneral objConsulta = new BLGeneral();
                    List<BEParametro> lstParametroI = objConsulta.ListaParametros(Funciones.CheckInt64(ConfigurationManager.AppSettings["CodMensajeErrorDCWS"]));
                    foreach (var mensaje in lstParametroI)
                    {
                        objResponse.Mensaje = mensaje.Valor;
                    }

                }
                CrearLogStatic(nroDocumento).CrearArchivolog("[ERROR][consultaDatosDataCredito]", objIN, null);
                CrearLogStatic(objIN.istrNumeroDocumento).CrearArchivolog("[ERROR][consultaDatosDataCredito]", null, ex);
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaLCDisponible(string tipoDocumento, string nroDocumento)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");// CrearLogStatic(nroDocumento);

            if (HttpContext.Current.Session["Usuario"] == null)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjPerdidaSesion"];
                return objResponse;
            }

            try
            {
                _objLog.CrearArchivolog("[Inicio][consultaLCDisponible]", null, null);

                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

                double dblLC = 0;
                string strCodRiesgo = string.Empty, strEsSaludSunat = string.Empty;
                string strClienteNuevo = (objCliente.nroPlanesActivos > 0) ? "N" : "S";

                if (tipoDocumento != ConfigurationManager.AppSettings["TipoDocumentoRUC"].ToString())
                {
                    BEDataCreditoOUT objDataCredito = (BEDataCreditoOUT)HttpContext.Current.Session["objClienteDC" + nroDocumento];

                    dblLC = objDataCredito.LC_DISPONIBLE;
                    strCodRiesgo = objDataCredito.ACCION;
                    strEsSaludSunat = ConfigurationManager.AppSettings["EssaludSunatPositivo"].ToString();
                    if (objDataCredito.TIPO_DE_CLIENTE == "0") strEsSaludSunat = ConfigurationManager.AppSettings["EssaludSunatNegativo"].ToString();
                }
                else
                {
                    BEEmpresaExperto objDataCredito = (BEEmpresaExperto)HttpContext.Current.Session["objClienteDC" + nroDocumento];

                    dblLC = objDataCredito.deuda_financiera;
                    strCodRiesgo = objDataCredito.strRiesgo;
                }

                List<BEBilletera> objLCxProducto = new List<BEBilletera>();
                List<BEBilletera> oLCDisponiblexProducto = new List<BEBilletera>();

                // Calcular LC Disponible
                (new BLReglaCrediticia()).CalcularLCDisponible(objCliente, strCodRiesgo, strEsSaludSunat, strClienteNuevo, dblLC, ref objLCxProducto, ref oLCDisponiblexProducto);

                objCliente.oLCBuroxBilletera = objLCxProducto;
                objCliente.oLCDisponiblexBilletera = oLCDisponiblexProducto;

                _objLog.CrearArchivolog("[LC x Producto]", objLCxProducto, null);
                _objLog.CrearArchivolog("[LC Disponible x Producto]", oLCDisponiblexProducto, null);

                HttpContext.Current.Session["objCliente" + nroDocumento] = objCliente;

                //INI PROY-140434
                StringBuilder sbLCDisponible = new StringBuilder();
                foreach (BEBilletera fila in objCliente.oLCDisponiblexBilletera)
                {
                    sbLCDisponible.Append(fila.idBilletera);
                    sbLCDisponible.Append(";");
                    sbLCDisponible.Append(fila.monto);
                    sbLCDisponible.Append("|");
                }
                objResponse.Cadena = sbLCDisponible.ToString();
                //FIN PROY-140434

            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjConsultarLCDisponible"].ToString();
                _objLog.CrearArchivolog("[ERROR][consultaLCDisponible]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][consultaLCDisponible]", null, null);
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaReglasCreditos(string nroDocumento, string nroOperacionBuro, string strCadenaDatos, string strCadenaPlan, string strCadenaServicio, string strCadenaEquipo, string strTieneProteccionMovil, string strBuroConsultado, string prodFacturar) //PROY-24724-IDEA-28174 //PROY-140743
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            StringBuilder sbReglasCreditos = new StringBuilder();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");// CrearLogStatic(nroDocumento);
            try
            {
                _objLog.CrearArchivolog("[Inicio][consultaReglasCreditos]", null, null);

                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

                // Validar pérdida Sessión Cliente
                if (objCliente == null || objCliente.oLCDisponiblexBilletera == null)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjPerdidaSesion"];
                    _objLog.CrearArchivolog("[ERROR][consultaReglasCreditos]", objResponse.Mensaje, null);
                    _objLog.CrearArchivolog("[Fin][consultaReglasCreditos]", null, null);
                    return objResponse;
                }


                //INI - VALIDACION ANTIFRAUDE INC000002547199
                string[] arrDatosGeneral = strCadenaDatos.Split('|');
                HttpContext.Current.Session["SesionModalidad"] = arrDatosGeneral[8];
                HttpContext.Current.Session["SesionOperador"] = arrDatosGeneral[9];

                HttpContext.Current.Session["SesionValidacion"] = arrDatosGeneral[10] + '|' + arrDatosGeneral[11] + '|' + arrDatosGeneral[12]; //fdq1
                _objLog.CrearArchivolog("[Validacion AntiFraude]", string.Format("{0}:{1}", "SesionValidacion", Funciones.CheckStr(HttpContext.Current.Session["SesionValidacion"])), null);

                _objLog.CrearArchivolog("[Validacion AntiFraude]", string.Format("{0}:{1}", "Sesion Modalidad", Funciones.CheckStr(HttpContext.Current.Session["SesionModalidad"])), null);
                _objLog.CrearArchivolog("[Validacion AntiFraude]", string.Format("{0}:{1}", "Sesion Operador", Funciones.CheckStr(HttpContext.Current.Session["SesionOperador"])), null);
                //FIN - VALIDACION ANTIFRAUDE INC000002547199

                List<BEDireccionCliente> objDireccion = (List<BEDireccionCliente>)HttpContext.Current.Session["objDireccion" + nroDocumento];

                objCliente.nroOperacionBuro = nroOperacionBuro;
                strCadenaDatos = strCadenaDatos.Replace("*", "+");
                strCadenaPlan = strCadenaPlan.Replace("*", "+");
                strCadenaEquipo = strCadenaEquipo.Replace("*", "+");

                _objLog.CrearArchivolog("[Datos General]", strCadenaDatos, null);
                _objLog.CrearArchivolog("[Datos Plan]", strCadenaPlan, null);
                _objLog.CrearArchivolog("[Datos Equipo]", strCadenaEquipo, null);

                HttpContext.Current.Session["DatosPlan"] = strCadenaPlan; //INICIATIVA-805 Campana Descuento Cargo Fijo

                //gaa20170215
                objCliente.buroConsultado = strBuroConsultado;
                //fin gaa20170215

                _objLog.CrearArchivolog("[Buro Consultado]", objCliente.buroConsultado, null); //ADD PROY-20054-IDEA-23849
                objCliente.totalplanes = 1;// PROY-30748

                //EMMH I
                //objCliente.Deuda = ConfigurationManager.AppSettings["constDeudaEvalBRMS"].ToString(); // PROY-30748 - DEUDA
                //EMMH F     

                //PROY-31948 INI
                BECuota objCuotaOAC = new BECuota();
                BECuota objCuotaPVU = new BECuota();

                string strTipoDocumento = objCliente.tipoDoc;
                string strNroDocumento = objCliente.nroDoc;
                string strNroLinea = string.Empty;

                objCuotaOAC = (BECuota)HttpContext.Current.Session["objCuotaOAC"];
                objCuotaPVU = (BECuota)HttpContext.Current.Session["objCuotaPVU"];

                if (objCuotaOAC == null && objCuotaPVU == null)
                {
                    WebComunes.ConsultarCuotasPendientes(strTipoDocumento, strNroDocumento, strNroLinea, ref objCuotaOAC, ref objCuotaPVU);//1ra llamada
                }
                //PROY-31948 FIN

                //PROY-140579 INICIO
                HttpContext.Current.Session["objClienteDI"] = null;
                string objClienteDI = strTipoDocumento + "|" + strNroDocumento + "|" + "Evaluar";
                HttpContext.Current.Session["objClienteDI"] = objClienteDI;
                //PROY-140579 FIN

                WS.WSReglasCrediticia.ClaroEvalClientesReglasRequest oRequestReglasCrediticia = new WS.WSReglasCrediticia.ClaroEvalClientesReglasRequest();

                BEVistaEvaluacion obj = (new BLReglaCrediticia()).Evaluar(objCliente, objDireccion, strCadenaDatos, strCadenaPlan, strCadenaServicio, strCadenaEquipo, strTieneProteccionMovil, objCuotaOAC, objCuotaPVU, Funciones.CheckStr(prodFacturar), ref oRequestReglasCrediticia); //PROY-24724-IDEA-28174 //PROY-30748//PROY-31948//PROY-140743

                _objLog.CrearArchivolog("[INC000004091065]", string.Format("{0}:{1}", "[Return Evaluar]", Funciones.CheckStr(new JavaScriptSerializer().Serialize(obj))), null);
                _objLog.CrearArchivolog("[INC000004091065]", string.Format("{0}:{1}", "[Out Evaluar oRequestReglasCrediticia]", Funciones.CheckStr(new JavaScriptSerializer().Serialize(oRequestReglasCrediticia))), null);

                HttpContext.Current.Session["RequestReglaCrediticia" + nroDocumento] = oRequestReglasCrediticia;// PROY-30748
                objCliente.oVistaEvaluacion = obj;

                /* PROY-140579 RU01 INI RMR */
                List<BEOfrecimiento> oListOfrecimiento = (List<BEOfrecimiento>)objCliente.oVistaEvaluacion.oOfrecimiento;
                string motivoRestriccion = "";
                string mostrarRestriccion = "";
                if (oListOfrecimiento.Count > 0)
                {
                    motivoRestriccion = oListOfrecimiento[0].MotivoDeRestriccion;
                    mostrarRestriccion = oListOfrecimiento[0].MostrarMotivoDeRestriccion;
                }
                /* PROY-140579 RU01 FIN RMR */

                HttpContext.Current.Session["objCliente" + nroDocumento] = objCliente;
                //PROY-24740 
                sbReglasCreditos.Append(obj.planAutonomia);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.tipoGarantia);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.LCDisponible);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.importeGarantia);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.poderes);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.rangoLCDisponible);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.riesgoClaro);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.comportamientoPago);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.exoneraRA);
                sbReglasCreditos.Append("#");//PROY 30748
                sbReglasCreditos.Append(obj.ListProac.Count);//PROY 30748
                //PROY-29215 INICIO
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.formaPago);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.nrocuota);
                //PROY-29215 FIN

                //INI: PROY-140335 RF1
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.flagEjecucionConsultaPrevia);
                //FIN: PROY-140335 RF1

                /* PROY-140579 RU01 INI RMR */
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(motivoRestriccion);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(mostrarRestriccion);
                /* PROY-140579 RU01 FIN RMR */

                //PROY-140546 Cobro Anticipado de Instalacion
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.montoAnticipadoInstalacion);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.tipoCobroAnticipadoInstalacion);
                //PROY-140546 Cobro Anticipado de Instalacion

                objResponse.Cadena = sbReglasCreditos.ToString();
                //PROY-24740 

                /* [INC000002442213]VALIDACION HIDDEN - INI */
                string sesionVal_ResumenCrediticio = objResponse.Cadena;
                HttpContext.Current.Session["sessionVal_hidResumenCrediticio"] = sesionVal_ResumenCrediticio;
                _objLog.CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidResumenCrediticio]", sesionVal_ResumenCrediticio, null);
                /* [INC000002442213]VALIDACION HIDDEN - FIN */

                //PROY-30748 ini
                BEPlanProactivo objBEPlanProactivo = new BEPlanProactivo
                {
                    NroCuota = obj.NroCuotaProac,
                    Planes = obj.ListProac,
                    TotalPlanes = obj.ListProac.Count,
                    CFServAdic = 0.00,
                    CadenaDatos = strCadenaDatos,
                    CadenaEquipo = strCadenaEquipo,
                    CadenaPlan = strCadenaPlan,
                    CadenaServicio = strCadenaServicio,
                    cantidadDePlanesPorProducto = obj.cantidadDePlanesPorProducto,
                    creditScore = obj.creditScore
                };

                HttpContext.Current.Session["BEPlanProactivo"] = objBEPlanProactivo;
                //PROY-30748 fin

                //PROY-140743 - INI
                objResponse.MensajeErrorBRMS = Funciones.CheckStr(HttpContext.Current.Session["strMensajeErrorBRMS"]);
                _objLog.CrearArchivolog("[PROY-140743 - IDEA-141192 - Venta en cuota] [MensajeErrorBRMS] ==> ", Funciones.CheckStr(objResponse.MensajeErrorBRMS), null);
                //PROY-140743 - FIN
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjConsultarReglasCredticia"].ToString();
                _objLog.CrearArchivolog("[ERROR][consultaReglasCreditos]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][consultaReglasCreditos][objResponse.Cadena]", objResponse.Cadena, null);
                _objLog.CrearArchivolog("[Fin][consultaReglasCreditos]", null, null);
            }
            return objResponse;
        }

        //PROY-140618-INI
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod RegistrarEvaluacionMejorasPorta(string strCadDatosEvaluacion, string nroDocumento, string strCadenaDatos, string strCadenaServicio, string strCadenaPlan, string strCadenaEquipo, string strResultadoEva)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            try
            {
                _objLog.CrearArchivolog(string.Format("[{0}]", "====> INICIO METODO RegistrarEvaluacionMejorasPorta() <===="), null, null);

                Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();
                BEAuditoriaRequest objBeAuditoriaRequest = new BEAuditoriaRequest();
                RegistrarEvaluacionMejoraPortaRequest objRegistrarEvaMejPortaReq = new RegistrarEvaluacionMejoraPortaRequest();
                RegistrarEvaluacionMejoraPortaResponse objRegistrarEvaMejPortaResp = new RegistrarEvaluacionMejoraPortaResponse();
                RestRegistrarEvaMejoraPortabilidad objRestRegistrarMejPor = new RestRegistrarEvaMejoraPortabilidad();
                BEAuditoriaRequest objAuditoriaReq = new BEAuditoriaRequest();
                List<BEPorttSolicitud> listPortabilidad = (List<BEPorttSolicitud>)HttpContext.Current.Session[string.Format("listaPortabilidad{0}", CurrentUsers)];
                RegistrarEvaluacionRequest objRegEvaluacionReq = new RegistrarEvaluacionRequest();


                if (strCadDatosEvaluacion != string.Empty)
                {
                    string[] arrCadEvaluacion = strCadDatosEvaluacion.Split('#');
                    objRegEvaluacionReq.lcDisponible = Convert.ToString(arrCadEvaluacion[2]);
                    objRegEvaluacionReq.comportamiento = arrCadEvaluacion[7];
                    objRegEvaluacionReq.rangoLc = arrCadEvaluacion[5];
                    objRegEvaluacionReq.tipoGarantia = arrCadEvaluacion[1];
                    objRegEvaluacionReq.importeRa = arrCadEvaluacion[3];
                }
                else
                {
                    objRegEvaluacionReq.lcDisponible = "";
                    objRegEvaluacionReq.comportamiento = "";
                    objRegEvaluacionReq.rangoLc = "";
                    objRegEvaluacionReq.tipoGarantia = "";
                    objRegEvaluacionReq.importeRa = "";
                }

                string[] arrCadPlan = strCadenaPlan.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                string[] arrCadEquipo = strCadenaEquipo.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                string[] arrDatosGeneral = strCadenaDatos.Split('|');

                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "strCadDatosEvaluacion", strCadDatosEvaluacion), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "strCadenaPlan", strCadenaPlan), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "strCadenaEquipo", strCadenaEquipo), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "strCadenaDatos", strCadenaDatos), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "INC000004509732 strCadenaServicio", Funciones.CheckStr(strCadenaServicio)), null, null);

                BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];
                List<BEPuntoVenta> lstOficina = (List<BEPuntoVenta>)HttpContext.Current.Session["SeslstOficina"];
                BEDataCreditoIN objDataCreIn = new BEDataCreditoIN();
                BEDataCreditoOUT objDataCreOut = new BEDataCreditoOUT();
                BEEmpresaExperto objDataCreditoCorp = new BEEmpresaExperto();
                string descOficina = "";

                foreach (var itemOfic in lstOficina)
                {
                    if (itemOfic.OvencCodigo == objUsuario.OficinaVenta)
                    {
                        descOficina = itemOfic.OvenvDescripcion;
                        break;
                    }
                }

                objBeAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBeAuditoriaRequest.timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBeAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["constUsuarioAplicacion"]);
                objBeAuditoriaRequest.msgid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBeAuditoriaRequest.idAplicacion = Funciones.CheckStr(ConfigurationManager.AppSettings["constUsuarioAplicacion"]);

                _objLog.CrearArchivolog(string.Format("[{0}]", "====> INICIO Parametro Auditoria <===="), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "idTransaccion", objBeAuditoriaRequest.idTransaccion), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "timestamp", objBeAuditoriaRequest.timestamp), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "userId", objBeAuditoriaRequest.userId), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "msgid", objBeAuditoriaRequest.msgid), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "idAplicacion", objBeAuditoriaRequest.idAplicacion), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}]", "====> FIN Parametro Auditoria <===="), null, null);


                objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["constUsuarioAplicacion"]);
                objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_country"]);
                objHeaderRequest.dispositivo = CurrentTerminal;
                objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_language"]);
                objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_modulo"]);
                objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_msgType"]);
                objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["Cons_OperationMejPor"]);
                objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["constAplicacion"]);
                objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                objHeaderRequest.userId = CurrentUsers;
                objHeaderRequest.wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["Cons_WSIpRegistroEvaMejPor"]);

                _objLog.CrearArchivolog(string.Format("[{0}]", "====> INICIO Parametro Datapower <===="), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "consumer", objHeaderRequest.consumer), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "country", objHeaderRequest.country), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "dispositivo", objHeaderRequest.dispositivo), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "language", objHeaderRequest.language), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "modulo", objHeaderRequest.modulo), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "msgType", objHeaderRequest.msgType), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "operation", objHeaderRequest.operation), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "pid", objHeaderRequest.pid), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "system", objHeaderRequest.system), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "timestamp", objHeaderRequest.timestamp), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "userId", objHeaderRequest.userId), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "wsIp", objHeaderRequest.wsIp), null, null);
                _objLog.CrearArchivolog(string.Format("[{0}]", "====> FIN Parametro Datapower <===="), null, null);


                if (objCliente.tipoDoc == ConfigurationManager.AppSettings["TipoDocumentoRUC"])
                {
                    string strNroDocumento = objCliente.nroDoc;
                    objDataCreditoCorp = (BEEmpresaExperto)HttpContext.Current.Session["objClienteDC" + nroDocumento];
                    if (strNroDocumento.Substring(0, 2) == "20")
                    {
                        objRegEvaluacionReq.nombre = objDataCreditoCorp.oRepresentanteLegal[0].APODV_APA_REP_LEG + " " + objDataCreditoCorp.oRepresentanteLegal[0].APODV_AMA_REP_LEG + " " + objDataCreditoCorp.oRepresentanteLegal[0].APODV_NOM_REP_LEG;
                        objRegEvaluacionReq.apePaterno = "";
                        objRegEvaluacionReq.apeMaterno = "";
                    }
                    else
                    {
                        objRegEvaluacionReq.nombre = objDataCreditoCorp.oRepresentanteLegal[0].APODV_NOM_REP_LEG;
                        objRegEvaluacionReq.apePaterno = objDataCreditoCorp.oRepresentanteLegal[0].APODV_APA_REP_LEG;
                        objRegEvaluacionReq.apeMaterno = objDataCreditoCorp.oRepresentanteLegal[0].APODV_AMA_REP_LEG;
                    }
                    objRegEvaluacionReq.nacionalidad = "Peru";
                }
                else
                {
                    objDataCreOut = (BEDataCreditoOUT)HttpContext.Current.Session["objClienteDC" + nroDocumento];
                    objRegEvaluacionReq.nombre = objDataCreOut.NOMBRES;
                    objRegEvaluacionReq.apePaterno = objDataCreOut.APELLIDO_PATERNO;
                    objRegEvaluacionReq.apeMaterno = objDataCreOut.APELLIDO_MATERNO;
                    objRegEvaluacionReq.nacionalidad = arrDatosGeneral[14];
                }

                objRegistrarEvaMejPortaReq.MessageRequest.header.HeaderRequest = objHeaderRequest;

                foreach (string item in arrCadEquipo)
                {
                    string[] equipo = item.Split(';');

                    foreach (var itemPlan in arrCadPlan)
                    {
                        string[] plan = itemPlan.Split(';');

                        if (equipo[0] == plan[0])
                        {
                            objRegEvaluacionReq.codCampania = plan[8];
                            objRegEvaluacionReq.descCampania = plan[9];
                            objRegEvaluacionReq.plazo = plan[15].Split('|')[0];
                            objRegEvaluacionReq.familiaPlan = plan[14];
                            objRegEvaluacionReq.codPlan = plan[5];
                            objRegEvaluacionReq.descPlan = plan[6];

                            objRegEvaluacionReq.cargoFijo = plan[10];
                            break;
                        }
                    }
                    objRegEvaluacionReq.idEval = "0";
                    objRegEvaluacionReq.tipoDoc = objCliente.tipoDoc;
                    objRegEvaluacionReq.nroDoc = objCliente.nroDoc;
                    objRegEvaluacionReq.email = arrDatosGeneral[15];
                    objRegEvaluacionReq.tipoOperacion = arrDatosGeneral[0];
                    objRegEvaluacionReq.tipoOferta = arrDatosGeneral[1]; ; // arrDatosGeneral[10];
                    objRegEvaluacionReq.modVenta = arrDatosGeneral[5];
                    objRegEvaluacionReq.casoEspecial = arrDatosGeneral[2];
                    objRegEvaluacionReq.tipoServicio = arrDatosGeneral[13];
                    objRegEvaluacionReq.modalidad = arrDatosGeneral[3];
                    objRegEvaluacionReq.operadorCedente = arrDatosGeneral[4];
                    objRegEvaluacionReq.servAdicional = strCadenaServicio;
                    objRegEvaluacionReq.codEquipo = equipo[2];
                    objRegEvaluacionReq.descEquipo = equipo[3];
                    objRegEvaluacionReq.nroCuotas = equipo[6] == "00" ? "" : equipo[6];
                    objRegEvaluacionReq.linea = equipo[10];
                    objRegEvaluacionReq.resultado_eval = strResultadoEva;
                    objRegEvaluacionReq.codOficina = objUsuario.OficinaVenta;
                    objRegEvaluacionReq.descOficina = descOficina;
                    objRegEvaluacionReq.consultaPrevia = string.Empty;
                    objRegEvaluacionReq.fechaCp = string.Empty;
                    objRegEvaluacionReq.deudaCp = string.Empty;

                    if (listPortabilidad != null)
                    {
                        foreach (var port in listPortabilidad)
                        {
                            if (equipo[10] == port.numeroLinea)
                            {
                                objRegEvaluacionReq.consultaPrevia = (!String.IsNullOrEmpty(port.descripcionMotivoCP) ? port.descripcionMotivoCP : port.descripcionEstadoCP);
                                objRegEvaluacionReq.fechaCp = port.fechaEnvioCP;
                                objRegEvaluacionReq.deudaCp = port.deudaCP;
                                break;
                            }
                        }
                    }
                    objRegEvaluacionReq.usuarioReg = objUsuario.idCuentaRed;

                    _objLog.CrearArchivolog(string.Format("[{0}]", "====> INICIO Parametro registrarEvaluacionRequest <===="), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "idEval", objRegEvaluacionReq.idEval), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "tipoDoc", objRegEvaluacionReq.tipoDoc), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "nroDoc", objRegEvaluacionReq.nroDoc), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "nacionalidad", objRegEvaluacionReq.nacionalidad), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "nombre", objRegEvaluacionReq.nombre), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "apePaterno", objRegEvaluacionReq.apePaterno), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "apeMaterno", objRegEvaluacionReq.apeMaterno), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "email", objRegEvaluacionReq.email), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "tipoOperacion", objRegEvaluacionReq.tipoOperacion), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "modVenta", objRegEvaluacionReq.modVenta), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "casoEspecial", objRegEvaluacionReq.casoEspecial), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "tipoServicio", objRegEvaluacionReq.tipoServicio), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "modalidad", objRegEvaluacionReq.modalidad), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "operadorCedente", objRegEvaluacionReq.operadorCedente), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "codCampania", objRegEvaluacionReq.codCampania), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "descCampania", objRegEvaluacionReq.descCampania), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "plazo", objRegEvaluacionReq.plazo), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "familiaPlan", objRegEvaluacionReq.familiaPlan), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "codPlan", objRegEvaluacionReq.codPlan), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "descPlan", objRegEvaluacionReq.descPlan), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "servAdicional", objRegEvaluacionReq.servAdicional), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "cargoFijo", objRegEvaluacionReq.cargoFijo), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "codEquipo", objRegEvaluacionReq.codEquipo), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "descEquipo", objRegEvaluacionReq.descEquipo), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "nroCuotas", objRegEvaluacionReq.nroCuotas), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "linea", objRegEvaluacionReq.linea), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "resultado_eval", objRegEvaluacionReq.resultado_eval), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "lcDisponible", objRegEvaluacionReq.lcDisponible), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "comportamiento", objRegEvaluacionReq.comportamiento), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "rangoLc", objRegEvaluacionReq.rangoLc), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "tipoGarantia", objRegEvaluacionReq.tipoGarantia), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "importeRa", objRegEvaluacionReq.importeRa), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "codOficina", objRegEvaluacionReq.codOficina), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "descOficina", objRegEvaluacionReq.descOficina), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "consultaPrevia", objRegEvaluacionReq.consultaPrevia), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "fechaCp", objRegEvaluacionReq.fechaCp), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "deudaCp", objRegEvaluacionReq.deudaCp), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] : [{1}]", "usuarioReg", objRegEvaluacionReq.usuarioReg), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}]", "====> FIN Parametro registrarEvaluacionRequest <===="), null, null);

                    objRegistrarEvaMejPortaReq.MessageRequest.body.registrarEvaluacionRequest = objRegEvaluacionReq;
                    objRegistrarEvaMejPortaResp = objRestRegistrarMejPor.RegistrarEvaluacionMejPor(objRegistrarEvaMejPortaReq, objBeAuditoriaRequest);

                    string codResp = objRegistrarEvaMejPortaResp.MessageResponse.body.registrarEvaluacionResponse.codigoRespuesta;
                    string mensResp = objRegistrarEvaMejPortaResp.MessageResponse.body.registrarEvaluacionResponse.mensajeRespuesta;
                    _objLog.CrearArchivolog(string.Format("[{0}] [{1}] [{2}] : [{3}] ]", "REGISTRAR", "RegistrarEvaluacionMejorasPorta", "codResp", codResp), null, null);
                    _objLog.CrearArchivolog(string.Format("[{0}] [{1}] [{2}] : [{3}] ]", "REGISTRAR", "RegistrarEvaluacionMejorasPorta", "mensResp", mensResp), null, null);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog("[ERROR][RegistrarEvaluacionMejorasPorta][Mensaje Error: ]", ex.Message, null);

            }
            return objResponse;
        }
        //PROY-140618-FIN
        [WebMethod(EnableSession = true)]
        public static BEResponseWebMethod ValidarRepositorioABDCP(string ListaTelefono, string CadenaConsultaPrevia)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            string[] arrTelefono = ListaTelefono.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
            string[] arrConsultaPrevia = CadenaConsultaPrevia.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
            string flagConsultaPrevia = string.Empty;
            string strCodRespuesta = string.Empty;
            string strMsgRespuesta = string.Empty;
            string DetalleCPRepositorio = string.Empty;

            BEPorttSolicitud objConsultaPrevia = new BEPorttSolicitud();

            try
            {
                string strTipoDocumentoABCDP = Comun.WebComunes.ListaTipoDocumento().Where(w => w.Codigo == arrConsultaPrevia[2]).FirstOrDefault().Codigo5;
                objConsultaPrevia.operadorCedente = Funciones.CheckStr(arrConsultaPrevia[0]);
                objConsultaPrevia.modalidadOrigen = Funciones.CheckStr(arrConsultaPrevia[1]);
                objConsultaPrevia.TipoDocumento = Funciones.CheckStr(strTipoDocumentoABCDP);
                objConsultaPrevia.NroDocumento = Funciones.CheckStr(arrConsultaPrevia[3]);

                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("INICIO: PROY-140335 IDEA-140307", null, null);
                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("METODO [ValidarRepositorioABDCP] - INPUT [codigoCedente] -> " + objConsultaPrevia.operadorCedente, null, null);
                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("METODO [ValidarRepositorioABDCP] - INPUT [modalidad] -> " + objConsultaPrevia.modalidadOrigen, null, null);
                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("METODO [ValidarRepositorioABDCP] - INPUT [tipoDocumentoABDCP] -> " + objConsultaPrevia.TipoDocumento, null, null);
                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("METODO [ValidarRepositorioABDCP] - INPUT [numeroDocumento] -> " + objConsultaPrevia.NroDocumento, null, null);

                List<string> lstLineas = ListaTelefono.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries).ToList();

                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("METODO [ValidarRepositorioABDCP] - INPUT [Lineas A Validar] -> " + String.Join(",", lstLineas.ToArray()), null, null);

                List<BEPorttSolicitud> lstDetalleCPRepositorio = new List<BEPorttSolicitud>();
                BEPorttSolicitud DetalleCPLinea = new BEPorttSolicitud();//null;
                int idLinea = 0;
                foreach (var Linea in lstLineas)
                {
                    idLinea += 1;
                    objConsultaPrevia.numeroLinea = Linea;
                    BEPorttSolicitud DetalleCP = BLPortabilidad.ValidarRepositorioABDCP(objConsultaPrevia, ref strCodRespuesta, ref strMsgRespuesta);
                    DetalleCP.numeroLinea = Linea;
                    DetalleCP.flagCPPermitida = 0;
                    DetalleCP.flagEnvioCP = "1";
                    DetalleCP.idLinea = idLinea;
                    lstDetalleCPRepositorio.Add(DetalleCP);

                    CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("METODO [ValidarRepositorioABDCP] - OUTPUT [Linea]:[flagConsultaPrevia] -> " + Linea + ":" + DetalleCP.flagConsultaPrevia, null, null);
                    CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("FIN: PROY-140335 IDEA-140307", null, null);
                }

                HttpContext.Current.Session["DetalleCPRepositorio"] = lstDetalleCPRepositorio;

                objResponse.CodigoError = flagConsultaPrevia;
                objResponse.Error = false;
                objResponse.Mensaje = strMsgRespuesta;
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = strMsgRespuesta;
                CrearLogStatic(objConsultaPrevia.NroDocumento).CrearArchivolog("[ERROR][ValidarRepositorioABDCP]", null, ex);
            }

            return objResponse;
        }
        //FIN: PROY-140335 RF1

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaCuota(string idFila, string nroDocumento, string nroOperacionBuro, string strCadenaDatos, string strCadenaPlan, string strCadenaEquipo, string strTieneProteccionMovil, string strBuroConsultado, string strPromocion, string prodFacturar) //PROY-24724-IDEA-28174 // PROY-140743
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            List<BECuota> objListaCuota = new List<BECuota>();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");// CrearLogStatic(nroDocumento);
            try
            {
                HttpContext.Current.Session["strPromocionVV"] = Funciones.CheckStr(strPromocion); //PROY-140743
                HttpContext.Current.Session["dblCuotaInicialComercial"] = null; //INICIATIVA 803
                _objLog.CrearArchivolog("[Inicio][consultaCuota]", null, null);
                //G.G.A - INC000002592222 - SOLUCION - INICIO
                _objLog.CrearArchivolog("[idFila]", idFila, null);
                _objLog.CrearArchivolog("[nroDocumento]", nroDocumento, null);
                _objLog.CrearArchivolog("[nroOperacionBuro]", nroOperacionBuro, null);
                _objLog.CrearArchivolog("[strCadenaDatos]", strCadenaDatos, null);
                _objLog.CrearArchivolog("[strCadenaPlan]", strCadenaPlan, null);
                _objLog.CrearArchivolog("[strCadenaEquipo]", strCadenaEquipo, null);
                _objLog.CrearArchivolog("[strTieneProteccionMovil]", strTieneProteccionMovil, null);
                _objLog.CrearArchivolog("[strBuroConsultado]", strBuroConsultado, null);
                //G.G.A - INC000002592222 - SOLUCION - FIN


                objResponse.IdFila = idFila;

                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];
                List<BEDireccionCliente> objDireccion = (List<BEDireccionCliente>)HttpContext.Current.Session["objDireccion" + nroDocumento];
                //PROY-29123
                List<BEOfrecimiento> objListaOfrecimiento = new List<BEOfrecimiento>();
                objCliente.totalplanes = 1; //PROY-30748
                objCliente.nroOperacionBuro = nroOperacionBuro;
                strCadenaDatos = strCadenaDatos.Replace("*", "+");
                strCadenaPlan = strCadenaPlan.Replace("*", "+");
                strCadenaEquipo = strCadenaEquipo.Replace("*", "+");

                _objLog.CrearArchivolog("[Datos General]", strCadenaDatos, null);
                _objLog.CrearArchivolog("[Datos Plan]", strCadenaPlan, null);
                _objLog.CrearArchivolog("[Datos Equipo]", strCadenaEquipo, null);
                //gaa20170215
                objCliente.buroConsultado = strBuroConsultado;
                //fin gaa20170215

                //EMMH I
                //objCliente.Deuda = ConfigurationManager.AppSettings["constDeudaEvalBRMS"].ToString(); // PROY-30748 - DEUDA
                //EMMH F

                //PROY-31948 INI
                BECuota objCuotaOAC = new BECuota();
                BECuota objCuotaPVU = new BECuota();

                string strTipoDocumento = objCliente.tipoDoc;
                string strNroDocumento = objCliente.nroDoc;
                string strNroLinea = string.Empty;

                objCuotaOAC = (BECuota)HttpContext.Current.Session["objCuotaOAC"];
                objCuotaPVU = (BECuota)HttpContext.Current.Session["objCuotaPVU"];

                if (objCuotaOAC == null && objCuotaPVU == null)
                {
                    WebComunes.ConsultarCuotasPendientes(strTipoDocumento, strNroDocumento, strNroLinea, ref objCuotaOAC, ref objCuotaPVU);//2da llamada
                }
                //PROY-31948 FIN

                //PROY-140579 INICIO
                HttpContext.Current.Session["objClienteDI"] = null;
                string objClienteDI = strTipoDocumento + "|" + strNroDocumento + "|" + "Evaluar Cuota";
                HttpContext.Current.Session["objClienteDI"] = objClienteDI;
                //PROY-140579 FIN

                //G.G.A - INC000002592222 - SOLUCION - INICIO
                _objLog.CrearArchivolog("[Llamando][EvaluarCuota]", null, null);
                objListaCuota = (new BLReglaCrediticia()).EvaluarCuota(objCliente, objDireccion, strCadenaDatos, strCadenaPlan, strCadenaEquipo, strTieneProteccionMovil, objCuotaOAC, objCuotaPVU, Funciones.CheckStr(prodFacturar), ref objListaOfrecimiento); //PROY-24724-IDEA-28174 //PROY-29123-IDEA-36703//PROY-31948//PROY-140743
                _objLog.CrearArchivolog("[Fin de Llamado][EvaluarCuota]", null, null);
                //G.G.A - INC000002592222 - SOLUCION - FIN

                //PROY-24740 
                StringBuilder sbCuotas = new StringBuilder();
                objResponse.Cadena = string.Empty;
                //PROY-29123
                string maxCuotas = "", maxMonto = "", mensajeCuota = "";

                foreach (BECuota obj in objListaCuota)
                {
                    sbCuotas.Append("|");
                    sbCuotas.Append(obj.idCuota);
                    sbCuotas.Append("_");
                    sbCuotas.Append(obj.porcenCuotaInicial);
                    porcenCuotaInicialComercialBRMS = obj.porcenCuotaInicial; //INICIATIVA 803
                    sbCuotas.Append(";");
                    sbCuotas.Append(obj.cuota);
                    //PROY-29123
                    maxCuotas = "^" + obj.maximoCuotas.ToString();
                    maxMonto = "^" + obj.maximoPrecioSoles.ToString();
                    mensajeCuota = "^" + obj.mensajeCuota;
                }

                //PROY-29123
                foreach (BEOfrecimiento obj in objListaOfrecimiento)
                {
                    objResponse.Mensaje = obj.MaximoCuotas + "^" + obj.PrecioEquipoMaximo + "^" + obj.MostrarMensaje;
                }

                _objLog.CrearArchivolog("[objResponse.Mensaje]", objResponse.Mensaje, null); //G.G.A - INC000002592222 - SOLUCION - INICIO
                //PROY-24740
                objResponse.Cadena = sbCuotas.ToString() + maxCuotas + maxMonto + mensajeCuota;//PROY-29123

                HttpContext.Current.Session["strCuotaBRMS"] = objResponse.Cadena;
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][HttpContext.Current.Session[strCuotaBRMS]]", objResponse.Cadena), null, null);

                //INICIATIVA - 803 - INI
                Double dblCuotaINI = Funciones.CheckDbl(HttpContext.Current.Session["dblCuotaInicialComercial"]);
                CuotaInicialComercial = dblCuotaINI;

            }
            catch (Exception ex)
            {
                objResponse.Cadena = "";
                _objLog.CrearArchivolog("[ERROR][consultaCuota]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][consultaCuota]", null, null);
            }

            // INICIO [VALIDACION FRAUDE - CUOTA] INC000002428826
            Double montoInicialMinimo = 0;
            try
            {


                Double precioEquipo = Convert.ToDouble(strCadenaEquipo.Split(';')[5].ToString());
                Double porcerEquipo = Convert.ToDouble(objResponse.Cadena.Split(';')[0].ToString().Split('_')[1].ToString());   // |18_75.5534270662826;18 CUOTAS^0^0^NO
                montoInicialMinimo = Math.Round((precioEquipo * porcerEquipo / 100), 2);  // [INC000002442213]

                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][precioEquipo]", precioEquipo), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][porcerEquipo]", porcerEquipo), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][montoInicialMinimo]", montoInicialMinimo), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][Session[strValidacionCuotaBRMS" + idFila + "] => ]", montoInicialMinimo), null, null); //G.G.A - INC000002592222 - SOLUCION - INICIO

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][Exception]", ex.Message), null, null);
                montoInicialMinimo = 0;
            }

            HttpContext.Current.Session["strValidacionCuotaBRMS" + idFila] = montoInicialMinimo;
            // FIN [VALIDACION FRAUDE - CUOTA] INC000002428826

            //PROY-140743 - INI
            objResponse.MensajeErrorBRMS = Funciones.CheckStr(HttpContext.Current.Session["strMensajeErrorBRMS"]);
            _objLog.CrearArchivolog("[PROY-140743 - IDEA-141192 - Venta en cuotas] [MensajeErrorBRMS] ==> ", Funciones.CheckStr(objResponse.MensajeErrorBRMS), null);
            //PROY-140743 - FIN

            return objResponse;
        }

        //INICIATIVA -803 INI
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod ValidarReglasExcepxionCuotas(string hidMontoEquipoVenta)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            objResponse.Boleano = true;
            double cuotaInicialBrms = 0.0;
            List<BECuota> objListaCuota = new List<BECuota>();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "ValidarReglasExcepxionCuotas");
            _objLog.CrearArchivolog("[INICIO][VALIDAR REGLAS DE EXCEPCION DE CUOTAS]", null, null);
            try
            {
                cuotaInicialBrms = Funciones.CheckDbl((Funciones.CheckDbl(hidMontoEquipoVenta) * porcenCuotaInicialComercialBRMS) / 100);
                _objLog.CrearArchivolog(string.Format("[ERROR][INICIATIVA -803][hidMontoEquipoVenta][{0}]", hidMontoEquipoVenta), null, null);
                _objLog.CrearArchivolog(string.Format("[ERROR][INICIATIVA -803][porcenCuotaInicialComercialBRMS][{0}]", porcenCuotaInicialComercialBRMS), null, null);
                _objLog.CrearArchivolog(string.Format("[ERROR][INICIATIVA -803][CuotaInicialComercial][{0}]", CuotaInicialComercial), null, null);
                _objLog.CrearArchivolog(string.Format("[ERROR][INICIATIVA -803][cuotaInicialBrms][{0}]", cuotaInicialBrms), null, null);
                if (CuotaInicialComercial != cuotaInicialBrms)
                {
                    objResponse.Boleano = false;
                }
                _objLog.CrearArchivolog(string.Format("[ERROR][INICIATIVA -803][objResponse.Boleano][{0}]", objResponse.Boleano), null, null);
            }
            catch (Exception ex)
            {
                objResponse.Cadena = "";
                _objLog.CrearArchivolog("[ERROR][ValidarCuotasExcep]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][ValidarCuotasExcep]", null, null);
            }
            _objLog.CrearArchivolog("[Fin][INICIO VALIDAR REGLAS DE EXCEPCION DE CUOTAS]", null, null);
            return objResponse;
        }
        //INICIATIVA -803 FIN

        public static Int64 validaSolPendientePagoMig(string codTipoDocumento, string nroDocumento, string listaTelefono)
        {
            Int64 nroSEC = 0;
            var oBl = new BLConsumer();
            String msgRptaMigra;
            bool flgRptaMigra;

            try
            {
                string[] arrTelefono_ingresado = listaTelefono.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                for (int j = 0; j < arrTelefono_ingresado.Count(); j++)
                {
                    msgRptaMigra = "";
                    flgRptaMigra = true;
                    nroSEC = oBl.validaSolPendientePagoMig(codTipoDocumento, nroDocumento, arrTelefono_ingresado[j].ToString(), out flgRptaMigra, out msgRptaMigra);
                    if (nroSEC > 0) break;
                }
            }
            catch (Exception)
            {
                nroSEC = 0;
            }

            return nroSEC;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validarSECRecurrente(string strTipoDocumento, string strNroDocumento, string strOferta, string strCasoEspecial,
                                                                string strCadenaDetalle, string strFlujo, string strTipoOperacion, string listaTelefono)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            try
            {
                string strCadena = string.Empty;
                string flgReingreso = string.Empty;
                string[] arrCadenaDetalle = strCadenaDetalle.Split('|');

                foreach (string item in arrCadenaDetalle)
                {
                    if (!string.IsNullOrEmpty(item))
                    {
                        string[] arrDetalle = item.Split(';');
                        string strSubsidio = CalificarSubsidio(Funciones.CheckDbl(arrDetalle[7]), Funciones.CheckDbl(arrDetalle[8]));

                        strCadena = string.Format("{0}|{1};{2};{3};{4};{5};{6};{7};{8};{9};{10}", strCadena, arrDetalle[1], arrDetalle[2], arrDetalle[3],
                                    arrDetalle[4], arrDetalle[5], arrDetalle[11], arrDetalle[6], strSubsidio, arrDetalle[9], arrDetalle[10]);
                    }
                }

                int cantidad = 0;
                string[] arrCadena = strCadena.Split('|');
                strCadena = string.Empty;
                foreach (string item in arrCadena)
                {
                    if (!string.IsNullOrEmpty(item))
                    {
                        if (strCadena.IndexOf(item) == -1)
                        {
                            cantidad = 0;
                            foreach (string item1 in arrCadena)
                            {
                                if (item == item1)
                                    cantidad += 1;
                            }
                            if (strCadena == string.Empty)
                                strCadena = string.Format("{0};{1}", item, cantidad);
                            else
                                strCadena = string.Format("{0}|{1};{2}", strCadena, item, cantidad);
                        }
                    }
                }

                Int64 nroSec = 0;
                string flgMig = "0";
                objResponse.Cadena = (new BLGeneral_II()).ValidarSECRecurrente(strTipoDocumento, strNroDocumento, strOferta, strCasoEspecial, strCadena, ref flgReingreso);
                objResponse.Cadena = strFlujo + "|" + objResponse.Cadena + "|" + flgReingreso + "|" + flgMig;
                if (flgReingreso == "1")
                    return objResponse;

                if (strTipoOperacion == "2")
                {
                    nroSec = validaSolPendientePagoMig(strTipoDocumento, strNroDocumento, listaTelefono);
                    if (nroSec > 0)
                    {
                        flgMig = "1";
                    }
                    objResponse.Cadena = nroSec.ToString();
                    objResponse.Cadena = strFlujo + "|" + objResponse.Cadena + "|" + flgReingreso + "|" + flgMig;
                }
            }
            catch (Exception ex)
            {
                objResponse.Cadena = strFlujo;
                CrearLogStatic(strNroDocumento).CrearArchivolog("[ERROR][validarSECRecurrente]", null, ex);
            }
            return objResponse;
        }


        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validarNroTelefono(string nroDocumento, string listaTelefono, string strPortabilidad, string strTipoOperacion, string cadenaConsultaPrevia)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEItemMensaje objMensaje = new BEItemMensaje();
            List<BEValidalineaPorta> ListLineaPorta = new List<BEValidalineaPorta>();

            string[] arrConsultaPrevia = cadenaConsultaPrevia.Split('|');
            string TipoProductoActual = arrConsultaPrevia[4].ToString();

            CrearLogStatic(nroDocumento).CrearArchivolog(" METODO VALIDACION [validarNroTelefono]" + "INICIO PROY-140335 IDEA-140307", null, null);
            CrearLogStatic(nroDocumento).CrearArchivolog(" [validarNroTelefono] - INPUT [listaTelefono] => " + listaTelefono, null, null);
            CrearLogStatic(nroDocumento).CrearArchivolog(" [validarNroTelefono] - INPUT [strPortabilidad] => " + strPortabilidad, null, null);
            CrearLogStatic(nroDocumento).CrearArchivolog(" [validarNroTelefono] - INPUT [strTipoOperacion] => " + strTipoOperacion, null, null);
            CrearLogStatic(nroDocumento).CrearArchivolog(" [validarNroTelefono] - INPUT [TipoProductoActual] => " + TipoProductoActual, null, null);
            try
            {
                if (strPortabilidad == "S")
                {
                    CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ ReadKeySettings.Key_FlagAnulacion] => " + Funciones.CheckStr(ReadKeySettings.Key_FlagAnulacion), null, null);

                    if (TipoProductoActual.Equals(Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"])) || TipoProductoActual.Equals(Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"])))
                    {
                        string[] arrTelefono = listaTelefono.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                        if (arrTelefono != null)
                        {
                            ListLineaPorta = BLPortabilidad.ValidarDisponibilidadLinea(arrTelefono);
                            foreach (BEValidalineaPorta dto in ListLineaPorta)
                            {
                                CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ dto.CodigoRespuesta] => " + dto.CodigoRespuesta, null, null);
                                CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ dto.EstadoAnulacion] => " + dto.EstadoAnulacion, null, null);
                                CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ dto.MsjRespuesta] => " + dto.MsjRespuesta, null, null);
                                CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ dto.SolinCodigo] => " + dto.SolinCodigo, null, null);
                                CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ dto.StrLinea] => " + dto.StrLinea, null, null);
                                if (dto.MsjRespuesta.Equals("NO ANULA"))
                                {
                                    objResponse.Error = true;
                                    objResponse.Mensaje = string.Format(ConfigurationManager.AppSettings["consMsjErrorTelefonoPortaIII"], dto.SolinCodigo.ToString());
                                    CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ objResponse.Error] => " + objResponse.Error, null, null);
                                    CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ objResponse.Error] => " + objResponse.Mensaje, null, null);
                                }
                                if (ReadKeySettings.Key_FlagAnulacion.Equals("1") && ValidacionCodigos(dto.strCodigoSinergia))
                                {
                                    objResponse.Error = true;
                                    objResponse.Mensaje = string.Format(ConfigurationManager.AppSettings["consMsjErrorTelefonoPortaIII"], dto.SolinCodigo.ToString());
                                    CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ objResponse.Error] => " + objResponse.Error, null, null);
                                    CrearLogStatic(nroDocumento).CrearArchivolog(" INICIO [PROY-140335 IDEA-140307] [ objResponse.Error] => " + objResponse.Mensaje, null, null);
                                }
                            }
                            if (objResponse.Error == false)
                            {
                                HttpContext.Current.Session["validarNroTelefonoPorta"] = ListLineaPorta.Where(a => a.MsjRespuesta == "ANULA").ToList();
                            }
                        }

                    }
                    else
                    {
                        string[] arrTelefono = listaTelefono.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                        objMensaje = WS.BLPortabilidadWS.ValidarNroPortabilidad(arrTelefono);
                        objResponse.Error = !objMensaje.exito;
                        objResponse.Mensaje = objMensaje.mensajeSistema;
                    }
                }
                CrearLogStatic(nroDocumento).CrearArchivolog(" METODO VALIDACION [validarNroTelefono] => " + "INICIO PROY-140335 IDEA-140307", null, null);
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorTelefonoPortaII"].ToString();
                CrearLogStatic(nroDocumento).CrearArchivolog("[ERROR][validaTelefonoPorta]", null, ex);
            }
            return objResponse;
        }

        /// <summary>
        /// validate_migra_pre_post [Promoción Bono Migración a Postpago-Campaña: CLARO CONEXIÓN 29 MIGRA. (NP -16197)]
        /// </summary>
        /// <param name="strNroDoc">Numero de documento del cliente</param>
        /// <param name="strTipoDoc">Tipo de documento del cliente</param>
        /// <param name="strTipoOperacion">Tipo de operación: MIGRACIÓN</param>
        /// <param name="strTipoOferta">Oferta: MASIVO</param>
        /// <param name="strtipoModalidad">Modalidad de venta: CHIP SUELTO</param>
        /// <param name="strIdCampan">CLARO CONEXIÓN 29 MIGRA</param>
        /// <param name="strNroTelf">Nro de linea del cliente</param>
        /// <param name="strMensaje">Mensaje de Repuesta</param>
        /// <returns></returns>
        private static int validate_migra_pre_post(string strNroDoc, string strTipoDoc, string strTipoOperacion, string strTipoOferta,
          string strtipoModalidad, string strIdCampan, string strNroTelf, out string strMensaje)
        {
            int intCodigo = 0;
            strMensaje = "";

            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEItemMensaje objMensaje = new BEItemMensaje();


            try
            {
                GeneradorLog objLog = new GeneradorLog(CurrentUsers, strNroDoc, null, "WEB");
                objLog.CrearArchivolog("[Inicio][validate_migra_pre_post]", null, null);
                BLGeneral objConsulta = new BLGeneral();
                Int64 intCodParam = Convert.ToInt64(ConfigurationManager.AppSettings["CodigoParamMigraCamapana"]);
                List<BEParametro> lstParametro = objConsulta.ListaParametros(intCodParam);
                objLog.CrearArchivolog("[lstParametro] Cantidad: " + lstParametro.Count.ToString(), null, null);
                if (lstParametro.Count > 0)
                {
                    string strParaValor = "";
                    foreach (BEParametro obj in lstParametro) strParaValor = obj.Valor;
                    objLog.CrearArchivolog("[strParaValor] : " + strParaValor.ToString(), null, null);
                    string[] ParamValors = strParaValor.Split(';');
                    /*Condiciones de Venta Codigo*/
                    string strConVent = ParamValors[0];
                    string[] ValuesConVent = strConVent.Split('|');
                    ValuesConVent = ValuesConVent.Where(x => !string.IsNullOrEmpty(x)).ToArray();
                    /*Campañas Codigo*/
                    string strCamp = ParamValors[1];
                    string[] ValuesCampVent = strCamp.Split('|');
                    ValuesCampVent = ValuesCampVent.Where(x => !string.IsNullOrEmpty(x)).ToArray();
                    objLog.CrearArchivolog("[strTipoOperacion] : " + strTipoOperacion.ToString(), null, null);
                    objLog.CrearArchivolog("[strTipoOferta] : " + strTipoOferta.ToString(), null, null);
                    objLog.CrearArchivolog("[tipoModalidad] : " + strtipoModalidad.ToString(), null, null);
                    /*MIGRACION;MASIVO;CHIP SUELTO*/
                    if (strTipoOperacion == ValuesConVent[0] && strTipoOferta == ValuesConVent[1] && strtipoModalidad == ValuesConVent[2])
                    {
                        /*VALIDAR CAMPAÑA CLARO CONEXIÓN 29 MIGRA*/
                        bool bolExitCamp = Array.Exists(ValuesCampVent, element => element == strIdCampan);
                        if (bolExitCamp)
                        {
                            /*WEB SERVICE ConsultaMigraCampanaWS*/
                            BWMigraCampana objMigraCampana = new BWMigraCampana();
                            objMensaje = new BEItemMensaje(false);
                            objLog.CrearArchivolog("[ConsultaMigraCampana]", null, null);
                            objLog.CrearArchivolog("[NroDoc]", strNroDoc.ToString(), null);
                            objLog.CrearArchivolog("[tipoDocumento]", strTipoDoc.ToString(), null);
                            BEItemGenerico objAudit = new BEItemGenerico();
                            objAudit.Codigo = strNroDoc + "_" + DateTime.Now.ToString("yyyyMMddhhmmss");
                            objLog.CrearArchivolog("[Codigo]", objAudit.Codigo.ToString(), null);
                            objAudit.Codigo2 = CurrentUsers;
                            objLog.CrearArchivolog("[Codigo2]", objAudit.Codigo2.ToString(), null);
                            objAudit.Codigo3 = ConfigurationManager.AppSettings["CodigoAplicacion"].ToString();
                            objAudit.Descripcion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                            objAudit.Descripcion2 = CurrentTerminal; //PROY-24740
                            objLog.CrearArchivolog("[Ini ValidarPagoFactura]", null, null);

                            string strLineaDeuda = "";

                            objMensaje = objMigraCampana.ValidarPagoFactura(strTipoDoc, strNroDoc, objAudit, out strLineaDeuda);
                            objLog.CrearArchivolog("[Fin ValidarPagoFactura]", null, null);
                            objLog.CrearArchivolog("[strLineaDeuda]" + strLineaDeuda, null, null);

                            /*
                            * 1  = Accede a la promocion
                            * 0  = Sin acceder a la promocion
                            */
                            objLog.CrearArchivolog("[objMensaje.exito]", Funciones.CheckStr(objMensaje.exito), null);
                            objLog.CrearArchivolog("[objMensaje.codigo]", Funciones.CheckStr(objMensaje.codigo), null);
                            objLog.CrearArchivolog("[objMensaje.descripcion]", Funciones.CheckStr(objMensaje.descripcion), null);
                            string strMsgMigra = Funciones.CheckStr(ConfigurationManager.AppSettings["Msg_MigraCampana"]);
                            switch (Funciones.CheckStr(objMensaje.codigo).Trim())
                            {
                                case "0":
                                    intCodigo = 0;
                                    break;
                                case "1":
                                    objLog.CrearArchivolog("[objMensaje.descripcion]", Funciones.CheckStr(objMensaje.descripcion), null);
                                    objLog.CrearArchivolog("[objMensaje.mensajeSistema]", Funciones.CheckStr(objMensaje.mensajeSistema), null);
                                    objResponse.Error = true;


                                    objResponse.Mensaje = string.Format(strMsgMigra, strLineaDeuda);
                                    intCodigo = 1;
                                    strMensaje = string.Format(strMsgMigra, strLineaDeuda);
                                    break;
                                default:
                                    objResponse.Error = true;
                                    objResponse.Mensaje = Funciones.CheckStr(objMensaje.descripcion);
                                    objLog.CrearArchivolog("[objMensaje.descripcion]", Funciones.CheckStr(objMensaje.descripcion), null);
                                    objLog.CrearArchivolog("[objMensaje.mensajeSistema]", Funciones.CheckStr(objMensaje.mensajeSistema), null);
                                    CrearLogStatic(strNroDoc).CrearArchivolog("ConsultaMigraCampanaWSService-Error: " + objResponse.Mensaje, null, null);
                                    intCodigo = 1;
                                    strMensaje = objMensaje.descripcion;
                                    break;
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                intCodigo = 1;
                strMensaje = ex.Message;
            }
            return intCodigo;
        }

        //INC000001290175-INICIO
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validarNroTelefonoXCliente(string codTipoDocumento, string tipoDocumento, string nroDocumento,
          string listaTelefono, string strPortabilidad, string strTipoOperacion, string strTipoOferta, string tipoModalidad, string strIdCampan)
        {
            //INC000001290175-FIN
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEItemMensaje objMensaje = new BEItemMensaje();
            string listaLineas = string.Empty; /*INC-SMS_PORTA*/

            try
            {
                GeneradorLog objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
                objLog.CrearArchivolog("[Inicio][validarNroTelefonoXCliente]", null, null);

                /*INC-SMS_PORTA_INI*/
                if (!string.IsNullOrEmpty(listaTelefono))
                {
                    listaLineas = listaTelefono.Replace('|', ';');
                    if (string.Equals(listaLineas.Substring(0, 1), ";"))
                        listaLineas = listaLineas.Substring(1, (listaLineas.Length - 1));

                    objLog.CrearArchivolog(String.Format("{0} : {1}", "[Session][listTelefono]", listaLineas), string.Empty, null);

                    HttpContext.Current.Session["listTelefono"] = listaLineas;
                }
                /*INC-SMS_PORTA_FIN*/

                if (strPortabilidad == "S")
                {
                    objResponse.Error = false;
                    objResponse.Mensaje = "exito";
                    CrearLogStatic(nroDocumento).CrearArchivolog(" Agregar Carrito - flujo de Portabilidad no valida datos", null, null);
                }
                else
                {
                    CrearLogStatic(nroDocumento).CrearArchivolog(" Agregar Carrito - flujo de Migración valida datos", null, null);
                    string[] arrTelefono_ingresado = listaTelefono.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);//Ingesa el cliente
                    for (int j = 0; j < arrTelefono_ingresado.Count(); j++)
                    {
                        objResponse.Error = false;
                        objResponse.Mensaje = "exito";
                        String mensajeError = "";
                        String mensajeAntiguedad = "";
                        CrearLogStatic(nroDocumento).CrearArchivolog("***************************************************]", null, null);
                        // VALIDACION DE LA LINEA EN WS QUE NO SEA POSTPAGO 
                        CrearLogStatic(nroDocumento).CrearArchivolog("Inicio BWDatosClienteService.ConsultaDatosCliente]", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Servicio DatosClienteWS Método WS leerDatosPostPagoXMSISDN", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("URLconsDatosCliente : " + ConfigurationManager.AppSettings["consDatosCliente"], null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("ConsUsuario : " + ConfigurationManager.AppSettings["consUserMigracion"], null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("ConsPass : " + ConfigurationManager.AppSettings["consPassMigracion"], null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("aplicacionConsumidora : " + ConfigurationManager.AppSettings["ConstSistemaConsumer"], null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("idTransaccionConsumidora : " + DateTime.Now.ToString("yyyyMMddHHmmss"), null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("msisdn : " + arrTelefono_ingresado[j].ToString(), null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Ejecuta Servicio DatosClienteWS Método leerDatosPostPagoXMSISDN", null, null);
                        BWDatosClienteService WSPostPago = new BWDatosClienteService();
                        BEItemGenerico itemPostPago = WSPostPago.ConsultaDatosCliente(arrTelefono_ingresado[j].ToString(), ref mensajeError);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Respuesta Servicio DatosClienteWS Método WS leerDatosPostPagoXMSISDN : " + mensajeError, null, null);
                        if (mensajeError == "PostPago")
                        {
                            if (itemPostPago.Descripcion2 == "Activo")
                            {
                                objResponse.Error = true;
                                objResponse.Mensaje = "Error el número de teléfono " + arrTelefono_ingresado[j].ToString() + " del cliente es PostPago no puede realizar migración de la línea " + "|" + (j + 1).ToString();
                                CrearLogStatic(nroDocumento).CrearArchivolog("BWDatosClienteService-ConsultaDatosCliente es PostPago no puede realizar migración de la línea : " + objResponse.Mensaje, null, null);
                                break;
                            };
                        }
                        else if (mensajeError != "No PostPago")
                        {
                            objResponse.Error = true;
                            objResponse.Mensaje = "Error de acceso al WS verificar ";
                            CrearLogStatic(nroDocumento).CrearArchivolog("BWDatosClienteService-error de acceso al WS verificar : " + objResponse.Mensaje, null, null);
                            break;
                        }
                        CrearLogStatic(nroDocumento).CrearArchivolog("BWDatosClienteService-ConsultaDatosCliente no es PostPago continuar con la Migración éxito] " + arrTelefono_ingresado[j].ToString() + " --- " + objResponse.Mensaje, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Fin BWDatosClienteService.ConsultaDatosCliente : " + objResponse.Mensaje, null, null);
                        mensajeError = "";
                        mensajeAntiguedad = "";

                        //INI INICIATIVA-219 R3
                        BLDatosCBIO oDatos = new BLDatosCBIO();
                        Hashtable oTable = new Hashtable();
                        BEAuditoriaRequest oAuditoria = new BEAuditoriaRequest();

                        oTable.Add("idTransaccion", DateTime.Now.ToString("yyyyMMddHHmmssfff"));
                        oTable.Add("msgId", DateTime.Now.ToString("yyyyMMddHHmmssfff"));
                        oTable.Add("timestamp", DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ"));
                        oTable.Add("userId", CurrentUsers);
                        oAuditoria.urlRest = "constUrlDatosLinea";
                        oAuditoria.urlTimeOut_Rest = "constTimeOutDatosLinea";
                        oAuditoria.table = oTable;

                        BEItemGenerico itemPostPagoCBIO = oDatos.consultaDatosLinea(oAuditoria, Funciones.CheckStr(arrTelefono_ingresado[j]), ref mensajeError);

                        CrearLogStatic(nroDocumento).CrearArchivolog("Respuesta Servicio claro-post-consultapostpago Metodo datosLinea : " + mensajeError, null, null);
                        if (mensajeError == "PostPago")
                        {
                            if (itemPostPagoCBIO.Descripcion2 == "Activo" || itemPostPagoCBIO.Descripcion2 == "Suspendido")
                            {
                                objResponse.Error = true;
                                objResponse.Mensaje = "Error el n?mero de tel?fono " + arrTelefono_ingresado[j].ToString() + " del cliente es PostPago no puede realizar migraci?n de la l?nea " + "|" + (j + 1).ToString();
                                CrearLogStatic(nroDocumento).CrearArchivolog("claro-post-consultapostpago-datosLinea es PostPago no puede realizar migraci?n de la l?nea : " + objResponse.Mensaje, null, null);
                                break;
                            };
                        }
                        else if (mensajeError != "No PostPago")
                        {
                            objResponse.Error = true;
                            objResponse.Mensaje = "Error de acceso al WS claro-post-consultapostpago-datosLinea";
                            CrearLogStatic(nroDocumento).CrearArchivolog("claro-post-consultapostpago-datosLinea-error de acceso al WS verificar : " + objResponse.Mensaje, null, null);
                            break;
                        }
                        CrearLogStatic(nroDocumento).CrearArchivolog("claro-post-consultapostpago-datosLinea no es PostPago continuar con la Migracion exito] " + arrTelefono_ingresado[j].ToString() + " --- " + objResponse.Mensaje, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Fin claro-post-consultapostpago-datosLinea : " + objResponse.Mensaje, null, null);
                        mensajeError = string.Empty;
                        mensajeAntiguedad = string.Empty;
                        //FIN INICIATIVA-219 R3

                        CrearLogStatic(nroDocumento).CrearArchivolog("Inicio BWPrepago-DatosPrepagoNegocios]", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Sevicio ConsultaDatosPrepagoWS Método leerDatosPrepago", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("URLconsRutaWSPrepago : " + ConfigurationManager.AppSettings["consRutaWSPrepago"], null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("nroTelefono : " + arrTelefono_ingresado[j].ToString(), null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Ejecuta Sevicio ConsultaDatosPrepagoWS Método leerDatosPrepago", null, null);
                        BWPrepago wsprepago = new BWPrepago();
                        BEItemGenerico item = wsprepago.DatosPrepagoNegocios(arrTelefono_ingresado[j].ToString(), ref mensajeError, ref mensajeAntiguedad);
                        // VALIDACION DE LA LINEA EN LA IN SI ES PREPAGO
                        CrearLogStatic(nroDocumento).CrearArchivolog("Respuesta método leerDatosPrepago : " + mensajeError, null, null);
                        if (mensajeError != "Prepago" && mensajeError != "Control")
                        {
                            objResponse.Error = true;
                            objResponse.Mensaje = "Error el número de teléfono " + arrTelefono_ingresado[j].ToString() + " del cliente no es Prepago ni PostPago, por favor verificar número " + "|" + (j + 1).ToString();
                            CrearLogStatic(nroDocumento).CrearArchivolog("BWPrepago-DatosPrepagoNegocios no es Prepago : " + objResponse.Mensaje, null, null);
                            break;
                        }
                        else if (mensajeError == "Prepago")
                        {
                            //Validacion solo linea prepago

                            /*CNH 2016-05-24 INI*/
                            if (Funciones.CheckStr(strIdCampan).Length > 0) //Solo devolvera una campaña si es migracion masivo chipsuelto
                            {

                                string strNroLinea = string.Empty;
                                string strMsgAlert = "";
                                int intValidar = 0;
                                objLog.CrearArchivolog("[Ini][validate_migra_pre_post]", null, null);
                                intValidar = validate_migra_pre_post(nroDocumento, tipoDocumento, strTipoOperacion, strTipoOferta, tipoModalidad, strIdCampan, strNroLinea, out strMsgAlert);
                                objLog.CrearArchivolog("[Fin][validate_migra_pre_post]", null, null);
                                if (intValidar == 1)
                                {
                                    objResponse.Error = true;
                                    objResponse.Mensaje = strMsgAlert;
                                    return objResponse;
                                }
                            }
                            /*CNH 2016-05-24 FIN*/



                            if (item.Descripcion2 == "TRUE")
                            {
                                objResponse.Error = true;
                                objResponse.Mensaje = "Error. número de teléfono " + arrTelefono_ingresado[j].ToString() + " del cliente Prepago, por favor verificar estado de la línea" + "|" + (j + 1).ToString();
                                CrearLogStatic(nroDocumento).CrearArchivolog("BWPrepago-DatosPrepagoNegocios del cliente Prepago, por favor verificar estado de la línea : " + objResponse.Mensaje, null, null);
                                break;
                            }
                        }
                        CrearLogStatic(nroDocumento).CrearArchivolog("BWPrepago-DatosPrepagoNegocios es Prepago éxito  " + arrTelefono_ingresado[j].ToString() + " --- " + objResponse.Mensaje, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Fin BWPrepago-DatosPrepagoNegocios : " + objResponse.Mensaje, null, null);
                        // VALIDA EN CLARIFY PKG SI LA LINEA ES PREPAGO Y SI PERTENECE AL CLIENTE CON EL DNI
                        var oBl = new BLConsumer();
                        String mensaje;
                        String flagValida;

                        CrearLogStatic(nroDocumento).CrearArchivolog("Inicio ConsultaValidacionCliente BLConsumer DAConsumer] " + arrTelefono_ingresado[j].ToString(), null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("PKG PCK_CUSTOMER_CLFY.SP_VALIDATITULARIDAD", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("BD : BD_CLARIFY", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("P_TIPO_DOC : " + tipoDocumento, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("P_NUM_DOC : " + nroDocumento, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("P_PHONE : " + arrTelefono_ingresado[j].ToString(), null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("PKG PCK_CUSTOMER_CLFY.SP_VALIDATITULARIDAD", null, null);

                        bool flagOk = oBl.ConsultaValidacionCliente(tipoDocumento, nroDocumento, arrTelefono_ingresado[j].ToString(), out mensaje, out flagValida);

                        CrearLogStatic(nroDocumento).CrearArchivolog("Respuesta PKG PCK_CUSTOMER_CLFY.SP_VALIDATITULARIDAD : " + flagOk, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("mensaje : " + mensaje, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("flagValida : " + flagValida, null, null);

                        //LMA SD981186
                        if (mensaje == "OK")
                        {
                            objResponse.Mensaje = mensaje;
                            CrearLogStatic(nroDocumento).CrearArchivolog("ConsultaValidacionCliente flagOk : " + flagOk, null, null);
                            CrearLogStatic(nroDocumento).CrearArchivolog("ConsultaValidacionCliente RETURN : " + objResponse.Mensaje, null, null);
                        }
                        else
                        {
                            objResponse.Mensaje = mensaje;
                            objResponse.Error = true;
                            objResponse.Mensaje = "Error el número de teléfono " + arrTelefono_ingresado[j].ToString() + " no pertenece al cliente, por favor verificar número " + "|" + (j + 1).ToString();
                            CrearLogStatic(nroDocumento).CrearArchivolog("ConsultaValidacionCliente flagError : " + flagOk, null, null);
                            CrearLogStatic(nroDocumento).CrearArchivolog("ConsultaValidacionCliente RETURN : " + flagValida, null, null);
                            break;
                        }
                        CrearLogStatic(nroDocumento).CrearArchivolog("Fin ConsultaValidacionCliente BLConsumer DAConsumer : " + objResponse.Mensaje, null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("***************************************************", null, null);

                        String msgRptaMigra;
                        bool flgRptaMigra;
                        Int64 nroSec;
                        CrearLogStatic(nroDocumento).CrearArchivolog("***************************************************", null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("Inicio validación SEC pendiente de pago - Migracion: ", null, null);

                        nroSec = oBl.validaSolPendientePagoMig(codTipoDocumento, nroDocumento, arrTelefono_ingresado[j].ToString(), out flgRptaMigra, out msgRptaMigra);

                        if (!flgRptaMigra)
                        {
                            objResponse.Mensaje = string.Format(ConfigurationManager.AppSettings["consMsjErrorSolMigra"], nroSec);
                            objResponse.Error = !flgRptaMigra;
                            CrearLogStatic(nroDocumento).CrearArchivolog("Flag SEC pendiente de pago: " + !flgRptaMigra, null, null);
                            break;
                        }

                        CrearLogStatic(nroDocumento).CrearArchivolog("Fin validación SEC pendiente de pago - Migracion:" + objResponse.Mensaje.ToString(), null, null);
                        CrearLogStatic(nroDocumento).CrearArchivolog("***************************************************", null, null);
                    }
                }
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ex.Message;
            }
            return objResponse;
        }
        //PROY-29123 Venta en Cuotas INICIO
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ConsultarInformacionClienteBRMS(string nroDocumento, string nroOperacionBuro, string strDatos, string prodFacturar) //PROY-140743
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            StringBuilder sbReglasCreditos = new StringBuilder();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");

            try
            {
                _objLog.CrearArchivolog("[Inicio][ConsultarInformacionClienteBRMS]", null, null);

                BEClienteCuenta objClienteConsulta = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];
                List<BEDireccionCliente> objDireccion = (List<BEDireccionCliente>)HttpContext.Current.Session["objDireccion" + nroDocumento];

                objClienteConsulta.nroOperacionBuro = nroOperacionBuro;
                //EMMH I
                List<BEParametro> lstBEParametroEvaluacionProactiva = new List<BEParametro>();
                lstBEParametroEvaluacionProactiva = (List<BEParametro>)HttpContext.Current.Session["ListaParametrosEP"];
                objClienteConsulta.totalplanes = Convert.ToInt32(lstBEParametroEvaluacionProactiva.Where(p => p.Valor1 == "ConstTotalPlanes").SingleOrDefault().Valor);// PROY-30748 - TOTAL PLANES
                //objClienteConsulta.Deuda = ConfigurationManager.AppSettings["constDeudaEvalBRMS"].ToString(); // PROY-30748 - DEUDA
                //objClienteConsulta.totalplanes = Funciones.CheckInt(ConfigurationManager.AppSettings["ConstTotalPlanes"].ToString());// PROY-30748 - TOTAL PLANES
                //EMMH F

                //PROY-31948 INI
                BECuota objCuotaOAC = new BECuota();
                BECuota objCuotaPVU = new BECuota();

                string strTipoDocumento = objClienteConsulta.tipoDoc;
                string strNroDocumento = objClienteConsulta.nroDoc;
                string strNroLinea = string.Empty;

                objCuotaOAC = (BECuota)HttpContext.Current.Session["objCuotaOAC"];
                objCuotaPVU = (BECuota)HttpContext.Current.Session["objCuotaPVU"];

                if (objCuotaOAC == null && objCuotaPVU == null)
                {
                    WebComunes.ConsultarCuotasPendientes(strTipoDocumento, strNroDocumento, strNroLinea, ref objCuotaOAC, ref objCuotaPVU);//3ra llamada
                }
                //PROY-31948 FIN                

                //PROY-140579 INICIO
                HttpContext.Current.Session["objClienteDI"] = null;
                string objClienteDI = strTipoDocumento + "|" + strNroDocumento + "|" + "Evaluar Cliente";
                HttpContext.Current.Session["objClienteDI"] = objClienteDI;
                //PROY-140579 FIN

                BEOfrecimiento obj = (new BLReglaCrediticia()).EvaluarCliente(objClienteConsulta, objDireccion, strDatos, objCuotaOAC, objCuotaPVU, Funciones.CheckStr(prodFacturar));////PROY-31948//PROY-140743

                sbReglasCreditos.Append(obj.MaximoCuotas);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.PrecioEquipoMaximo);
                sbReglasCreditos.Append("#");
                sbReglasCreditos.Append(obj.MostrarMensaje);

                objResponse.Cadena = sbReglasCreditos.ToString();
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjConsultarReglasCrediticia"].ToString();
                _objLog.CrearArchivolog("[ERROR][ConsultarInformacionClienteBRMS]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][ConsultarInformacionClienteBRMS][objResponse.Cadena]", objResponse.Cadena, null);
                _objLog.CrearArchivolog("[Fin][ConsultarInformacionClienteBRMS]", null, null);
            }

            return objResponse;
        }
        //PROY-29123 Venta en Cuotas FIN

        #endregion [WebMethod]

        #region [Funciones Grabar]

        //PROY-25906 CNH
        private void update_cliente_clarify(BEDatoPersonaClarify objCliente)
        {
            GeneradorLog _objLog = null;

            BWConsultaClienteUnificado objBWConsultaClienteUnificado = null;

            try
            {
                bool bolExise = false;

                _objLog = new GeneradorLog(CurrentUsers, objCliente.NroDocumento, null, "WEB");
                _objLog.CrearArchivolog("[Inicio][update_cliente_clarify-Metodo]", null, null);

                string strModoWS = Funciones.CheckStr(ConfigurationManager.AppSettings["constModoInsertWs"]);

                _objLog.CrearArchivolog("[strModoWS]=>" + strModoWS, null, null);
                _objLog.CrearArchivolog("[strOrigen]=>" + objCliente.TipoValidacion, null, null);

                int intTimeOutWS = 0;
                if (HttpContext.Current.Session["Usuario"] != null)
                {
                    BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                    intTimeOutWS = Funciones.CheckInt(objUsuario.TimeOutServicio);
                }
                else
                {
                    intTimeOutWS = Funciones.CheckInt(ConfigurationManager.AppSettings["TimeOut_ConsultaClienteUnificadoWS"]);
                }

                _objLog.CrearArchivolog("[intTimeOutWS]=>" + intTimeOutWS.ToString(), null, null);

                BEItemMensaje objMensaje = new BEItemMensaje(false);
                objBWConsultaClienteUnificado = new BWConsultaClienteUnificado(intTimeOutWS);

                BEItemGenerico objAudit = new BEItemGenerico();
                objAudit.Codigo = hidNroDocumento.Value + "_" + DateTime.Now.ToString("yyyyMMddhhmmss");
                objAudit.Codigo2 = CurrentUsers;
                objAudit.Descripcion = Funciones.CheckStr(ConfigurationManager.AppSettings["constNombreAplicacion"]);
                objAudit.Descripcion2 = CurrentTerminal;

                _objLog.CrearArchivolog("[objAudit.Codigo]=>" + Funciones.CheckStr(objAudit.Codigo), null, null);
                _objLog.CrearArchivolog("[objAudit.Codigo2]=>" + Funciones.CheckStr(objAudit.Codigo2), null, null);
                _objLog.CrearArchivolog("[objAudit.Descripcion]=>" + Funciones.CheckStr(objAudit.Descripcion), null, null);
                _objLog.CrearArchivolog("[objAudit.Descripcion2]=>" + Funciones.CheckStr(objAudit.Descripcion2), null, null);

                _objLog.CrearArchivolog("[Inicio][RegistrarDatoCliente]", null, null);
                objMensaje = objBWConsultaClienteUnificado.RegistrarDatoCliente(objCliente, strModoWS, objAudit);
                _objLog.CrearArchivolog("[Fin][RegistrarDatoCliente]", null, null);

                _objLog.CrearArchivolog("[objMensaje.codigo]=>" + Funciones.CheckStr(objMensaje.codigo), null, null);
                _objLog.CrearArchivolog("[objMensaje.descripcion]=>" + Funciones.CheckStr(objMensaje.descripcion), null, null);
                _objLog.CrearArchivolog("[objMensaje.mensajeCliente]=>" + Funciones.CheckStr(objMensaje.mensajeCliente), null, null);
                _objLog.CrearArchivolog("[objMensaje.mensajeSistema]=>" + Funciones.CheckStr(objMensaje.mensajeSistema), null, null);

                if (objMensaje.codigo != "0")
                    bolExise = false;
                else
                    bolExise = true;

                _objLog.CrearArchivolog("[Final][update_cliente_clarify-Metodo]", null, null);

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog("[Final][update_cliente_clarify-Exception]=>" + ex.Message, null, null);
            }
            finally
            {
            }
        }

        private static string obtener_tipo_doc_clarify(string strTipoDocConsumer)
        {
            string strReturnDato = "";
            string strTipoConfig = ReadKeySettings.Key_codigoDocClienUNI; //PROY-31636
            string[] strTipoDocumento = strTipoConfig.Split('|');

            foreach (string strTipo in strTipoDocumento)
            {
                string[] strTipo_deta = strTipo.Split(',');
                if (strTipo_deta[0] == strTipoDocConsumer)
                {
                    strReturnDato = strTipo_deta[1];
                    break;
                }
            }

            return strReturnDato;
        }

        //INI: PROY-BLACKOUT        
        public bool blackOutRentaAdelantada()
        {
            string keyLog = string.Format("{0}|{1}|{2}", hidNroDocumento.Value, "PROY-BLACKOUT", "blackOutRentaAdelantada()");
            try
            {
                CrearLogStatic(keyLog).CrearArchivolog("[INFO]-", "SE INICIO EL METODO", null);
                CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "AppSettings.consFlagBlackOut => "), " " + AppSettings.consFlagBlackOut.ToString(), null);
                CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "hidNTienePortabilidadValues => "), " " + Funciones.CheckStr(hidNTienePortabilidadValues.Value.ToString()), null);
                if (AppSettings.consFlagBlackOut.Equals(1) && hidNTienePortabilidadValues.Value == "S")
                {
                    CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "RENTA[oVistaEvaluacion.oGarantia] => "), " " + ((BEClienteCuenta)Session["objCliente" + hidNroDocumento.Value]).oVistaEvaluacion.oGarantia, null);
                    if (Session["objCliente" + hidNroDocumento.Value] != null)
                    {
                        var garantias = ((BEClienteCuenta)Session["objCliente" + hidNroDocumento.Value]).oVistaEvaluacion.oGarantia;
                        if (garantias != null && garantias.Count > 0 && garantias.Where(w => w.importe > 0.00D).Count() > 0)
                        {
                            hidnMensajeValue.Value = AppSettings.consMensajeEvaluacionCACBlackOut;
                            CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "AppSettings.consMensajeEvaluacionCACBlackOut => "), " " + AppSettings.consMensajeEvaluacionCACBlackOut.ToString(), null);
                            CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "RENTA ADELANTADA => "), " SI HAY RENTA ADELANTADA", null);
                            CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "RESULTADO => "), " false", null);
                            return false;
                        }
                        else
                        {
                            CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "RENTA ADELANTADA => "), " NO HAY RENTA ADELANTADA", null);
                            CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", "RESULTADO => "), " true", null);
                        }
                    }
                }
            }
            catch (Exception)
            {

                throw;
            }
            finally
            {
                CrearLogStatic(keyLog).CrearArchivolog("[INFO]-", "CULMINO ACCESO AL METODO blackOutRentaAdelantada", null);
            }
            return true;
        }
        //FIN: PROY-BLACKOUT

        public void Grabar()
        {
            string nroDocumento = hidNroDocumento.Value;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB"); //PROY-25906 CNH

            _objLog.CrearArchivolog(string.Format("{0} => {1}", ":::: Grabar() ::::", "Inicio"), null, null); //G.G.A - INC000002592222 - SOLUCION
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "nroDocumento", nroDocumento), null, null); //G.G.A - INC000002592222 - SOLUCION

            _objLog.CrearArchivolog(string.Format("{0} => {1}", "blnEvalCuotaTieneMontoInicial", Funciones.CheckStr(blnEvalCuotaTieneMontoInicial)), null, null); //G.G.A - INC000002592222 - SOLUCION
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "hidConcatPrimaServer.Value", Funciones.CheckStr(hidConcatPrimaServer.Value)), null, null); //G.G.A - INC000002592222 - SOLUCION
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "hidConcatCuotaServer.Value", Funciones.CheckStr(hidConcatCuotaServer.Value)), null, null); //G.G.A - INC000002592222 - SOLUCION


            blnSecTieneProteccionMovil = !string.IsNullOrEmpty(hidConcatPrimaServer.Value); //PROY-24724-IDEA-28174
            blnEvalCuotaTieneMontoInicial = !string.IsNullOrEmpty(hidConcatCuotaServer.Value); //PROY-30166-IDEA–38863

            _objLog.CrearArchivolog(string.Format("{0} => {1}", "blnSecTieneProteccionMovil", Funciones.CheckStr(blnSecTieneProteccionMovil)), null, null); //G.G.A - INC000002592222 - SOLUCION
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "blnEvalCuotaTieneMontoInicial", Funciones.CheckStr(blnEvalCuotaTieneMontoInicial)), null, null); //G.G.A - INC000002592222 - SOLUCION


            //INICIO PROY-140419 Autorizar Portabilidad sin PIN
            bool validacionSuperv = false;

            //PROY-140585 - FASE 2
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "validacionSuperv", Funciones.CheckStr(validacionSuperv)), null, null);
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "hidNTienePortabilidadValues", Funciones.CheckStr(hidNTienePortabilidadValues.Value)), null, null);
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "ReadKeySettings.key_flagSmsPortaSuperv", Funciones.CheckStr(ReadKeySettings.key_flagSmsPortaSuperv)), null, null);
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "hdnValidaSupervisor", Funciones.CheckStr(hdnValidaSupervisor.Value)), null, null);
            //PROY-140585 - FASE 2

            if (hidNTienePortabilidadValues.Value == "S")
            {
                // INI INC000004030766
                bool numeroValido = validarNumeroPortar();
                if (!numeroValido)
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "numeroValido", Funciones.CheckStr(numeroValido)), null, null);
                    _objLog.CrearArchivolog(string.Format("Debe ingresar un número de teléfono válido => {0}", Funciones.CheckStr(numeroValido)), null, null);
                    ScriptManager.RegisterStartupScript(this, this.GetType(), "ERROR", "alert('Debe ingresar un número de teléfono válido');", true);
                    return;
                }
                // FIN INC000004030766

                if (ReadKeySettings.key_flagSmsPortaSuperv == 1)
                {
                    if (hdnValidaSupervisor.Value == "S")
                    {
                        validacionSuperv = (bool)HttpContext.Current.Session["ValidacionSupervisor"];
                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "validacionSuperv", Funciones.CheckStr(validacionSuperv)), null, null); //PROY-140585 - FASE 2
                        if (validacionSuperv)
                        {
                            _objLog.CrearArchivolog("Se autorizó Portabilidad sin PIN", null, null);
                        }
                        else
                        {
                            _objLog.CrearArchivolog("No se autorizó Portabilidad sin PIN", null, null);
                            hidCodError.Value = "1";
                            hidnMensajeValue.Value = ReadKeySettings.key_SupervMsjNoCumpleValidacion;
                            return;
                        }
                    }
                    else
                    {
                        _objLog.CrearArchivolog("No se necesita autorizar Portabilidad sin PIN", null, null);
                    }
                }
                else
                {
                    _objLog.CrearArchivolog("No se requiere autorizar Portabilidad sin PIN por restricciones de la tabla Parametros", null, null);
                }
            }
            else
            {
                _objLog.CrearArchivolog("No se requiere autorizar Portabilidad sin PIN", null, null);
            }
            //FIN PROY-140419 Autorizar Portabilidad sin PIN

            try
            {
                _objLog.CrearArchivolog("Inicio Validar si cumplio validacion PIN", null, null);

                if (hidNTienePortabilidadValues.Value == "S")
                {
                    string strCodOferta = hidnTipoOfertaValue.Value;
                    string strCodCanal = hidnCanalValue.Value;
                    string strCodProducto = hidCodProducto.Value;

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strCodOferta", strCodOferta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strCodCanal", strCodCanal), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strCodProducto", strCodProducto), null, null);

                    //INICIO PROY-140419 Autorizar Portabilidad sin PIN
                    if (ReadKeySettings.key_flagSmsPortaSuperv == 1 &&
                        hdnValidaSupervisor.Value == "S")
                    {
                        _objLog.CrearArchivolog("Se solicitó autorizar Portabilidad sin PIN ", null, null);
                    }
                    else
                    { //FIN PROY-140419 Autorizar Portabilidad sin PIN

                        //PROY-140585 F2 INI
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][ActualizarTrazabilidadPinSMSPorta][Session(flagSMSPortabilidadXPDV)]", Funciones.CheckStr(HttpContext.Current.Session["flagSMSPortabilidadXPDV"])), null, null);
                        if (Funciones.CheckStr(HttpContext.Current.Session["flagSMSPortabilidadXPDV"]) == "1")
                        {
                            _objLog.CrearArchivolog("[PROY-140585 F2][Punto de Venta NO realiza envio SMS PORTABILIDAD]", null, null);
                        }
                        else
                        {

                            _objLog.CrearArchivolog("[PROY-140585 F2][Punto de Venta SI realiza envio SMS PORTABILIDAD]", null, null);//PROY-140585 F2 FIN

                            if (ReadKeySettings.key_flag_smsportabilidad == "1" &&
                                ReadKeySettings.key_OfertasPermitidas.IndexOf(strCodOferta) > -1 &&
                                ReadKeySettings.key_CanalesPermitidos.IndexOf(strCodCanal) > -1 &&
                                ReadKeySettings.key_ProductosPermitidos.IndexOf(strCodProducto) > -1)
                            {
                                string strCorrelativoPopup = hidCodigoValidador.Value;
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "strCorrelativoPopup", strCorrelativoPopup), null, null);

                                string strcodigoCorrelativoInicialSession = (string)HttpContext.Current.Session["codigoValidador"];
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "strcodigoCorrelativoInicialSession", Funciones.CheckStr(strcodigoCorrelativoInicialSession)), null, null);

                                Int64 codigoCorrelativoInicialIntSession = Funciones.CheckInt64(strcodigoCorrelativoInicialSession);
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "codigoCorrelativoInicialIntSession", Funciones.CheckStr(codigoCorrelativoInicialIntSession)), null, null);

                                string strCorrelativoFinalPopup = Funciones.Desencriptar(strCorrelativoPopup);
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "strCorrelativoFinalPopup", strCorrelativoFinalPopup), null, null);

                                Int64 codigoCorrelativoFinalIntPopup = Funciones.CheckInt64(strCorrelativoFinalPopup);
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "codigoCorrelativoFinalIntPopup", Funciones.CheckStr(codigoCorrelativoFinalIntPopup)), null, null);

                                if (codigoCorrelativoInicialIntSession > 0 && codigoCorrelativoFinalIntPopup > 0)
                                {
                                    if (codigoCorrelativoInicialIntSession == codigoCorrelativoFinalIntPopup)
                                    {
                                        _objLog.CrearArchivolog(string.Format("{0}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][CALL][validarLineasSMS]"), null, null);
                                        bool bValidaLineas = validarLineasSMS();
                                        _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][CALL][validarLineasSMS]", bValidaLineas.ToString()), null, null);
                                        if (bValidaLineas)
                                        {
                                            _objLog.CrearArchivolog("Cumplio validacion PIN SMS", null, null);
                                        }
                                        else
                                        {
                                            _objLog.CrearArchivolog("Cumplio NO validacion PIN SMS", null, null);
                                            hidCodError.Value = "1";
                                            hidnMensajeValue.Value = ReadKeySettings.key_MsjNoCumpleValidacion;
                                            return;
                                        }
                                    }
                                    else
                                    {
                                        _objLog.CrearArchivolog("Cumplio NO validacion PIN SMS", null, null);
                                        hidCodError.Value = "1";
                                        hidnMensajeValue.Value = ReadKeySettings.key_MsjNoCumpleValidacion;
                                        return;
                                    }
                                }
                                else
                                {
                                    _objLog.CrearArchivolog("Cumplio NO validacion PIN SMS", null, null);
                                    hidCodError.Value = "1";
                                    hidnMensajeValue.Value = ReadKeySettings.key_MsjNoCumpleValidacion;
                                    return;

                                }
                            }
                            else
                            {
                                _objLog.CrearArchivolog("No se requiere validacion de PIN por restriccion de tabla parametros", null, null);
                            }
                        }
                    } //PROY-140585 F2 FIN
                }
                else
                {
                    _objLog.CrearArchivolog("No se requiere validacion de PIN", null, null);
                }
            }
            catch (Exception ex)
            {

                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "ERROR", Funciones.CheckStr(ex.Message), Funciones.CheckStr(ex.StackTrace)), null, null);

            }

            //PROY-140457-DEBITO AUTOMATICO-INI
            bool validacionDebitoAutomatico = false;
            try
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "INICIO", "Validar restriccion de campañas en Afiliacion al debito automatico"), null, null);
                if (ReadKeySettings.Key_flagDebitoAuto == "1")
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "Validar tabla parametros", "Flag encendido"), null, null);
                    string strflagPortaR = Funciones.CheckStr(hidNTienePortabilidadValues.Value);
                    string stroperacionR = Funciones.CheckStr(hidTipoOperacion.Value);
                    string strOficinaR = Funciones.CheckStr(hidnOficinaActual.Value);
                    string strcodCanalR = Funciones.CheckStr(strOficinaR.Split(',')[2]);
                    string strcodProductoR = Funciones.CheckStr(hidCodProducto.Value);
                    string strmodalidadVentaR = Funciones.CheckStr(hidModalidadVenta.Value);
                    string strcampanasR = Funciones.CheckStr(ReadKeySettings.Key_campanasRestriccion);
                    string strdetalle = hidCadenaDetalle.Value;

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strflagPortaR", strflagPortaR), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "stroperacionR", stroperacionR), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strOficinaR", strOficinaR), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strcodCanalR", strcodCanalR), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strcodProductoR", strcodProductoR), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strmodalidadVentaR", strmodalidadVentaR), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "strcampanasR", strcampanasR), null, null);

                    bool validacionCamp = ValidarCampDebitoAutomatico(strcodCanalR, strcodProductoR, stroperacionR, strflagPortaR, strmodalidadVentaR, strcampanasR, strdetalle);
                    if (validacionCamp)
                    {
                        bool ValidacionRetail = CampanasComboRetail(strdetalle, strcampanasR);
                        if (!(ValidacionRetail) || HttpContext.Current.Session["InfDebitoAutomatico"] == null)
                        {
                            hidCodError.Value = "1";
                            hidnMensajeValue.Value = ReadKeySettings.Key_msjErrorFraudeDebito;
                            return;
                        }
                        else
                        {
                            validacionDebitoAutomatico = true;
                        }
                    }
                    else
                    {
                        validacionDebitoAutomatico = true;
                    }
                }
                else
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "Validar tabla parametros", "Flag apagado"), null, null);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} =>{1}{2}", "ERROR", Funciones.CheckStr(ex.Message), Funciones.CheckStr(ex.StackTrace)), null, null);
            }
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "FIN", "Validar restriccion de campañas en Afiliacion al debito automatico"), null, null);
            //PROY-140457-DEBITO AUTOMATICO-FIN

            _objLog.CrearArchivolog("[hidConcatPrimaServer.Value]=>" + Funciones.CheckStr(hidConcatPrimaServer.Value), null, null);

            if (ValidarSecConcurrente()) return;

            BEDatoPersonaClarify objClarify = new BEDatoPersonaClarify(); //PROY-25906 CNH


            objCliente = (BEClienteCuenta)Session["objCliente" + nroDocumento];



            _objLog.CrearArchivolog("[hidConcatPrimaServer.Value]=>" + Funciones.CheckStr(hidConcatPrimaServer.Value), null, null);

            //INICIO|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
            BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
            var strCorreosHistoricos = String.Empty;

            CrearLogStatic(nroDocumento).CrearArchivolog("[ConsultaDatosOficina][ConsultaDatosOficina]", Funciones.CheckStr(CurrentUsers), null);
            var oListConsultaDatosOficina = BLSincronizaSap.ConsultaDatosOficina(Funciones.CheckStr(objUsuario.OficinaVenta), null);

            var strCanal = String.Empty;
            strCanal = oListConsultaDatosOficina.TipoOficina;

            _objLog.CrearArchivolog("INICIO|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar", "", null);
            _objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar|CANAL: " + Funciones.CheckStr(strCanal), "", null);

            _objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar|KEY constCodTipoOficinaCAC: " + ConfigurationManager.AppSettings["constCodTipoOficinaCAC"], "", null);
            if (Funciones.CheckStr(strCanal) == Funciones.CheckStr(ConfigurationManager.AppSettings["constCodTipoOficinaCAC"]))
            {
                _objLog.CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar|ActualizarDatosCliente", "", null);
                ActualizarDatosCliente();
                _objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar|ActualizarDatosCliente", "", null);
            }
            _objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar", "", null);
            _objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: Grabar|KEY TipoDocumentoRUC: " + ConfigurationManager.AppSettings["TipoDocumentoRUC"], "", null);
            //FIN|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
            //validacionEvaluacion
            _objLog.CrearArchivolog("INI VALIDACION FRAUDE EVALUACION", "", null);
            bool bValidaDatos = validarDatosEvaluacion();
            _objLog.CrearArchivolog("INI VALIDACION FRAUDE EVALUACION[bValidaDatos]=> " + bValidaDatos.ToString(), "", null);
            if (!bValidaDatos)
            {
                hidnMensajeValue.Value = ConfigurationManager.AppSettings["msjValidacionEvaluacion"].ToString();
                return;
            }
            _objLog.CrearArchivolog("FIN VALIDACION FRAUDE EVALUACION", "", null);


            //validacionEvaluacion


            if (hidTipoDocumento.Value == ConfigurationManager.AppSettings["TipoDocumentoRUC"])
            {
                objClienteDCCorp = (BEEmpresaExperto)Session["objClienteDC" + nroDocumento];
                GrabarEvaluacionRUC();
            }
            else
            {
                objClienteDC = (BEDataCreditoOUT)Session["objClienteDC" + nroDocumento];

                //DIL::INI::20170910
                string strCodTipoOperacion = hidFlgTitularidad.Value == "S" ? ConfigurationManager.AppSettings["constTipoOperacionTRA"] : hidTipoOperacion.Value;
                string strValidarLineasPermitidas = ValidarCantidadLineasPermitidas(hidCodProducto.Value, strCodTipoOperacion, hidTipoDocumento.Value, nroDocumento);

                if (!string.IsNullOrEmpty(strValidarLineasPermitidas))
                {
                    hidnMensajeValue.Value = strValidarLineasPermitidas;
                    return;
                }
                //DIL::FIN::20170910

                GrabarEvaluacionDNI();
                //[PROY-140600] INI 
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[PROY-140600][sisact_evaluacion_unificada][Grabar()]|Session[LineasTipi]: ", Funciones.CheckStr(HttpContext.Current.Session["LineasTipi"])), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[PROY-140600][sisact_evaluacion_unificada][Grabar()]|AppSettings.Key_CLFlagGeneralPost", Funciones.CheckStr(AppSettings.Key_CLFlagGeneralPost)), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[PROY-140600][sisact_evaluacion_unificada][Grabar()]|AppSettings.Key_CLCodCanalPermitido", Funciones.CheckStr(AppSettings.Key_CLCodCanalPermitido)), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[PROY-140600][sisact_evaluacion_unificada][Grabar()]|hidnCanalValue", Funciones.CheckStr(hidnCanalValue.Value)), null, null);

                if (HttpContext.Current.Session["LineasTipi"] != null &&
                    Funciones.CheckStr(AppSettings.Key_CLFlagGeneralPost) == "1" &&
                    Funciones.CheckStr(AppSettings.Key_CLCodCanalPermitido).IndexOf(hidnCanalValue.Value) > -1)
                {
                    BEValidarLinea objLineasT = new BEValidarLinea();
                    objLineasT = (BEValidarLinea)HttpContext.Current.Session["LineasTipi"];
                    objLineasT.CuentaUsuario = objUsuario.idCuentaRed;
                    objLineasT.NombreUsuario = objUsuario.NombreCompleto;

                    _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[PROY-140600][sisact_evaluacion_unificada][Grabar()]|objUsuario.idCuentaRed: ", Funciones.CheckStr(objUsuario.idCuentaRed)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[PROY-140600][sisact_evaluacion_unificada][Grabar()]|objUsuario.idCuentaRed: ", Funciones.CheckStr(objUsuario.idCuentaRed)), null, null);

                    GrabarLineasTipi(objLineasT);
                }
                //[PROY-140600] FIN

                //INI PROY-25906 CNH
                _objLog.CrearArchivolog("[hidCodProducto.Value]=>" + Funciones.CheckStr(hidCodProducto.Value), null, null);
                _objLog.CrearArchivolog("[constTipoProductoMovil]=>" + Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]), null, null);

                if (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                {
                    if (Session["objClienteClarify" + hidNroDocumento.Value] == null)
                    {
                        _objLog.CrearArchivolog("[DataCreditoData]", null, null);
                        string strTipoDoc = obtener_tipo_doc_clarify(hidTipoDocumento.Value);

                        //INC000003111228 - INI
                        BEDataCreditoIN objIN = new BEDataCreditoIN();
                        objIN = (BEDataCreditoIN)HttpContext.Current.Session["objINDatosBuro"];

                        _objLog.CrearArchivolog("INC000003111228 => objClienteDC.RESPUESTA: " + Funciones.CheckStr(objClienteDC.RESPUESTA), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClienteDC.APELLIDO_PATERNO: " + Funciones.CheckStr(objClienteDC.APELLIDO_PATERNO), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClienteDC.APELLIDO_MATERNO: " + Funciones.CheckStr(objClienteDC.APELLIDO_MATERNO), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClienteDC.NOMBRES: " + Funciones.CheckStr(objClienteDC.NOMBRES), null, null);

                        _objLog.CrearArchivolog("INC000003111228 => objIN.istrAPELLIDOPATERNO: " + Funciones.CheckStr(objIN.istrAPELLIDOPATERNO.ToUpper()), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objIN.istrAPELLIDOMATERNO: " + Funciones.CheckStr(objIN.istrAPELLIDOMATERNO.ToUpper()), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objIN.istrNOMBRES: " + Funciones.CheckStr(objIN.istrNOMBRES.ToUpper()), null, null);
                        //INC000003111228 - FIN

                        objClarify.TipoDocumento = strTipoDoc;
                        objClarify.NroDocumento = hidNroDocumento.Value;
                        objClarify.ApePaterno = (objClienteDC.RESPUESTA == "09") ? objIN.istrAPELLIDOPATERNO.ToUpper() : objClienteDC.APELLIDO_PATERNO; //INC000003111228
                        objClarify.ApeMaterno = (objClienteDC.RESPUESTA == "09") ? objIN.istrAPELLIDOMATERNO.ToUpper() : objClienteDC.APELLIDO_MATERNO; //INC000003111228
                        objClarify.Nombres = (objClienteDC.RESPUESTA == "09") ? objIN.istrNOMBRES.ToUpper() : objClienteDC.NOMBRES; //INC000003111228
                        objClarify.RazonSocial = "";
                        objClarify.TipoValidacion = Funciones.CheckStr(ConfigurationManager.AppSettings["constOrigenInsertWs"]);//DATA CREDITO

                        //INC000003111228 - INI
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.TipoDocumento: " + Funciones.CheckStr(objClarify.TipoDocumento), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.NroDocumento: " + Funciones.CheckStr(objClarify.NroDocumento), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.ApePaterno: " + Funciones.CheckStr(objClarify.ApePaterno), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.ApeMaterno: " + Funciones.CheckStr(objClarify.ApeMaterno), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.Nombres: " + Funciones.CheckStr(objClarify.Nombres), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.RazonSocial: " + Funciones.CheckStr(objClarify.RazonSocial), null, null);
                        _objLog.CrearArchivolog("INC000003111228 => objClarify.TipoValidacion: " + Funciones.CheckStr(objClarify.TipoValidacion), null, null);
                        //INC000003111228 - FIN
                    }
                    else
                    {
                        _objLog.CrearArchivolog("[Session objClienteClarify]", null, null);
                        objClarify = (BEDatoPersonaClarify)Session["objClienteClarify" + hidNroDocumento.Value];
                        objClarify.RazonSocial = "";
                    }
                    _objLog.CrearArchivolog("[Inicio][update_cliente_clarify]", null, null);
                    this.update_cliente_clarify(objClarify);
                    _objLog.CrearArchivolog("[Final][update_cliente_clarify]", null, null);
                }
                //FIN PROY-25906 CNH 
            }

            //INI PROY-140739 Formulario Leads
            string pNroErrorSEC = String.Empty;
            string pDesErrorSEC = String.Empty;
            try
            {
                string tipoOperacion;
                if (chkPortabilidad.Checked)
                {
                    tipoOperacion = "P";
                }
                else
                {
                    tipoOperacion = ddlTipoOperacion.SelectedValue;
                }
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Validar ingreso a funcion RegistrarFormularioLeads()] -> strCanal : " + Funciones.CheckStr(strCanal), "", null);
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Validar ingreso a funcion RegistrarFormularioLeads()] -> hidnOficinaValue.Value: " + Funciones.CheckStr(hidnOficinaValue.Value), "", null);
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Validar ingreso a funcion RegistrarFormularioLeads()] -> hidCodProducto.Value : " + hidCodProducto.Value, "", null);
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Validar ingreso a funcion RegistrarFormularioLeads()] -> hidTipoOperacion.Value : " + hidTipoOperacion.Value, "", null);
                if ((ReadKeySettings.KeyLeadsCanal.IndexOf(Funciones.CheckStr(strCanal)) > -1 || ReadKeySettings.KeyLeadsPDV.IndexOf(Funciones.CheckStr(hidnOficinaValue.Value)) > -1)
                    && (Funciones.CheckInt64(hidNroSEC.Value) > 0)
                )
                {
                    if (ReadKeySettings.KeyLeadsProductosPermitidosPostpago.IndexOf(hidCodProducto.Value) > -1 || ReadKeySettings.KeyLeadsTopenPostPago.IndexOf(hidTipoOperacion.Value) > -1)
                    {
                        BEFormLead objLead = new BEFormLead
                        {
                            SOALN_SOLIN_CODIGO = Funciones.CheckInt64(hidNroSEC.Value),
                            SOALC_COD_LEAD = Funciones.CheckStr(txtFormLead.Value.ToUpper()),
                            SOALN_PEDIN_CODIGO = 0,
                            SOALV_COD_OFICINA = objUsuario.OficinaVenta,
                            SOALV_DES_OFICINA = objUsuario.OficinaVentaDescripcion,
                            SOALV_USU_CREACION = objUsuario.Login
                        };
                        string pNroError = String.Empty;
                        string pDesError = String.Empty;
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Inicio RegistrarFormularioLeads()] -> SOALN_SOLIN_CODIGO : " + Funciones.CheckStr(objLead.SOALN_SOLIN_CODIGO), "", null);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Inicio RegistrarFormularioLeads()] -> SOALC_COD_LEAD : " + Funciones.CheckStr(objLead.SOALC_COD_LEAD), "", null);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Inicio RegistrarFormularioLeads()] -> SOALN_PEDIN_CODIGO : " + Funciones.CheckStr(objLead.SOALN_PEDIN_CODIGO), "", null);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Inicio RegistrarFormularioLeads()] -> SOALV_COD_OFICINA : " + Funciones.CheckStr(objLead.SOALV_COD_OFICINA), "", null);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Inicio RegistrarFormularioLeads()] -> SOALV_DES_OFICINA : " + Funciones.CheckStr(objLead.SOALV_DES_OFICINA), "", null);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Inicio RegistrarFormularioLeads()] -> SOALV_USU_CREACION : " + Funciones.CheckStr(objLead.SOALV_USU_CREACION), "", null);
                        BLFormLead.RegistrarFormularioLeads(objLead, ref pNroError, ref pDesError);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()] -> pNroError : " + Funciones.CheckStr(pNroError), "", null);
                        _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()] -> pDesError : " + Funciones.CheckStr(pDesError), "", null);

                        if (!pNroError.Equals("0"))
                        {
                            hidCodError.Value = "1";
                            hidnMensajeValue.Value = ReadKeySettings.KeyLeadsMensajeError;
                            //IMPLEMENTAR SP SISACT_PKG_EVALUACION_CONS_2_.SISACTSU_RECHAZAR_SEC                        
                            BLFormLead.RechazarSEC(Funciones.CheckInt64(hidNroSEC.Value), objUsuario.OficinaVenta, objUsuario.Login, Funciones.CheckStr(pDesError), ref pNroErrorSEC, ref pDesErrorSEC);
                            _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()] -> pNroError : " + Funciones.CheckStr(pNroErrorSEC), "", null);
                            _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()] -> pDesError : " + Funciones.CheckStr(pDesErrorSEC), "", null);
                            return;
                        }
                    }

                }
            }
            catch (Exception e)
            {
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()]", null, e);
                hidCodError.Value = "1";
                hidnMensajeValue.Value = ReadKeySettings.KeyLeadsMensajeError;
                //IMPLEMENTAR SP SISACT_PKG_EVALUACION_CONS_2_.SISACTSU_RECHAZAR_SEC
                BLFormLead.RechazarSEC(Funciones.CheckInt64(hidNroSEC.Value), objUsuario.OficinaVenta, objUsuario.Login, e.ToString(), ref pNroErrorSEC, ref pDesErrorSEC);
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()] -> pNroError : " + Funciones.CheckStr(pNroErrorSEC), "", null);
                _objLog.CrearArchivolog("[PROY-140739 IDEA-142648 Fin RegistrarFormularioLeads()] -> pDesError : " + Funciones.CheckStr(pDesErrorSEC), "", null);
                return;
            }
            //FIN PROY-140739 Formulario Leads

            //INI: PROY-140335 IDEA-140307 
            AnularSecLineaPendientePorta();
            // INICIO [VALIDACION FRAUDE - CUOTA] INC000002428826
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][blnEvalCuotaTieneMontoInicial]", Funciones.CheckStr(blnEvalCuotaTieneMontoInicial)), null, null); //G.G.A - INC000002592222 - SOLUCION
            if (blnEvalCuotaTieneMontoInicial)
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][strCadenaGrabaCuotaInicial]", strCadenaGrabaCuotaInicial), null, null); //G.G.A - INC000002592222 - SOLUCION

                if (!string.IsNullOrEmpty(strCadenaGrabaCuotaInicial))
                {
                    String[] arrGrabarCuotaInicial = strCadenaGrabaCuotaInicial.Split('|');
                    int contarVueltas;
                    contarVueltas = arrGrabarCuotaInicial.Length - 1;
                    _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][contarVueltas]", Funciones.CheckStr(contarVueltas)), null, null); //G.G.A - INC000002592222 - SOLUCION          

                    //foreach (string strCadenaGrabaCuotaInicialItem in arrGrabarCuotaInicial)            
                    for (int i = 0; i <= contarVueltas; i++)
                    {
                        string strCadenaGrabaCuotaInicialItem = arrGrabarCuotaInicial[i];
                        String[] arrGrabarCuotaInicialItem = strCadenaGrabaCuotaInicialItem.Split(';');

                        _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][i]", Funciones.CheckStr(i)), null, null); //G.G.A - INC000002592222 - SOLUCION 
                        _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][strCadenaGrabaCuotaInicialItem]", strCadenaGrabaCuotaInicialItem), null, null); //G.G.A - INC000002592222 - SOLUCION          

                        if ((i == contarVueltas) && (hidEsProactiva.Value == "SI"))
                        {
                            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][hidEsProactiva.Value]", hidEsProactiva.Value), null, null);
                        }
                        else
                        {
                            Double dblCuotaInicial = 0;
                            dblCuotaInicial = Funciones.CheckDbl(arrGrabarCuotaInicialItem[1]);
                            Double dblCuotaInicialSession = Funciones.CheckDbl(HttpContext.Current.Session["strValidacionCuotaBRMS" + (i + 1)]);

                            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][dblCuotaInicialSession]", dblCuotaInicialSession), null, null);
                            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][dblCuotaInicial]", dblCuotaInicial), null, null);

                            //if (dblCuotaInicialSession - dblCuotaInicial > 0) //G.G.A - INC000002592222 - SOLUCION
                            if (dblCuotaInicialSession - dblCuotaInicial > 0.01)
                            {
                                hidCodError.Value = "1";
                                hidnMensajeValue.Value = ReadKeySettings.Key_MensajeResponse_Evaluacion;
                                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[VALIDACION FRAUDE - CUOTA][ERROR]", hidnMensajeValue.Value), null, null);
                                return;
                            }

                        }

                    }
                }

            }
            // FIN [VALIDACION FRAUDE - CUOTA] INC000002428826

            //INICIO - PROY-30748 - GRABAR DATOS BRMS REPORTE
            try
            {

                List<BEOfrecimiento> oListOfrecimiento =
                    (List<BEOfrecimiento>)objCliente.oVistaEvaluacion.oOfrecimiento;

                double cargofijoacumulado = oListOfrecimiento.Sum(obj => obj.CargoFijo);


                BEPlanProactivo objBEPlanProactivo = new BEPlanProactivo();
                objBEPlanProactivo = (BEPlanProactivo)HttpContext.Current.Session["BEPlanProactivo"];
                BEOfrecimiento oOfrecimiento = new BEOfrecimiento();
                Int64 idSol = 0;
                int numItem = oListOfrecimiento.Count;
                _objLog.CrearArchivolog("[Inicio][GRABAR DATOS BRMS REPORTE PROA] ", null, null);
                _objLog.CrearArchivolog("[Nro de SEC][" + strNroSECPROA + "]", null, null);

                if (!((strNroSECPROA).Equals("")) &&
                    oListOfrecimiento[numItem - 1].IdProducto ==
                    ConfigurationManager.AppSettings["constTipoProductoMovil"] &&
                    objBEPlanProactivo.PlanBSSEval != null)
                {
                    Int64 nroSEC = Funciones.CheckInt64(strNroSECPROA);


                    foreach (BEPlanBSSEval obj in objBEPlanProactivo.PlanBSSEval)
                    {

                        idSol++;
                        oOfrecimiento.IdProducto = oListOfrecimiento[numItem - 1].IdProducto;
                        oOfrecimiento.In_solicitud = oListOfrecimiento[numItem - 1].In_solicitud;
                        oOfrecimiento.In_cliente = oListOfrecimiento[numItem - 1].In_cliente;
                        oOfrecimiento.In_direccion_cliente = oListOfrecimiento[numItem - 1].In_direccion_cliente;
                        oOfrecimiento.In_doc_cliente = oListOfrecimiento[numItem - 1].In_doc_cliente;
                        oOfrecimiento.In_rrll_cliente = oListOfrecimiento[numItem - 1].In_rrll_cliente;
                        oOfrecimiento.In_equipo = oListOfrecimiento[numItem - 1].In_equipo;
                        //EMMH I
                        string[] arrEquipo = oListOfrecimiento[numItem - 1].In_equipo.Split('|');
                        //arrEquipo[arrEquipo.Count() - 8] = Funciones.CheckStr(obj.CostoEquipo);
                        arrEquipo[arrEquipo.Count() - 5] = Funciones.CheckStr(obj.PrecionVenta); //PROY-140579
                        arrEquipo[arrEquipo.Count() - 8] = Funciones.CheckStr(obj.Equipo); //PROY-140579
                        arrEquipo[arrEquipo.Count() - 12] = Funciones.CheckStr(obj.CostoEquipo); //PROY-140579
                        if (Funciones.CheckInt(obj.Cuota.cuota) > 0)
                        {
                            //PROY 30748 F2 INI EMMH
                            double montoCuotaInicial = (Funciones.CheckDbl(obj.PrecionVenta) * Funciones.CheckDbl(Math.Round(obj.Cuota.porcenCuotaInicial, 2)) / 100);

                            arrEquipo[arrEquipo.Count() - 7] = Funciones.CheckStr(Math.Round((Funciones.CheckDbl(obj.PrecionVenta) - Math.Round(montoCuotaInicial, 0)) / Funciones.CheckDbl(obj.Cuota.cuota), 2)); //PROY-140579
                            double residuo = Math.Round(obj.Cuota.porcenCuotaInicial, 2) % 2;
                            if (residuo > 0)
                            {
                                arrEquipo[arrEquipo.Count() - 6] = Funciones.CheckStr(Math.Round(obj.Cuota.porcenCuotaInicial, 2)); //PROY-140579
                            }
                            else
                            {
                                arrEquipo[arrEquipo.Count() - 6] = Funciones.CheckStr(Math.Round(obj.Cuota.porcenCuotaInicial, 0)); //PROY-140579
                            }
                            //PROY 30748 F2 FIN EMMH
                        }
                        else
                        {
                            arrEquipo[arrEquipo.Count() - 7] = "0"; //PROY-140579
                        }
                        oOfrecimiento.In_equipo = string.Join("|", arrEquipo);
                        //EMMH F
                        // INCIO - OFERTA - PROY - 30748
                        //PROY-140335 RF1 INI
                        string[] arrOferta = oListOfrecimiento[numItem - 1].In_oferta.Split('|');
                        arrOferta[arrOferta.Count() - 2] = Funciones.CheckStr(obj.cargoFijo + (cargofijoacumulado - oListOfrecimiento[numItem - 1].CargoFijo));
                        string FlagConsultaPrevia = string.Empty;
                        if (hidNTienePortabilidadValues.Value == "S")
                        {
                            FlagConsultaPrevia = HttpContext.Current.Session["flagEnvioCPProactivo"].ToString();
                            _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[LOG_PRO-140335 RF1 GRABAR PROA][FlagConsultaPrevia]-->", Funciones.CheckStr(FlagConsultaPrevia)), null, null);
                            arrOferta[arrOferta.Count() - 1] = FlagConsultaPrevia;
                            oOfrecimiento.ejecucionConsultaPrevia = obj.ejecucionConsultaPrevia;
                            _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[LOG_PRO-140335 RF1 GRABAR PROA][oOfrecimiento.ejecucionConsultaPrevia ]-->", Funciones.CheckStr(obj.ejecucionConsultaPrevia)), null, null);
                        }
                        //PROY-140335 RF1 FIN
                        oOfrecimiento.In_oferta = string.Join("|", arrOferta);
                        // FIN - OFERTA - PROY - 30748

                        //APOYO-PROY30748-INICIO
                        string[] strCodServAdicionales = obj.ServiciosAdicionales.Split('_');
                        string strTopeConsumo = ConfigurationManager.AppSettings["ConstTextSinTopeConsumo"].ToString();

                        for (int i = 0; i < strCodServAdicionales.Count(); i++)
                        {
                            if (i % 2 == 0)
                            {
                                if (strCodServAdicionales[i] == ConfigurationManager.AppSettings["constCodTopeCeroServicio"].ToString())
                                {
                                    strTopeConsumo = "TOPE DE CONSUMO CERO";
                                }
                                if (strCodServAdicionales[i] == ConfigurationManager.AppSettings["constCodTopeSinCFServicio"].ToString())
                                {
                                    strTopeConsumo = "TOPE DE CONSUMO SIN CF";
                                }
                                if (strCodServAdicionales[i] == ConfigurationManager.AppSettings["constCodTopeAutomatico"].ToString())
                                {
                                    strTopeConsumo = "TOPE DE CONSUMO AUTOMATICO";
                                }
                            }
                        }
                        _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[LOG_PRO-30748][strTopeConsumo]", Funciones.CheckStr(strTopeConsumo)), null, null);
                        string[] arreOfertaModificar = oOfrecimiento.In_oferta.Split('|');
                        string strOfertaSetea = string.Empty;
                        arreOfertaModificar[2] = strTopeConsumo;
                        for (int i = 0; i < arreOfertaModificar.Count(); i++)
                        {
                            strOfertaSetea = strOfertaSetea + arreOfertaModificar[i].Trim() + '|';
                        }

                        int intPosPenultima = strOfertaSetea.Length - 1;
                        oOfrecimiento.In_oferta = strOfertaSetea.Substring(0, intPosPenultima);

                        _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[LOG_PRO-30748][oOfrecimiento.In_oferta]", Funciones.CheckStr(oOfrecimiento.In_oferta.ToString())), null, null);
                        //APOYO-PROY30748-FIN

                        oOfrecimiento.In_campana = oListOfrecimiento[numItem - 1].In_campana;
                        oOfrecimiento.In_plan_actual = oListOfrecimiento[numItem - 1].In_plan_actual;
                        oOfrecimiento.In_plan_solicitado = obj.cargoFijo + "|" + obj.descripcion.ToUpper() + "||";//PROY 30748 F2 MDE
                        oOfrecimiento.In_servicio = oListOfrecimiento[numItem - 1].In_servicio;
                        oOfrecimiento.In_pdv = oListOfrecimiento[numItem - 1].In_pdv;
                        oOfrecimiento.In_direccion_pdv = oListOfrecimiento[numItem - 1].In_direccion_pdv;
                        oOfrecimiento.TipoDeGarantia = oListOfrecimiento[numItem - 1].TipoDeGarantia;

                        oOfrecimiento.MaximoCuotas = oListOfrecimiento[numItem - 1].MaximoCuotas;

                        oOfrecimiento.CantidadDeLineasAdicionalesRUC = Funciones.CheckInt(obj.cantidadDeLineasAdicionalesRUC);
                        oOfrecimiento.CantidadDeLineasMaximas = Funciones.CheckInt(obj.cantidadDeLineasMaximas);

                        oOfrecimiento.CapacidadDePago = obj.capacidadDePago;

                        oOfrecimiento.Plan = obj.descripcion;
                        oOfrecimiento.FactorDeEndeudamientoCliente = Funciones.CheckDbl(obj.factorDeEndeudamientoCliente);
                        oOfrecimiento.FactorDeRenovacionCliente = Funciones.CheckDbl(obj.factorDeRenovacionCliente);
                        oOfrecimiento.MontoCFParaRUC = Funciones.CheckDbl(obj.montoCFParaRUC) != 0.0 ? Funciones.CheckDbl(obj.montoCFParaRUC) : Funciones.CheckDbl(oListOfrecimiento[numItem - 1].MontoCFParaRUC);//PROY 30748 F2 MDE
                        oOfrecimiento.MontoDeGarantia = obj.montoDeGarantia;

                        oOfrecimiento.PrecioDeVentaTotalEquipos = obj.precioDeVentaTotalEquipos;
                        oOfrecimiento.ProcesoIDValidator = obj.procesoIDValidator;
                        oOfrecimiento.Restriccion = obj.restriccion;
                        oOfrecimiento.RiesgoTotalEquipo = Funciones.CheckInt(obj.riesgoTotalEquipo);

                        oOfrecimiento.Tipodecobro = obj.tipodecobro;
                        oOfrecimiento.CargoFijo = obj.cargoFijo;
                        //PROY 30748 F2 INI MDE
                        oOfrecimiento.ComportamientoDePagoC1 = oListOfrecimiento[numItem - 1].ComportamientoDePagoC1;
                        oOfrecimiento.CostoTotalEquipos = obj.CostoEquipo;
                        oOfrecimiento.PrioridadPublicar = oListOfrecimiento[numItem - 1].PrioridadPublicar;
                        oOfrecimiento.ProcesoDeExoneracionDeRentas = oListOfrecimiento[numItem - 1].ProcesoDeExoneracionDeRentas;
                        oOfrecimiento.Publicar = oListOfrecimiento[numItem - 1].Publicar;
                        oOfrecimiento.RiesgoEnClaro = oListOfrecimiento[numItem - 1].RiesgoEnClaro;
                        oOfrecimiento.RiesgoOferta = oListOfrecimiento[numItem - 1].RiesgoOferta;
                        oOfrecimiento.TipoDeAutonomiaCargoFijo = obj.TipoDeAutonomiaCargoFijo != string.Empty ? obj.TipoDeAutonomiaCargoFijo : oListOfrecimiento[numItem - 1].TipoDeAutonomiaCargoFijo;
                        oOfrecimiento.ComportamientoConsolidado = oListOfrecimiento[numItem - 1].ComportamientoConsolidado;

                        _objLog.CrearArchivolog("[INC000004091065][sisact_evaluacion_unificada.aspx.cs][Grabar]", string.Format("{0}:{1}", "InsertarDatosBRMSPROA() input oOfrecimiento", Funciones.CheckStr(new JavaScriptSerializer().Serialize(oOfrecimiento))), null);       
                        
                        //PROY 30748 F2 FIN MDE
                        oOfrecimiento.MostrarMotivoDeRestriccion = obj.mostrarMotivoDeRestriccion;//PROY-140579 F2
                        oOfrecimiento.MotivoDeRestriccion = obj.motivoDeRestriccion;//PROY-140579 F2
                        bool ResultBrmsProa = new BLEvaluacion().InsertarDatosBRMSPROA(nroSEC, idSol, oOfrecimiento);
                        _objLog.CrearArchivolog(
                            "[InsertarDatosBRMSPROA][" + nroSEC + "][" + idSol + "]: " +
                            Funciones.CheckStr(ResultBrmsProa), null, null);
                    }
                    _objLog.CrearArchivolog("[Fin][GRABAR DATOS BRMS REPORTE PROA]", null, null);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog("[ERROR][GRABAR DATOS BRMS REPORTE PROA]", ex.Message, null);
            }

            //FIN - PROY-30748 - GRABAR DATOS BRMS REPORTE

            // PROY-26358 - Inicio - Evalenzs - Registrar Check
            Boolean bResultDecConocimiento = false;
            string idNroDocumento = hidNroDocumento.Value;
            GeneradorLog objLog = new GeneradorLog(CurrentUser, idNroDocumento, null, "WEB");
            objLog.CrearArchivolog("[Inicio][DeclaracionConocimiento]" + hidNTienePortabilidadValues.Value, null, null);

            if (!((hidNroSEC.Value).Equals("")) && (hidNTienePortabilidadValues.Value).Equals("S") && !(hidCadenaItemsCheckP.Value.Equals("ERROR")))
            {

                objLog.CrearArchivolog("SEC: " + hidNroSEC.Value + " | " + hidNTienePortabilidadValues.Value, null, null);
                string SolinCodigo = hidNroSEC.Value;
                string P_flagItem = hidCadenaItemsCheckP.Value;
                string SegmentoVenta = ConfigurationManager.AppSettings["consSegmentoPortaDeclConocimiento"];
                string Usuario = CurrentUser;
                BLSolicitudNegocios oSolicitudNegocios = new BLSolicitudNegocios();

                objLog.CrearArchivolog("Segmento: " + SegmentoVenta, null, null);
                objLog.CrearArchivolog("Items: " + P_flagItem, null, null);
                try
                {
                    bResultDecConocimiento = oSolicitudNegocios.IngresaDeclaracionConocimiento(Funciones.CheckInt(SolinCodigo), P_flagItem, SegmentoVenta, Usuario);
                    objLog.CrearArchivolog("Resultado: " + bResultDecConocimiento.ToString(), null, null);
                }
                catch (Exception ex)
                {
                    objLog.CrearArchivolog("Error-" + ex.Message + "", null, null);
                }
            }
            objLog.CrearArchivolog("[Fin][DeclaracionConocimiento]", null, null);
            // PROY-26358 - Fin - Evalenzs

            if (blnSecTieneProteccionMovil) //PROY-24724-IDEA-28174 - INICIO
            {
                BEItemMensaje objMensaje = new BEItemMensaje(false);
                BWGestionaProteccionMovil objGestionaProteccionMovil = new BWGestionaProteccionMovil();
                BEItemGenerico objAudit = new BEItemGenerico();
                objAudit.Codigo2 = CurrentUser;
                objAudit.Descripcion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                objAudit.Descripcion2 = CurrentTerminal;
                BLProteccionMovil objProteccionMovil = new BLProteccionMovil();
                string strNroSec = string.Empty;
                string strSoplnCodigo = string.Empty;
                string strCodRespuesta = string.Empty;
                string strMsjRespuesta = string.Empty;
                BWEnvioCorreo objEnvioCorreo = new BWEnvioCorreo();

                try
                {
                    foreach (BEPrima objGuardarPrima in arrGuardarPrima)
                    {
                        strNroSec = objGuardarPrima.NroSec;
                        strSoplnCodigo = objGuardarPrima.SoplnCodigo;
                        objAudit.Codigo = DateTime.Now.ToString("yyMMddhhmmssmmm");
                        objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}", "[Inicio][GuardarProteccionMovil][NroSec] ", objGuardarPrima.NroSec, " [SoplnCodigo] ", objGuardarPrima.SoplnCodigo, " [MontoPrima] ", objGuardarPrima.MontoPrima, " [DeducibleRobo] ", objGuardarPrima.DeducibleRobo, " [DeducibleDanio] ", objGuardarPrima.DeducibleDanio, " [NroCertif] ", objGuardarPrima.NroCertif), null, null);

                        objMensaje = objGestionaProteccionMovil.GuardarProteccionMovil(objGuardarPrima, objAudit);

                        if (objMensaje.exito == false)
                        {
                            objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][GuardarProteccionMovil][Codigo] ", objMensaje.codigo), null, null);
                            objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][GuardarProteccionMovil][Descripcion] ", objMensaje.descripcion), null, null);
                            objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][GuardarProteccionMovil][MensajeCliente] ", objMensaje.mensajeCliente), null, null);
                            objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][GuardarProteccionMovil][MensajeSistema] ", objMensaje.mensajeSistema), null, null);

                            objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}", "[Inicio][BorrarServicioProteccionMovil][strNroSec] ", strNroSec, " [strCodServProteccionMovil] ", strCodServProteccionMovil, " [strSoplnCodigo] ", strSoplnCodigo), null, null);
                            objProteccionMovil.BorrarServicioProteccionMovil(strNroSec, strCodServProteccionMovil, strSoplnCodigo, ref strCodRespuesta, ref strMsjRespuesta);

                            if (strCodRespuesta == "0")
                                objLog.CrearArchivolog("[Resultado OK][BorrarServicioProteccionMovil]", null, null);
                            else
                            {
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][BorrarServicioProteccionMovil][strCodRespuesta] ", strCodRespuesta), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][BorrarServicioProteccionMovil][strMsjRespuesta] ", strMsjRespuesta), null, null);
                            }
                            objLog.CrearArchivolog("[Fin][BorrarServicioProteccionMovil]", null, null);
                        }
                        else
                        {
                            objLog.CrearArchivolog("[Resultado OK][GuardarProteccionMovil]", null, null);
                            objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}", "[Inicio][ActualizarMontoCargoFijoServicioProteccionMovil][strNroSec] ", strNroSec, " [strSoplnCodigo] ", strSoplnCodigo, " [strCodServProteccionMovil] ", strCodServProteccionMovil), null, null);

                            objProteccionMovil.ActualizarMontoCargoFijoServicioProteccionMovil(strNroSec, strSoplnCodigo, strCodServProteccionMovil, ref strCodRespuesta, ref strMsjRespuesta);

                            if (strCodRespuesta == "0")
                                objLog.CrearArchivolog("[Resultado OK][ActualizarMontoCargoFijoServicioProteccionMovil]", null, null);
                            else
                            {
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ActualizarMontoCargoFijoServicioProteccionMovil][strCodRespuesta] ", strCodRespuesta), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ActualizarMontoCargoFijoServicioProteccionMovil][strMsjRespuesta] ", strMsjRespuesta), null, null);
                            }
                            objLog.CrearArchivolog("[Fin][ActualizarMontoCargoFijoServicioProteccionMovil]", null, null);
                        }
                    }
                }
                catch (Exception ex)
                {
                    objMensaje.exito = false;
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][GuardarProteccionMovil][MensajeCliente] ", Funciones.CheckStr(ConfigurationManager.AppSettings["consGestionaProteccionMovilWS_Error"])), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][GuardarProteccionMovil][MensajeSistema] ", ex.Message), null, null);

                    objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}", "[Inicio][BorrarServicioProteccionMovil][strNroSec] ", strNroSec, " [strCodServProteccionMovil] ", strCodServProteccionMovil, " [strSoplnCodigo] ", strSoplnCodigo), null, null);
                    objProteccionMovil.BorrarServicioProteccionMovil(strNroSec, strCodServProteccionMovil, strSoplnCodigo, ref strCodRespuesta, ref strMsjRespuesta);

                    if (strCodRespuesta == "0")
                        objLog.CrearArchivolog("[Resultado OK][BorrarServicioProteccionMovil]", null, null);
                    else
                    {
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][BorrarServicioProteccionMovil][strCodRespuesta] ", strCodRespuesta), null, null);
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][BorrarServicioProteccionMovil][strMsjRespuesta] ", strMsjRespuesta), null, null);
                    }
                    objLog.CrearArchivolog("[Fin][BorrarServicioProteccionMovil]", null, null);
                }
                finally
                {
                    if (!objMensaje.exito)
                        Alert(lstBEParametroProteccionMovil.Where(p => p.Valor1 == "39").SingleOrDefault().Valor);
                    objLog.CrearArchivolog("[Fin][GuardarProteccionMovil]", null, null);
                }
            } //PROY-24724-IDEA-28174 - FIN

            if (blnEvalCuotaTieneMontoInicial) //PROY-30166-IDEA–38863-INICIO
            {
                objLog.CrearArchivolog("[INICIO Evaluacion Cuota con Monto de Cuota Inicial]", null, null);
                BLEvaluacion objEvalucionCuota = new BLEvaluacion();
                Int64 intSoplnCodigo;
                double dblCuotaInicial;
                string strCodRpta = string.Empty;
                string strMsjRpta = string.Empty;

                if (!string.IsNullOrEmpty(strCadenaGrabaCuotaInicial))
                {
                    objLog.CrearArchivolog("[  *Cadena Cuota Inicial " + strCadenaGrabaCuotaInicial, null, null);
                    String[] arrGrabarCuotaInicial = strCadenaGrabaCuotaInicial.Split('|');
                    int contarVueltas;
                    contarVueltas = arrGrabarCuotaInicial.Length - 1;
                    //foreach (string strCadenaGrabaCuotaInicialItem in arrGrabarCuotaInicial)            
                    for (int i = 0; i <= contarVueltas; i++)
                    {
                        string strCadenaGrabaCuotaInicialItem = arrGrabarCuotaInicial[i];
                        String[] arrGrabarCuotaInicialItem = strCadenaGrabaCuotaInicialItem.Split(';');
                        intSoplnCodigo = Funciones.CheckInt64(arrGrabarCuotaInicialItem[0]);

                        if ((i == contarVueltas) && (hidEsProactiva.Value == "SI"))
                        {
                            objLog.CrearArchivolog(" [*Tiene Evaluación Proactiva]", null, null);
                            dblCuotaInicial = Funciones.CheckDbl(hidMontoInicialPro.Value);
                        }
                        else
                        {
                            objLog.CrearArchivolog(" [*Sin Evaluación Proactiva]", null, null);
                            dblCuotaInicial = Funciones.CheckDbl(arrGrabarCuotaInicialItem[1]);
                        }
                        objLog.CrearArchivolog(" [INICIO ActualizarMontoInicialPorDetalle]", null, null);
                        objLog.CrearArchivolog(" [SISACT_PKG_GENERAL_3PLAY_6.SISACTSU_CUOTA_INICIAL]", null, null);
                        objLog.CrearArchivolog("  [*IN SOPLN_CODIGO " + intSoplnCodigo + "]", null, null);
                        objLog.CrearArchivolog("  [*IN CUOTA INICIAL " + dblCuotaInicial + "]", null, null);
                        objEvalucionCuota.ActualizarMontoInicial(intSoplnCodigo, dblCuotaInicial, 0, ref strCodRpta, ref strMsjRpta);
                        objLog.CrearArchivolog("  [*OUT COD. RPTA. " + strCodRpta + "]", null, null);
                        objLog.CrearArchivolog("  [*OUT MSJ. RPTA. " + strMsjRpta + "]", null, null);
                        objLog.CrearArchivolog(" [FIN ActualizarMontoInicialPorDetalle]", null, null);
                        strCuotaInicial = Funciones.CheckStr(dblCuotaInicial); //PROY-140743
                        objLog.CrearArchivolog(" [ PROY-140743 - IDEA-141192 - Venta en cuotas ] [strCuotaInicial] ==> " + Funciones.CheckStr(strCuotaInicial), null, null);
                    }
                }
                objLog.CrearArchivolog("[FIN Evaluacion Cuota con Monto de Cuota Inicial]", null, null);
            } //PROY-30166-IDEA–38863-FIN

            RegistroMetricaVentas();
            Session.Remove("objCliente" + nroDocumento);
            Session.Remove("objClienteDC" + nroDocumento);
            Session.Remove("objDireccion" + nroDocumento);

            //INICIO PROY-140419 Autorizar Portabilidad sin PIN
            if (validacionSuperv)
            {
                Int64 SnroSEC = Funciones.CheckInt64(hidNroSEC.Value);
                string StipoDocumento = Funciones.CheckStr(hidTipoDocumento.Value);
                string SnroDocumento = Funciones.CheckStr(hidNroDocumento.Value);
                string Soficina = Funciones.CheckStr(hidnOficinaActual.Value);

                // [INC000002442213]
                try
                {
                    List<BEPlanDetalleVenta> arrPlanDetalle = ObtenerPlanDetalle();

                    GrabarOmisionPIN(SnroSEC, StipoDocumento, SnroDocumento, Soficina, arrPlanDetalle);
                }
                catch (Exception e)
                {
                    _objLog.CrearArchivolog(e.Message, null, null);
                    return;
                }

            }
            // [INC000002442213]
            //FIN PROY-140419 Autorizar Portabilidad sin PIN
            //PROY-140657 INI
            objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] FlagAfiliacionDEAU: ", Funciones.CheckStr(ReadKeySettings.key_FlagAfiliacionDEAU)), null, null);

            if (HttpContext.Current.Session["InfDebitoAutomatico"] != null && ReadKeySettings.key_FlagAfiliacionDEAU == "1")
            {
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] Cod_Solicitud: ", Funciones.CheckStr(((BEDebitoAutomatico)HttpContext.Current.Session["InfDebitoAutomatico"]).Cod_Solicitud)), null, null);

                if (((BEDebitoAutomatico)HttpContext.Current.Session["InfDebitoAutomatico"]).Cod_Solicitud == "-2")
                {
                    BEDebitoAutomatico objInfoDEAU = (BEDebitoAutomatico)HttpContext.Current.Session["InfDebitoAutomatico"];
                    BodyRequestRegistraEnvioDEAU objRequestRegistarAfil = new BodyRequestRegistraEnvioDEAU();
                    BodyRequestEnviaLinkDEAU objEnviaLink = new BodyRequestEnviaLinkDEAU();

                    string Soficina = Funciones.CheckStr(hidnOficinaActual.Value);

                    #region Cargar objetorequest
                    objRequestRegistarAfil.nroSec = Funciones.CheckStr(hidNroSEC.Value);

                    #region HOMOLOGACION DOCUMENTOS MOTOR
                    string constTipoDocRuc = string.Empty;
                    string[] documentosMotor = Funciones.CheckStr(ReadKeySettings.key_DocumentosMotorDEAU).Split('|');
                    string documentoSisact = Funciones.CheckStr(objInfoDEAU.Tipo_Documento);
                    bool flagMotor = false;
                    if (documentosMotor != null)
                    {
                        for (int i = 0; i < documentosMotor.Length; i++)
                        {
                            if (documentosMotor[i] == documentoSisact)
                            {
                                objRequestRegistarAfil.tipoDocumento = documentosMotor[i + 1];
                                objRequestRegistarAfil.descDocumento = documentosMotor[i + 2];
                                flagMotor = true;
                                break;
                            }
                            else
                            {
                                i = i + 2;
                            }
                        }
                    }
                    else
                    {
                        objRequestRegistarAfil.tipoDocumento = "1";// Funciones.CheckStr(objInfoDEAU.Tipo_Documento);
                        objRequestRegistarAfil.descDocumento = "SINDEFINIR";// Funciones.CheckStr(objInfoDEAU.Descripcion_TipoDoc);
                    }

                    if (!flagMotor)
                    {
                        objRequestRegistarAfil.tipoDocumento = "1";// Funciones.CheckStr(objInfoDEAU.Tipo_Documento);
                        objRequestRegistarAfil.descDocumento = "SINDEFINIR";// Funciones.CheckStr(objInfoDEAU.Descripcion_TipoDoc);
                    }
                    #endregion

                    objRequestRegistarAfil.numDocumento = Funciones.CheckStr(objInfoDEAU.Numero_Documento);

                    if (objInfoDEAU.Tipo_Documento == Funciones.CheckStr(ConfigurationManager.AppSettings["constCodTipoDocumentoRUC"]))
                    {
                        objRequestRegistarAfil.nombresCliente = Funciones.CheckStr(hidRazonSocial.Value).ToUpper();
                        objRequestRegistarAfil.apellidosCliente = Funciones.CheckStr(hidRazonSocial.Value).ToUpper();
                    }
                    else
                    {
                        objRequestRegistarAfil.nombresCliente = Funciones.CheckStr(hidNombre.Value).ToUpper();
                        objRequestRegistarAfil.apellidosCliente = string.Format("{0} {1}", Funciones.CheckStr(hidApePaterno.Value).ToUpper(), Funciones.CheckStr(hidApeMaterno.Value).ToUpper());
                    }
                    objRequestRegistarAfil.correoCliente = Funciones.CheckStr(objInfoDEAU.Correo_Contacto);
                    objRequestRegistarAfil.tipoCliente = Funciones.CheckStr(ddlOferta.SelectedItem.Text);
                    objRequestRegistarAfil.codTipoOperacion = Funciones.CheckStr(hidTipoOperacion.Value).ToUpper();
                    objRequestRegistarAfil.tipoOperacion = Funciones.CheckStr(hidDescTipoOperacion.Value).ToUpper();
                    objRequestRegistarAfil.tipoProducto = Funciones.CheckStr(hidDesProducto.Value).ToUpper();
                    objRequestRegistarAfil.canalVenta = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[2];
                    objRequestRegistarAfil.codPdv = Funciones.CheckStr(hidOficinaUsuario.Value).ToUpper();
                    objRequestRegistarAfil.descPdv = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[1];
                    objRequestRegistarAfil.origenSolicitud = Funciones.CheckStr(ReadKeySettings.key_OrigenSolicitudDEAU);
                    objRequestRegistarAfil.idEntidad = Funciones.CheckStr(ReadKeySettings.key_idEntidadDEAU.Split('|')[0]).Split('_')[0];
                    objRequestRegistarAfil.descEntidad = Funciones.CheckStr(ReadKeySettings.key_idEntidadDEAU.Split('|')[0]).Split('_')[1];
                    objRequestRegistarAfil.idOrigenCuenta = Funciones.CheckStr(ReadKeySettings.key_idOrigenCuentaDEAU);
                    objRequestRegistarAfil.idMoneda = Funciones.CheckStr(ReadKeySettings.key_idMonedaDEAU);
                    objRequestRegistarAfil.customerId = string.Empty;
                    objRequestRegistarAfil.idServPpal = string.Empty;
                    objRequestRegistarAfil.origenAfiliacion = Funciones.CheckStr(ReadKeySettings.key_OrigenAfiliacionDEAU);
                    objRequestRegistarAfil.nroSolicitud = Funciones.CheckStr(hidNroSEC.Value);
                    objRequestRegistarAfil.tarjetaId = (objInfoDEAU.flagTarjetaAfiliacion == 1) ? objInfoDEAU.idTarjeta : string.Empty;
                    objRequestRegistarAfil.numTarjeta = (objInfoDEAU.flagTarjetaAfiliacion == 1) ? objInfoDEAU.nroTarjeta : string.Empty;
                    objRequestRegistarAfil.montoMaximo = Funciones.CheckStr(objInfoDEAU.MontoTope);
                    if (Funciones.CheckDbl(objRequestRegistarAfil.montoMaximo) > 0)
                        objRequestRegistarAfil.flagMontoMaximo = Funciones.CheckStr(ReadKeySettings.key_FlagMontoDEAU).Split('|')[1];
                    else
                        objRequestRegistarAfil.flagMontoMaximo = Funciones.CheckStr(ReadKeySettings.key_FlagMontoDEAU).Split('|')[0];
                    objRequestRegistarAfil.monedaMontoMaximo = Funciones.CheckStr(ReadKeySettings.key_idMonedaDEAU);

                    objRequestRegistarAfil.canalMp = Funciones.CheckStr(ReadKeySettings.key_CanalMPSisactDEAU);
                    objRequestRegistarAfil.estadoMp = Funciones.CheckStr(ReadKeySettings.key_EstadoMpDEAU);
                    objRequestRegistarAfil.comentario = Funciones.CheckStr(ReadKeySettings.key_ComentarioDEAU);
                    objRequestRegistarAfil.correoClienteEnvioLink = Funciones.CheckStr(objInfoDEAU.Correo_Contacto);
                    objRequestRegistarAfil.telefonoClienteEnvioLink = Funciones.CheckStr(objInfoDEAU.Telefono_Contacto);
                    if (Funciones.CheckStr(hidCodProducto.Value) == ConfigurationManager.AppSettings["consTipoProducto3Play"])
                        objRequestRegistarAfil.tipiServicio = ReadKeySettings.key_TipoTipi3PlayDEAU;
                    else objRequestRegistarAfil.tipiServicio = ReadKeySettings.key_TipoTipiMovilDEAU;
                    objRequestRegistarAfil.tipiValor = string.Empty;
                    objRequestRegistarAfil.estadoEnvioLink = Funciones.CheckStr(ReadKeySettings.key_EstadoEnvioLinkDEAU);
                    objRequestRegistarAfil.estadoVenta = Funciones.CheckStr(ReadKeySettings.key_EstadoVentaDEAU);
                    objRequestRegistarAfil.estadoAfiliacion = (objInfoDEAU.flagTarjetaAfiliacion == 1) ? (string) ConfigurationManager.AppSettings["usarTarjetaEstadoAfiliacion"] : Funciones.CheckStr(ReadKeySettings.key_EstadoAfiliacionAltaDEAU);
                    objRequestRegistarAfil.telefonoClienteNotif = string.Empty;
                    objRequestRegistarAfil.correoClienteNotif = Funciones.CheckStr(objInfoDEAU.Correo_Contacto);
                    objRequestRegistarAfil.descCampanias = string.Empty;
                    objRequestRegistarAfil.fechaVencTarjeta = string.Empty;
                    #endregion

                    objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] objRequestRegistarAfil: ", Funciones.CheckStr(objRequestRegistarAfil)), null, null);

                    BodyResponseRegistraEnvioDEAU objRespRegAfiliacion = RegistrarAfiliacionDEAUAsistidos(objRequestRegistarAfil);

                    objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] RegistrarAfiliacionDEAUAsistidos=> mensajeRespuesta: ", Funciones.CheckStr(objRespRegAfiliacion.mensajeRespuesta)), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] RegistrarAfiliacionDEAUAsistidos=> idAfiliacion: ", Funciones.CheckStr(objRespRegAfiliacion.idAfiliacion)), null, null);

                    if (objRespRegAfiliacion.idAfiliacion != null && objInfoDEAU.flagTarjetaAfiliacion != 1)
                    {
                        objEnviaLink.codCanal = Funciones.CheckStr(ReadKeySettings.key_CanalMPSisactDEAU);
                        objEnviaLink.correo = objInfoDEAU.Correo_Contacto;
                        objEnviaLink.inicioVigenciaLink = DateTime.Now.AddMinutes(-5).ToString("yyyy-MM-ddTHH:mm:ssZ");
                        objEnviaLink.finVigenciaLink = DateTime.Now.AddDays(Funciones.CheckInt(ReadKeySettings.key_HorasFechaVencimientoDEAU)).ToString("yyyy-MM-ddTHH:mm:ssZ"); //Funciones.CheckStr(DateTime.Now.Date.AddDays(1));
                        objEnviaLink.idTransaccion = objRespRegAfiliacion.idAfiliacion;
                        objEnviaLink.msisdn = objInfoDEAU.Telefono_Contacto;
                        objEnviaLink.tipoFlujo = ReadKeySettings.key_TipoFlujoEnvioLinkDEAU;
                        objEnviaLink.clickMaximoLink = "2";
                        objEnviaLink.longitudHash = "7";
                        objEnviaLink.descripcion = "Afiliacion Presencial";
                        objEnviaLink.ip = ConfigurationManager.AppSettings["AfiliacionDEAUAsistidosWS_wsip"]; ;
                        //llamada a EnvioLink
                        BodyResponseEnviaLinkDEAU objResponseEnviaLink = EnviaLinkDEAU(objEnviaLink);

                        // INI INICIATIVA 941 - IDEA 142525
                        if (objResponseEnviaLink.codigoRespuesta != "0")
                        {
                            hidnEnvioLinkFallido.Value = "true";
                            hidnIdAfiliacionPrevio.Value = objRespRegAfiliacion.idAfiliacion;
                        }

                        // FIN INICIATIVA 941 - IDEA 142525

                        //set value
                        hidnMensajeEnvioLink.Value = Funciones.CheckStr(HttpContext.Current.Session["MensajeEnvioLink"]);

                        objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] EnviaLinkDEAU=> mensajeRespuesta: ", Funciones.CheckStr(objResponseEnviaLink.mensajeRespuesta)), null, null);
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] EnviaLinkDEAU=> codigoRespuesta: ", Funciones.CheckStr(objResponseEnviaLink.codigoRespuesta)), null, null);
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140657][sisact_evaluacion_unificada][Grabar] EnviaLinkDEAU=> idTransaccion: ", Funciones.CheckStr(objResponseEnviaLink.idTransaccion)), null, null);
                    }
                }

            }
            else
            {
                //PROY-140657 FIN
                //PROY-140457-DEBITO AUTOMATICO-INI
                if (validacionDebitoAutomatico)
                {
                    Int64 DnroSEC = Funciones.CheckInt64(hidNroSEC.Value);
                    string Doficina = Funciones.CheckStr(hidnOficinaActual.Value);
                    string tipoCliente = Funciones.CheckStr(ddlOferta.SelectedItem.Text);
                    string strTipoOperacion = Funciones.CheckStr(hidTipoOperacion.Value);
                    string strflagPortabilidad = Funciones.CheckStr(hidNTienePortabilidadValues.Value);
                    string cadenaDetalle = Funciones.CheckStr(hidCadenaDetalle.Value);
                    string producto = Funciones.CheckStr(hidCodProducto.Value);
                    string modalidadVenta = Funciones.CheckStr(hidModalidadVenta.Value);

                    GrabarAfiliacionDebitoAutomatico(DnroSEC, Doficina, strflagPortabilidad, strTipoOperacion, tipoCliente, cadenaDetalle, producto, modalidadVenta);
                }
                //PROY-140457-DEBITO AUTOMATICO-FIN
            }//PROY-140657


            if (Session["RequestReglaCrediticia" + nroDocumento] != null)//PROY-30748
                Session.Remove("RequestReglaCrediticia" + nroDocumento);//PROY-30748
            //Inicio IDEA-30067
            if (constFlagPortaAutomatico == "S")
            {
                PortaConsultaPreviaAutomatico();
            }
            //Fin IDEA-30067

            //PROY-140439 BRMS CAMPAÑA NAVIDEÑA::INI
            //ACTUALIZAR DATOS BRMS VALIDACION CAMPAÑAS
            if (Funciones.CheckStr(ReadKeySettings.Key_flagBRMSCamp).Equals("1"))
            {
                if (!string.IsNullOrEmpty(Funciones.CheckStr(HttpContext.Current.Session["idBRMS_Campanas"])))
                {
                    objLog.CrearArchivolog("[Inicio][ActualizarBRMSValidacionCampanas]", null, null);
                    string codRpta = string.Empty;
                    string msjRpta = string.Empty;
                    string idsBRMS = Funciones.CheckStr(HttpContext.Current.Session["idBRMS_Campanas"]);
                    idsBRMS = idsBRMS.Substring(0, idsBRMS.Length - 1);
                    Int64 nroSEC = Funciones.CheckInt64(hidNroSEC.Value);

                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][BorrarServicioProteccionMovil][idsBRMS] ", Funciones.CheckStr(idsBRMS)), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][BorrarServicioProteccionMovil][nroSEC] ", Funciones.CheckStr(nroSEC)), null, null);

                    bool rpta = BLEvaluacion.ActualizarBRMSValidacionCampanas(nroSEC, idsBRMS, ref codRpta, ref msjRpta);

                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][BorrarServicioProteccionMovil][strCodRespuesta] ", codRpta), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][BorrarServicioProteccionMovil][strMsjRespuesta] ", msjRpta), null, null);
                    objLog.CrearArchivolog("[Fin][ActualizarBRMSValidacionCampanas]", null, null);
                }
                HttpContext.Current.Session["idBRMS_Campanas"] = null;
            }
            //PROY-140439 BRMS CAMPAÑA NAVIDEÑA::FIN

            //PROY-140743-INI | GRABAR VENTA VV 
            if (Funciones.CheckStr(hidDatosEvalVV.Value) != "" && Equals(Funciones.CheckStr(ReadKeySettings.Key_FlagGeneralVtaCuotas), "1"))
            {
                string[] arrDatosEvalVV = Funciones.CheckStr(hidDatosEvalVV.Value).Split('|');
                string[] strDatosCuota = Funciones.CheckStr(hdnCuotasBRMS.Value).Split('_');
                string strProdCuentaFact = Funciones.CheckStr(hidProdCuentaFact.Value);

                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [hidDatosEvalVV]  ==> ", Funciones.CheckStr(hidDatosEvalVV.Value)), null, null);

                RegistrarVentaAccCuotasTypeRequest objRequest = new RegistrarVentaAccCuotasTypeRequest();

                objRequest.grupoMaterial = string.Empty;

                if (HttpContext.Current.Session["oBeLstRptaVV"] != null)
                {
                    List<BEItemGenerico> lstGeneric = (List<BEItemGenerico>)HttpContext.Current.Session["oBeLstRptaVV"];
                    foreach (BEItemGenerico item in lstGeneric)
                    {
                        if (Equals(item.Codigo, Funciones.CheckStr(arrDatosEvalVV[4])))
                            objRequest.grupoMaterial = Funciones.CheckStr(item.Tipo);
                    }
                }

                objRequest.numeroPedido = string.Empty;

                objRequest.modalidadVenta = Funciones.CheckStr(ddlModalidadVenta.SelectedValue);
                objRequest.nroCuotas = Funciones.CheckStr(strDatosCuota[0]);
                objRequest.flagCargoRecibo = "0";
                objRequest.cuotaInicialFinal = Funciones.CheckStr(strCuotaInicial);
                objRequest.tipoDocEvalCred = Funciones.CheckStr(hidTipoDocumento.Value);
                objRequest.nroDocEvalCred = Funciones.CheckStr(hidNroDocumento.Value);
                objRequest.numeroSec = Funciones.CheckStr(hidNroSEC.Value);
                objRequest.cuocCodigo = Funciones.CheckStr(strDatosCuota[0]);
                objRequest.cuotasBrms = Funciones.CheckStr(strDatosCuota[0]);
                objRequest.cuotaInicialBrms = Funciones.CheckStr(Funciones.CheckDbl(strDatosCuota[1], 2));
                objRequest.precioLista = Funciones.CheckStr(arrDatosEvalVV[7].Split('_')[0]);
                objRequest.cargoFijo = Funciones.CheckStr(objCliente.oVistaEvaluacion.cargoFijo);
                objRequest.cuotaInicial = Funciones.CheckStr(strCuotaInicial);
                objRequest.flagRepreLegalEC = string.Empty;
                objRequest.codPromocion = Funciones.CheckStr(arrDatosEvalVV[2]);
                objRequest.descPromocion = Funciones.CheckStr(arrDatosEvalVV[3]);
                objRequest.codAccesorio = Funciones.CheckStr(arrDatosEvalVV[4]);
                objRequest.servidorSec = CurrentHostName;
                objRequest.tipoProdFacturar = Funciones.CheckStr(arrDatosEvalVV[8]);//MOVIL O FIJA
                objRequest.descMaterialAcc = Funciones.CheckStr(HttpContext.Current.Session["nomLargoMaterialVV"]);

                if (Funciones.CheckStr(arrDatosEvalVV[8]).Equals("MOVIL"))
                {
                    objRequest.lineaFacturar = Funciones.CheckStr(arrDatosEvalVV[6]);// LINEA 959750982
                    objRequest.customerID = Funciones.CheckStr(arrDatosEvalVV[9]);// 
                    objRequest.coID = string.Empty;
                    objRequest.cuentaFacturar = string.Empty;
                    objRequest.descPlanFijo = string.Empty; //[PROY-140743-VENTA DE ACCESORIOS EN CUOTAS][FENCALAD]
                }
                else
                {
                    objRequest.lineaFacturar = string.Empty;
                    objRequest.customerID = Funciones.CheckStr(arrDatosEvalVV[9].Split('*')[0]);
                    objRequest.coID = Funciones.CheckStr(arrDatosEvalVV[6].Split('(')[0]);
                    objRequest.cuentaFacturar = Funciones.CheckStr(arrDatosEvalVV[9].Split('*')[1]);
                    objRequest.descPlanFijo = Funciones.CheckStr(arrDatosEvalVV[6].Split('(')[1]).Replace(")", "");  //[PROY-140743-VENTA DE ACCESORIOS EN CUOTAS][FENCALAD]
                }

                objRequest.servidorVenta = string.Empty;
                objRequest.listaOpcional = null;

                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [numeroPedido]  ==> ", Funciones.CheckStr(objRequest.numeroPedido)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [grupoMaterial]  ==> ", Funciones.CheckStr(objRequest.grupoMaterial)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [lineaFacturar]  ==> ", Funciones.CheckStr(objRequest.lineaFacturar)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [modalidadVenta]  ==> ", Funciones.CheckStr(objRequest.modalidadVenta)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [nroCuotas]  ==> ", Funciones.CheckStr(objRequest.nroCuotas)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [flagCargoRecibo]  ==> ", Funciones.CheckStr(objRequest.flagCargoRecibo)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [cuotaInicialFinal]  ==> ", Funciones.CheckStr(objRequest.cuotaInicialFinal)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [tipoDocEvalCred]  ==> ", Funciones.CheckStr(objRequest.tipoDocEvalCred)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [nroDocEvalCred]  ==> ", Funciones.CheckStr(objRequest.nroDocEvalCred)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [numeroSec]  ==> ", Funciones.CheckStr(objRequest.numeroSec)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [cuocCodigo]  ==> ", Funciones.CheckStr(objRequest.cuocCodigo)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [cuotasBrms]  ==> ", Funciones.CheckStr(objRequest.cuotasBrms)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [cuotaInicialBrms]  ==> ", Funciones.CheckStr(objRequest.cuotaInicialBrms)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [precioLista]  ==> ", Funciones.CheckStr(objRequest.precioLista)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [cargoFijo]  ==> ", Funciones.CheckStr(objRequest.cargoFijo)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [cuotaInicial]  ==> ", Funciones.CheckStr(objRequest.cuotaInicial)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [flagRepreLegalEC]  ==> ", Funciones.CheckStr(objRequest.flagRepreLegalEC)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [codPromocion]  ==> ", Funciones.CheckStr(objRequest.codPromocion)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [descPromocion]  ==> ", Funciones.CheckStr(objRequest.descPromocion)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [codAccesorio]  ==> ", Funciones.CheckStr(objRequest.codAccesorio)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [servidorSec]  ==> ", Funciones.CheckStr(objRequest.servidorSec)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [tipoProdFacturar]  ==> ", Funciones.CheckStr(objRequest.tipoProdFacturar)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [servidorVenta]  ==> ", Funciones.CheckStr(objRequest.servidorVenta)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [descMaterialAcc]  ==> ", Funciones.CheckStr(objRequest.descMaterialAcc)), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas][sisact_evaluacion_unificada][Grabar] [descPlanFijo]  ==> ", Funciones.CheckStr(objRequest.descPlanFijo)), null, null);  //[PROY-140743-VENTA DE ACCESORIOS EN CUOTAS][FENCALAD]

                if (!RegistrarEvalVentasVarias(objRequest))
                {
                    hidCodError.Value = "1";
                    hidnMensajeValue.Value = "Ocurrió un error al registrar la Solicitud.";
                }
                else
                {
                    HttpContext.Current.Session["objLineasAsociadas"] = null;
                    HttpContext.Current.Session["objCuentasAsociadas"] = null;
                    HttpContext.Current.Session["nomLargoMaterialVV"] = null;
                }
            }
            //PROY-140743-FIN

            PintarLogsGenerico("INC000004509732", "["+nroDocumento+"][sisact_evaluacion_unificada.aspx.cs][Grabar()] hidNuevoServicio.Value antes", Funciones.CheckStr(hidNuevoServicio.Value));

            hidNuevoServicio.Value = ""; //PROY-30748

            PintarLogsGenerico("INC000004509732", "["+nroDocumento+"][sisact_evaluacion_unificada.aspx.cs][Grabar()] hidNuevoServicio.Value despues", Funciones.CheckStr(hidNuevoServicio.Value));

            //PROY-32439 INI MAS
            HttpContext.Current.Session["ObjNvoBRMS"] = null;
            HttpContext.Current.Session["intFlagRRLL"] = null;
            HttpContext.Current.Session["blnRRLLBRMS"] = null;
            HttpContext.Current.Session["blnRRWhiteList"] = null;
            HttpContext.Current.Session["strSoloEvaluarFijo"] = null;
            HttpContext.Current.Session["ObjTienePorta"] = null; //PROY-32439
            //PROY-32439 FIN MAS

            HttpContext.Current.Session["objClienteDI"] = null;//PROY-140579
            HttpContext.Current.Session["objCodigosBrmsHistorial"] = null;//PROY-140579
            HttpContext.Current.Session["objIdsHistoricoProactiva"] = null;//PROY-140579 F2
            HttpContext.Current.Session["objCorrelativoBrmsHistorial"] = null;//PROY-140579
            HttpContext.Current.Session["objEquipoGarantiaProa"] = null;//PROY-140579
            HttpContext.Current.Session["SessionIsWhiteList"] = null;//PROY-140579

            //INI PROY 140141- MIGRACION KV FASE 2
            objLog.CrearArchivolog("[INICIO CAMBIO DE TITULARIDAD KV FASE 2 : GRABAR()]", null, null);

            try
            {
                if (hdnSecCT.Value != "")
                {
                    BEComentario item = new BEComentario();

                    objLog.CrearArchivolog("  [*IN hdnSecCT.Value " + hdnSecCT.Value + "]", null, null);
                    objLog.CrearArchivolog("  [*IN strNroSECPROA " + strNroSECPROA + "]", null, null);
                    objLog.CrearArchivolog("  [*IN hdnNumCT " + hdnNumCT.Value + "]", null, null);

                    new BLSolicitud().BGrabarSecTransac(hdnSecCT.Value, Funciones.CheckInt(strNroSECPROA), hdnNumCT.Value, CurrentUser, hdnEmail.Value);

                    objLog.CrearArchivolog("[FIN CAMBIO DE TITULARIDAD KV FASE 2 : GRABAR()]", null, null);
                }
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[ËRROR CAMBIO DE TITULARIDAD KV FASE 2 : GRABAR()]", null, ex);
            }
            //FIN PROY 140141- MIGRACION KV FASE 2

            //PROY-140383-INI
            _objLog.CrearArchivolog(string.Format("{0}-->{1}", "[PROY-Servicios Excluyentes] [INICIO]", string.Empty), null, null);
            RegistrarServiciosExcluyentesResponse objValidServExcResponse = new RegistrarServiciosExcluyentesResponse();
            string strCadServExc;
            string strCodRespExc = "0";
            string strMensRespExc;
            string strCurrentUser = string.Empty;
            string strCurrentTerminal = string.Empty;
            string strServExclu = hidInsServCon.Value;
            string strServMensCaido = hidServicioExcCaidoeval.Value;
            Int64 nroSec = Funciones.CheckInt64(hidNroSEC.Value);
            try
            {
                if (nroSec > 0 && strServExclu.Length > 0 || strServMensCaido.Length > 0)
                {
                    string strDescProc = "";
                    string strcodEstado = hidCodEstadoSEC.Value;
                    if (strServMensCaido.Length > 0)
                        strDescProc = strServMensCaido;
                    else
                        strDescProc = Funciones.CheckStr(AppSettings.consDescProceso);
                    string strTipoventa = ConfigurationManager.AppSettings["constCodTipoVentaPostPago"];

                    RegistrarServiciosExcluyentesRequest objRegistrarServiciosRequest = new RegistrarServiciosExcluyentesRequest();
                    BEAuditoriaRequest objBeAuditoriaRequest = new BEAuditoriaRequest();
                    Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();
                    RegistrarServExcluRequest objValServExc = new RegistrarServExcluRequest();
                    RestValidarServiciosExcluyentes objRestValidServEscluyentes = new RestValidarServiciosExcluyentes();
                    strCurrentUser = Funciones.CheckStr(Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers);
                    strCurrentTerminal = Funciones.CheckStr(Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal);

                    objBeAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    objBeAuditoriaRequest.timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ");
                    objBeAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["constUsuarioAplicacion"]);
                    objBeAuditoriaRequest.msgid = DateTime.Now.ToString("yyyyMMddHHmmssfff");

                    objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["constUsuarioAplicacion"]);
                    objHeaderRequest.country = AppSettings.ConsCountryInsertServExc;
                    objHeaderRequest.dispositivo = AppSettings.ConsDispositivoInsertServExc;
                    objHeaderRequest.language = AppSettings.ConsLanguajeInsertServExc;
                    objHeaderRequest.modulo = AppSettings.ConsModuloInsertServExc;
                    objHeaderRequest.msgType = AppSettings.ConsMsgtypeInsertServExc;
                    objHeaderRequest.operation = AppSettings.ConsOperationInsertServExc;
                    objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                    objHeaderRequest.system = AppSettings.ConsSystemInsertServExc;
                    objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                    objHeaderRequest.userId = hidUsuarioRed.Value;
                    objHeaderRequest.wsIp = AppSettings.ConsWsipInsertServExc;

                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.consumer : " + objHeaderRequest.consumer.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.country : " + objHeaderRequest.country.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.dispositivo : " + objHeaderRequest.dispositivo.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.language : " + objHeaderRequest.language.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.modulo : " + objHeaderRequest.modulo.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.msgType : " + objHeaderRequest.msgType.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.operation : " + objHeaderRequest.operation.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.pid : " + objHeaderRequest.pid.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.system : " + objHeaderRequest.system.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.timestamp : " + objHeaderRequest.timestamp.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.userId : " + objHeaderRequest.userId.ToString(), "", null);
                    _objLog.CrearArchivolog("[PROY 140383 InsertServiciosExcluyentes()] -> objHeaderRequest.wsIp : " + objHeaderRequest.wsIp.ToString(), "", null);

                    objRegistrarServiciosRequest.MessageRequest.header.HeaderRequest = objHeaderRequest;

                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.descripcionProceso = strDescProc;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.sec = Funciones.CheckStr(nroSec);
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.servicios = strServExclu;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.codigoTipoVenta = strTipoventa;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.codigoEstado = hidCodEstadoSEC.Value;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.codigoTipoOperacion = hidTipoOperacion.Value;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.codigoTipoProducto = hidCodProducto.Value;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.tipoDocumento = hidTipoDocumento.Value;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.numeroDocumento = hidNroDocumento.Value;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.puntoVenta = hidOficinaUsuario.Value;
                    objRegistrarServiciosRequest.MessageRequest.body.objInsertRequest.usuario = hidUsuarioRed.Value;

                    string strUsuarioInserEncrip = AppSettings.ConsUsuarioEncripServExc;
                    string strContraInserEncrip = AppSettings.ConsContraEncripServExc;

                    objValidServExcResponse = objRestValidServEscluyentes.RegistrarServiciosExcluyentes(objRegistrarServiciosRequest, objBeAuditoriaRequest, strUsuarioInserEncrip, strContraInserEncrip);

                    strCodRespExc = objValidServExcResponse.MessageResponse.body.strCodigoRespuesta;
                    strMensRespExc = objValidServExcResponse.MessageResponse.body.mensajeRespuesta;

                }
            }
            catch (Exception e)
            {
                objLog.CrearArchivolog("[ERROR InsertServiciosExcluyentes: GRABAR()]", null, e);
            }
            //PROY-140383-FIN

            //PROY-140585 F2 - INICIO
            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] Session(SMSPNCodigoPorta)", Funciones.CheckStr(HttpContext.Current.Session["SMSPNCodigoPorta"])), null, null);
            Int64 SMSPNCodigo = 0;
            string codigoRespuesta = string.Empty;
            string mensajeRespuesta = string.Empty;
            bool salidaSMS = false;
            SMSPNCodigo = Funciones.CheckInt64(HttpContext.Current.Session["SMSPNCodigoPorta"]);
            string strflagPorta = Funciones.CheckStr(hidNTienePortabilidadValues.Value);

            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad]  strflagPorta", strflagPorta), null, null);
            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad]  SMSPNCodigo", Funciones.CheckStr(SMSPNCodigo)), null, null);
            try
            {
                if (SMSPNCodigo > 0 && strflagPorta == "S")
                {
                    _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] hidNroSEC", Funciones.CheckStr(hidNroSEC.Value)), null, null);

                    salidaSMS = BLEvaluacion.ActualizarSECSMSPortabilidad(SMSPNCodigo, Funciones.CheckInt64(hidNroSEC.Value), ref codigoRespuesta, ref mensajeRespuesta);
                    if (salidaSMS)
                    {
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] codigoRespuesta", Funciones.CheckStr(codigoRespuesta)), null, null);
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] mensajeRespuesta", Funciones.CheckStr(mensajeRespuesta)), null, null);
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] salidaSMS", Funciones.CheckStr(salidaSMS)), null, null);
                        codigoRespuesta = string.Empty;
                        mensajeRespuesta = string.Empty;
                    }
                    else
                    {
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] codigoRespuesta", Funciones.CheckStr(codigoRespuesta)), null, null);
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] mensajeRespuesta", Funciones.CheckStr(mensajeRespuesta)), null, null);
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][Grabar()-ActualizarSECSMSPortabilidad] salidaSMS", Funciones.CheckStr(salidaSMS)), null, null);
                        codigoRespuesta = string.Empty;
                        mensajeRespuesta = string.Empty;
                    }
                }

                //INICIATIVA-805 - INICIO - Campana Descuento Cargo Fijo
                if (Funciones.CheckInt64(HttpContext.Current.Session["FullClaro"]) == 1 || Funciones.CheckInt64(HttpContext.Current.Session["CandidatoFC"]) == 1)
                {
                    BodyRequestValidarAplicaDsctoCF objRequestValidarAplicaDsctoCF = new BodyRequestValidarAplicaDsctoCF();
                    BodyRequestRegistrarClienteFCDsctCF objRequestRegistrarClienteFCDsctCF = new BodyRequestRegistrarClienteFCDsctCF();
                    BWBeneficioFullClaro objBeneficioFC = new BWBeneficioFullClaro();
                    Boolean respEvaluar = false;
                    Boolean resRegistro = false;
                    string strPlataforma = null;
                    string strFullclaro = null;
                    string strBono = null;
                    string strMeses = null;
                    string strCodCampana = null;
                    string strDesCampana = null;
                    string strPlan = null;
                    string strPlanPVU = null;
                    string strTmcode = null;
                    string strPoId = null;
                    string strTipoServicio = null;
                    string strDatosPlano = Funciones.CheckStr(HttpContext.Current.Session["DatosPlan"]);
                    List<BENuevosProductosFC> objNuevosProductosFC = (List<BENuevosProductosFC>)HttpContext.Current.Session["planesEvaluadosFC"]; //MOVIL TOBE
                    List<BEDatosClienteFC> objlistOnHoldClienteFC = (List<BEDatosClienteFC>)HttpContext.Current.Session["listOnHoldClienteFC"]; //MOVIL ASIS
                    List<BEDatosClienteFC> objListaBeneficioElegido = (List<BEDatosClienteFC>)HttpContext.Current.Session["ListaBeneficioElegidoFC"]; //FIJA ASIS

                    if (!string.IsNullOrEmpty(strDatosPlano))
                    {
                        foreach (string items in strDatosPlano.Split('|').Where(w => !string.IsNullOrEmpty(w)).ToList())
                        {
                            string[] arrCadena = items.Split(';');
                            strCodCampana = arrCadena[8].ToString();
                            strDesCampana = arrCadena[9].ToString();
                            strPlanPVU = arrCadena[5].ToString();
                            break;
                        }
                    }

                    if (hidCodProducto.Value == "01")
                    {
                        if (Funciones.CheckStr(HttpContext.Current.Session["flagCBIO"]) == "1")
                        {
                            strPlataforma = "9";
                        }
                        else
                        {
                            strPlataforma = "7";
                        }
                    }
                    else
                    {
                        strPlataforma = "7";
                    }
                    _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strPlataforma", strPlataforma), null, null);

                    respEvaluar = objBeneficioFC.EvaluarAplicaDescuento("1", strCodCampana, strPlanPVU, null, strPlataforma, ref strBono, ref strMeses);
                    _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][EvaluarAplicaDescuento] respEvaluar ", Funciones.CheckStr(respEvaluar)), null, null);

                    if (respEvaluar)
                    {
                        if (Funciones.CheckInt64(HttpContext.Current.Session["FullClaro"]) == 1)
                        {
                            strFullclaro = "1";
                        }
                        if (Funciones.CheckInt64(HttpContext.Current.Session["CandidatoFC"]) == 1)
                        {
                            strFullclaro = "2";
                        }
                        else
                        {
                            strFullclaro = "";
                        }
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strFullclaro", strFullclaro), null, null);
                        if (hidCodProducto.Value == "01")
                        {
                            strTipoServicio = "MOVIL";
                            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strTipoServicio", strTipoServicio), null, null);
                            if (objNuevosProductosFC != null && objNuevosProductosFC.Any() && strPlataforma == "9")
                            {
                                _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] objNuevosProductosFC.Count", Funciones.CheckStr(objNuevosProductosFC.Count)), null, null);
                                foreach (BENuevosProductosFC item in objNuevosProductosFC)
                                {
                                    _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] objNuevosProductosFC.planPvu", Funciones.CheckStr(item.planPvu)), null, null);
                                    if (item.planPvu == strPlanPVU)
                                    {
                                        strTmcode = item.tmcode;
                                        strPoId = item.po_id;
                                    }
                                }
                            }

                            if (objlistOnHoldClienteFC != null && objlistOnHoldClienteFC.Any() && strPlataforma == "7")
                            {
                                _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] objlistOnHoldClienteFC.Count", Funciones.CheckStr(objlistOnHoldClienteFC.Count)), null, null);
                                foreach (BEDatosClienteFC item in objlistOnHoldClienteFC)
                                {
                                    _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] objNuevosProductosFC.planPvudb", Funciones.CheckStr(item.planPvudb)), null, null);
                                    if (item.planPvudb == strPlanPVU)
                                    {
                                        strTmcode = item.tmCode;
                                    }
                                }
                            }
                        }
                        else
                        {
                            strTipoServicio = "FIJO";
                            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strTipoServicio", strTipoServicio), null, null);
                            if (objListaBeneficioElegido != null && objListaBeneficioElegido.Any())
                            {
                                _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] objListaBeneficioElegido.Count", Funciones.CheckStr(objListaBeneficioElegido.Count)), null, null);
                                foreach (BEDatosClienteFC item in objListaBeneficioElegido)
                                {
                                    _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] objListaBeneficioElegido.planPvudb", Funciones.CheckStr(item.planPvudb)), null, null);
                                    if (item.planPvudb == strPlanPVU)
                                    {
                                        strTmcode = item.tmCode;
                                    }
                                }
                            }
                        }

                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strTmcode", strTmcode), null, null);
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strPoId", strPoId), null, null);

                        if (strPlataforma == "9")
                        {
                            strPlan = strPoId;
                        }

                        if (strPlataforma == "7")
                        {
                            strPlan = strTmcode;
                        }

                        if (string.IsNullOrEmpty(strPlan))
                        {
                            strPlan = "0";
                        }

                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] strPlan", strPlan), null, null);

                        resRegistro = objBeneficioFC.RegistroLineaMovil(
                        ConvierteTipoDocumento(hidTipoDocumento.Value),
                        hidNroDocumento.Value,
                        null, null, null, "1", strPlataforma, strTipoServicio,
                        strCodCampana, strDesCampana, hidNroSEC.Value, "0",
                        hidCodProducto.Value, strPlan,
                        strPlanPVU, strBono, strMeses, strFullclaro, hidUsuarioRed.Value);

                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] respEvaluar ", Funciones.CheckStr(resRegistro)), null, null);

                        if (!respEvaluar)
                        {
                            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][RegistroLineaMovil] [ERROR]", "Registro erronea. Se termina el proceso"), null, null);
                        }
                    }
                    else
                    {
                        _objLog.CrearArchivolog(string.Format("{0}:{1}", "[CampanaDescuentoCargoFijo][EvaluarAplicaDescuento] [ERROR]", "Evaluacion erronea. Se termina el proceso"), null, null);
                    }
                }

                //INICIATIVA-805 - FIN - Campana Descuento Cargo Fijo
            }
            catch (Exception e)
            {
                objLog.CrearArchivolog("[PROY-140585 F2][ERROR ActualizarSECSMSPortabilidad: GRABAR()]", null, e);
            }
            //PROY-140585 F2 - FIN 
        }

        private bool ValidarSecConcurrente()
        {
            string nroDocumento = hidNroDocumento.Value;
            string tipoDocumento = hidTipoDocumento.Value;

            // Valida si en el transcurro de tiempo de la evaluación no se ha realizado otra SEC al cliente
            Int64 nroSEC = (new BLEvaluacion()).ValidarSecConcurrente(tipoDocumento, nroDocumento, hidFechaHoraConsulta.Value);
            if (nroSEC > 0)
            {
                hidCodError.Value = "1";
                hidnMensajeValue.Value = ConfigurationManager.AppSettings["consMsjSecConcurrente"].ToString();
                return true;
            }
            return false;
        }

        //DIL::INI::20170910
        private string ValidarCantidadLineasPermitidas(string strTipoProducto, string strTipoOperacion, string strTipoDocCliente, string strNroDocumentoCliente)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, strNroDocumentoCliente, null, "WEB");
            objLog.CrearArchivolog("[Inicio][GrabarEvaluacionDNI]", null, null);

            // [INC000002442213]
            List<BEPlanDetalleVenta> arrPlanDetalle = null;
            try
            {
                arrPlanDetalle = ObtenerPlanDetalle();
            }
            catch (Exception e)
            {
                objLog.CrearArchivolog("[INC000002442213][Validacion error: ]" + e.Message, null, null);
                return e.Message;
            }
            // [INC000002442213]

            BWValidarLinea objValidaLinea = new BWValidarLinea();
            BEValidarLineaAuditoria objAudit = new BEValidarLineaAuditoria();
            BEValidarLinea objClienteLineas = new BEValidarLinea();
            Boolean blnContarLineas;
            Boolean blnContinuarProceso;
            Int32 intRespuestaCodigo;
            String strRespuestaMensaje;
            String strCanal = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[2];
            Int32 intCantidadLineasCliente;
            Int32 intCantidadLineasPermitidas = Funciones.CheckInt(ConfigurationManager.AppSettings["keyValidarLineas_CantidadPermitida"].ToString());
            String strCantidadLineasPermitidas_Mensaje = "";
            String strCantidadLineasPermitidas_MensajeValidacionAdvertencia = ConfigurationManager.AppSettings["keyValidarLineas_MensajeValidacionAdvertencia"].ToString();
            String strCantidadLineasPermitidas_MensajeValidacionRestrictiva = ConfigurationManager.AppSettings["keyValidarLineas_MensajeValidacionRestrictiva"].ToString();
            strCantidadLineasPermitidas_MensajeValidacionAdvertencia = strCantidadLineasPermitidas_MensajeValidacionAdvertencia.Replace("*", Funciones.CheckStr(intCantidadLineasPermitidas));
            strCantidadLineasPermitidas_MensajeValidacionRestrictiva = strCantidadLineasPermitidas_MensajeValidacionRestrictiva.Replace("*", Funciones.CheckStr(intCantidadLineasPermitidas));
            int intProductosMoviles = arrPlanDetalle.Where(w => w.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProductoMovil"].ToString()).Count();
            objLog.CrearArchivolog("[Inicio][Validacion de cantida de lineas]", null, null);
            objLog.CrearArchivolog("[Tipo Documento] =>" + strTipoDocCliente, null, null);
            //[PROY-140600] - INI
            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|strTipoDocCliente: ", Funciones.CheckStr(strTipoDocCliente)), null, null);
            HttpContext.Current.Session["LineasTipi"] = null;
            if (AppSettings.Key_CLCodDocPermitido.IndexOf(strTipoDocCliente) > -1 &&
                //[PROY-140600] - FIN
                intProductosMoviles > 0
                && strTipoOperacion == ConfigurationManager.AppSettings["constTipoOperacionVNA"].ToString())
            {
                objAudit.strUsuarioAplicacion = CurrentUsers;
                objAudit.strNombreAplicacion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                objAudit.strIpAplicacion = CurrentTerminal;
                objAudit.strIdTransaccion = string.Format("{0}{1}", strNroDocumentoCliente, DateTime.Now.ToString("yyyyMMddss"));

                objLog.CrearArchivolog("[Inicio][contarLineas]", null, null);
                objLog.CrearArchivolog("[INP][Documento] => " + strNroDocumentoCliente, null, null);

                //[PROY-140600] INI
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|strNroDocumentoCliente: ", Funciones.CheckStr(strNroDocumentoCliente)), null, null);
                strNroDocumentoCliente = Claro.SISACT.Common.Funciones.FormatoNroDocumento(strTipoDocCliente, strNroDocumentoCliente);//[PROY-140600]
                blnContarLineas = objValidaLinea.contarLineas(objAudit, strNroDocumentoCliente, strTipoDocCliente, out intRespuestaCodigo, out strRespuestaMensaje, out objClienteLineas);//[PROY-140600] JMGF                
                objClienteLineas.tdoc_cliente = strTipoDocCliente;
                objClienteLineas.nroDoc_cliente = strNroDocumentoCliente;
                objClienteLineas.nLineasNuevas = Funciones.CheckInt(arrPlanDetalle.Count);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|arrPlanDetalle.Count: ", Funciones.CheckStr(arrPlanDetalle.Count)), null, null);
                //[PROY-140600] FIN 

                intCantidadLineasCliente = objClienteLineas.intCantidadLineasActivas;

                objLog.CrearArchivolog("[OUT][Cod Respuesta] => " + intRespuestaCodigo, null, null);
                objLog.CrearArchivolog("[OUT][Msg Respuesta] => " + strRespuestaMensaje, null, null);
                objLog.CrearArchivolog("[OUT][Cantidad Lineas] => " + intCantidadLineasCliente, null, null);
                objLog.CrearArchivolog("[CANTIDAD DE LINEAS AGREGADAS] => " + arrPlanDetalle.Count, null, null);

                intCantidadLineasCliente = intCantidadLineasCliente + arrPlanDetalle.Count;
                objLog.CrearArchivolog("[CANTIDAD DE LINEAS + LINEAS AGREGADAS] => " + intCantidadLineasCliente, null, null);

                if (blnContarLineas)
                {
                    if (intCantidadLineasCliente <= intCantidadLineasPermitidas) //Permitido
                    {
                        objLog.CrearArchivolog("[OUT][Cantidad Lineas] => PERMITIDO " + intCantidadLineasCliente, null, null);
                        blnContinuarProceso = true;
                    }
                    else
                    {
                        if (strCanal == ConfigurationManager.AppSettings["constCodTipoOficinaCAC"].ToString())
                        {
                            objLog.CrearArchivolog("[OUT][Cantidad Lineas] => CAC PERMITIDO " + intCantidadLineasCliente, null, null);
                            strCantidadLineasPermitidas_Mensaje = strCantidadLineasPermitidas_MensajeValidacionAdvertencia;
                            blnContinuarProceso = true;
                            //[PROY-140600] INI
                            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|Key_CLProductoPermitidoPost: ", Funciones.CheckStr(AppSettings.Key_CLProductoPermitidoPost)), null, null);
                            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|strTipoProducto: ", Funciones.CheckStr(strTipoProducto)), null, null);
                            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|Key_CLOperacionPermitidaPost: ", Funciones.CheckStr(AppSettings.Key_CLOperacionPermitidaPost)), null, null);
                            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][ValidarLineasPermitidas]|strTipoOperacion: ", Funciones.CheckStr(strTipoOperacion)), null, null);
                            if (Funciones.CheckStr(AppSettings.Key_CLProductoPermitidoPost).IndexOf(strTipoProducto) > -1 &&
                                Funciones.CheckStr(AppSettings.Key_CLOperacionPermitidaPost).IndexOf(strTipoOperacion) > -1)
                                HttpContext.Current.Session["LineasTipi"] = objClienteLineas;
                            //[PROY-140600] FIN
                            Alert(strCantidadLineasPermitidas_Mensaje);
                        }
                        else
                        {
                            objLog.CrearArchivolog("[OUT][Cantidad Lineas] => DAC/CAD NO PERMITIDO " + intCantidadLineasCliente, null, null);
                            strCantidadLineasPermitidas_Mensaje = strCantidadLineasPermitidas_MensajeValidacionRestrictiva;
                            blnContinuarProceso = false;
                        }
                    }
                }
                else
                {
                    objLog.CrearArchivolog("[ERROR][Cantidad Lineas] => " + strRespuestaMensaje, null, null);
                    strCantidadLineasPermitidas_Mensaje = "Error al validar la cantidad de lineas del cliente.";
                    blnContinuarProceso = false;
                }

                if (!blnContinuarProceso)
                {
                    objLog.CrearArchivolog("[FIN][contarLineas][NO CONTINUAR]", null, null);
                    return strCantidadLineasPermitidas_Mensaje;
                }
                objLog.CrearArchivolog("[FIN][contarLineas][CONTINUAR]", null, null);
            }

            return string.Empty;
        }
        //DIL::FIN::20170910

        private void GrabarEvaluacionDNI()
        {
            Int64 nroSEC = 0;
            Int64 nroSECPadre = 0;
            bool blnGrabarMovil = false;
            bool blnGrabarVentaVarios = false;
            string strPlan = string.Empty;
            string strPlazoAcuerdo = string.Empty;
            string strMensajeSEC = string.Empty;
            string idNroDocumento = hidNroDocumento.Value;
            string strCadenaCuotaInicial = hidConcatCuotaServer.Value; //PROY-30166-IDEA–38863-INICIO
            bool blnArregloCuotaInicialCargado = false; //PROY-30166-IDEA–38863-FIN
            bool productoEnc = false; //PROY 30166

            GeneradorLog objLog = new GeneradorLog(CurrentUser, idNroDocumento, null, "WEB");
            objLog.CrearArchivolog("[Inicio][GrabarEvaluacionDNI]", null, null);

            try
            {
                List<BEPlanDetalleVenta> arrPlanDetalle = ObtenerPlanDetalle();
                Vista_SolicitudDC_Reporte vista = new Vista_SolicitudDC_Reporte();
                BESolicitudPersona objSolicitud = DatosEvalPersona(ref vista);

                Session["nroSecPadre"] = Funciones.CheckInt64(objSolicitud.SOLIN_CODIGO_PADRE); //PROY-140546 FASE 2
                double dblImporteGrupoSEC = objCliente.oVistaEvaluacion.importeGarantia;
                double dblCFGrupoSEC = objCliente.oVistaEvaluacion.cargoFijo;

                List<BEItemGenerico> objListaProducto = new BLGeneral().ListarProducto();

                //gaa20151210
                if (hidPlazoReno.Value.Length > 0)
                    objSolicitud.FLAG_VALIDARSECPENDIENTE = "N";
                else
                    objSolicitud.FLAG_VALIDARSECPENDIENTE = "S";
                //fin gaa20151210             
                objSolicitud.DEUDA_CLIENTE = hidDeudaCliente.Value;//PROY-29121 

                //PROY-29215 INICIO
                string strFormaPago = Funciones.CheckStr(hidFP.Value);
                string strNroCuotas = Funciones.CheckStr(hidCP.Value);
                String[] arrFormaPago = strFormaPago.Split('|');
                String[] arrCuotaPago = strNroCuotas.Split('|');
                //PROY-29215 FIN

                foreach (BEItemGenerico item in objListaProducto)
                {
                    ArrayList objPlanDetalle = new ArrayList();
                    blnGrabarMovil = false;
                    double dblCFTotal = 0;
                    BEGarantia objGarantia = new BEGarantia();
                    int p = 0; //PROY-29215
                    foreach (BEPlanDetalleVenta plan in arrPlanDetalle)
                    {
                        objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEvaluacionDNI] plan", Funciones.CheckStr(new JavaScriptSerializer().Serialize(plan))), null);

                        if (item.Codigo == plan.PRDC_CODIGO)
                        {
                            productoEnc = true; //PROY 30166
                            if (plan.PRDC_CODIGO == constTipoProductoVentaVarios)
                            {
                                // Grabar Detalle Equipo
                                objPlanDetalle.Add(plan);
                                blnGrabarVentaVarios = true;
                            }
                            else
                            {
                                //  Consultar Garantías x Producto
                                foreach (BEGarantia obj in objCliente.oVistaEvaluacion.oGarantia)
                                {
                                    if (obj.idProducto == item.Codigo)
                                    {
                                        objGarantia = obj;
                                    }
                                }

                                //PROY-29215 INICIO
                                // EMERGENCIA-29215-INICIO
                                if (plan.PRDC_CODIGO == constTipoProductoDTH || plan.PRDC_CODIGO == constTipoProductoHFC || plan.PRDC_CODIGO == constTipoProducto3PlayInalam || plan.PRDC_CODIGO == constTipoProductoFTTH)
                                // EMERGENCIA-29215-FIN
                                {
                                    int cantPlan = arrPlanDetalle.Count;

                                    if (arrFormaPago[p] != "")
                                    {
                                        plan.FORMA_PAGO = arrFormaPago[p].ToString();
                                    }
                                    if (arrCuotaPago[p] != "")
                                    {
                                        plan.CUOTA_PAGO = arrCuotaPago[p].ToString();
                                    }

                                }
                                //PROY-29215 FIN

                                objSolicitud.idFila = plan.SOPLN_ORDEN;
                                strPlan = plan.PLANC_CODIGO;
                                strPlazoAcuerdo = plan.PACUC_CODIGO;
                                dblCFTotal = dblCFTotal + plan.CARGO_FIJO_LIN;
                                if (!(item.Codigo == constTipoProductoDTH || item.Codigo == constTipoProductoHFC || item.Codigo == constTipoProducto3PlayInalam || item.Codigo == constTipoProductoFTTH)) //FTTH
                                {
                                    objPlanDetalle.Add(plan);
                                    blnGrabarMovil = true;
                                }
                                else
                                {
                                    objPlanDetalle = new ArrayList();
                                    objPlanDetalle.Add(plan);

                                    objSolicitud.PACUC_CODIGO = strPlazoAcuerdo;
                                    objSolicitud.SOLIN_CAN_LIN = arrPlanDetalle.Count;
                                    objSolicitud.SOLIC_TIP_CAR_MAN = objGarantia.idGarantia;
                                    objSolicitud.SOLIN_IMP_DG_MAN = objGarantia.importe;
                                    objSolicitud.SOLIC_TIP_CAR_FIJ = objGarantia.idGarantia;
                                    objSolicitud.SOLIN_IMP_DG = objGarantia.importe;
                                    objSolicitud.SOLIN_SUM_CAR_CON = dblCFTotal;
                                    objSolicitud.SOLIN_NUM_CAR_FIJ = objGarantia.nroGarantia;
                                    objSolicitud.PRDC_CODIGO = item.Codigo;
                                    objSolicitud.SOLIN_GRUPO_SEC = nroSECPadre;
                                    objSolicitud.SOLIN_IMP_DG_GRUPO_SEC = dblImporteGrupoSEC;
                                    objSolicitud.SOLIN_CF_GRUPO_SEC = dblCFGrupoSEC;

                                    objSolicitud.oPlanDetalle = objPlanDetalle;
                                    objSolicitud.SOLIN_KIT_COS_INST = plan.SOLIN_COSTO_INST_DTH;

                                    if (item.Codigo == constTipoProductoDTH)
                                    {
                                        double dblAlquiler = 0;
                                        double dblInstalacion = 0;
                                        if (plan.FLAG_TITULARIDAD != "S")
                                        {
                                            (new BLConsumer()).ObtenerCostoAlquilerInstalKIT(plan.MATERIAL, plan.CAMPANA, plan.PACUC_CODIGO, ref dblAlquiler, ref dblInstalacion);
                                        }

                                        objSolicitud.CAMPV_CODIGO = plan.CAMPANA;
                                        objSolicitud.SOLIN_CF_ALQUILER_KIT = dblAlquiler;
                                    }

                                    // GRABAR SEC
                                    nroSEC = GrabarPersona(objSolicitud, vista);

                                    strNroSECPROA = nroSEC.ToString(); //Proy-30748

                                    if (nroSECPadre == 0)
                                    {
                                        nroSECPadre = nroSEC;
                                    }
                                    dblCFTotal = 0;
                                }
                            }
                            p++;//PROY-29215
                        }
                    }

                    objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEvaluacionDNI] blnGrabarMovil", blnGrabarMovil), null);

                    if (blnGrabarMovil)
                    {
                        //Inicio IDEA-30067
                        hidProductoPortAuto.Value = item.Codigo;
                        //Fin IDEA-30067

                        // GRABAR SEC
                        objSolicitud.SOLIC_PLA_MAX_1 = strPlan;
                        objSolicitud.PACUC_CODIGO = strPlazoAcuerdo;
                        objSolicitud.SOLIN_CAN_LIN = arrPlanDetalle.Count;
                        objSolicitud.SOLIC_TIP_CAR_MAN = objGarantia.idGarantia;
                        objSolicitud.SOLIN_IMP_DG_MAN = objGarantia.importe;
                        objSolicitud.SOLIC_TIP_CAR_FIJ = objGarantia.idGarantia;
                        objSolicitud.SOLIN_IMP_DG = objGarantia.importe;
                        objSolicitud.SOLIN_SUM_CAR_CON = dblCFTotal;
                        objSolicitud.SOLIN_NUM_CAR_FIJ = objGarantia.nroGarantia;
                        objSolicitud.PRDC_CODIGO = item.Codigo;
                        objSolicitud.SOLIN_GRUPO_SEC = nroSECPadre;
                        objSolicitud.SOLIN_IMP_DG_GRUPO_SEC = dblImporteGrupoSEC;

                        if (blnSecTieneProteccionMovil) //PROY-24724-IDEA-28174 - INICIO
                            objSolicitud.SOLIN_CF_GRUPO_SEC = objSolicitud.SOLIN_SUM_CAR_CON;
                        else //PROY-24724-IDEA-28174 - FIN
                            objSolicitud.SOLIN_CF_GRUPO_SEC = dblCFGrupoSEC;

                        objSolicitud.oPlanDetalle = objPlanDetalle;

                        nroSEC = GrabarPersona(objSolicitud, vista);

                        strNroSECPROA = nroSEC.ToString(); //Proy-30748

                        if (nroSECPadre == 0)
                        {
                            nroSECPadre = nroSEC;
                        }

                        bool blnDetalleTieneProteccionMovil = false; //PROY-24724-IDEA-28174 - INICIO
                        BEPlanDetalleVenta objPlanDetalleVenta;
                        string strConcatPrima = hidConcatPrimaServer.Value;
                        String[] arrConcatPrima = strConcatPrima.Split('|');

                        if (blnSecTieneProteccionMovil)
                        {
                            for (int x = 0; x < objSolicitud.oPlanDetalle.Count; x++)
                            {
                                objPlanDetalleVenta = (BEPlanDetalleVenta)objSolicitud.oPlanDetalle[x];

                                for (int y = 0; y < objPlanDetalleVenta.SERVICIO.Count; y++)
                                {
                                    if (((BESecServicio_AP)objPlanDetalleVenta.SERVICIO[y]).SERVV_CODIGO == strCodServProteccionMovil)
                                        blnDetalleTieneProteccionMovil = true;
                                }

                                if (blnDetalleTieneProteccionMovil)
                                {
                                    BEPrima objGuardarPrima = new BEPrima();
                                    objGuardarPrima.NroSec = Funciones.CheckStr(nroSEC);
                                    objGuardarPrima.TipoOperacion = objSolicitud.TOPEN_CODIGO;
                                    objGuardarPrima.TipoCliente = ddlOferta.SelectedItem.Text;
                                    objGuardarPrima.TipoDoc = objSolicitud.TDOCC_CODIGO;
                                    objGuardarPrima.NroDoc = objSolicitud.NRO_DOCUMENTO.Trim();
                                    objGuardarPrima.DescProt = strDescServProteccionMovil;
                                    objGuardarPrima.FlagPortabilidad = objSolicitud.FLAG_PORTABILIDAD;
                                    objGuardarPrima.FlagEstado = strCodEstadoGuardarPrima;
                                    objGuardarPrima.Resultado = strCodEstadoGuardarPrima;
                                    objGuardarPrima.FechaEvaluacion = DateTime.Now.Date.ToString("dd/MM/yyyy");
                                    objGuardarPrima.UsrMod = CurrentUser;
                                    objGuardarPrima.SoplnCodigo = Funciones.CheckStr(objPlanDetalleVenta.SOPLN_CODIGO);
                                    objGuardarPrima.CodMaterial = objPlanDetalleVenta.MATERIAL;

                                    foreach (string strPrima in arrConcatPrima)
                                    {
                                        String[] arrPrima = strPrima.Split(';');
                                        if (arrPrima[0].Equals(Funciones.CheckStr(objPlanDetalleVenta.SOPLN_ORDEN)))
                                        {
                                            string strDeducibles = arrPrima[2];
                                            objGuardarPrima.MontoPrima = arrPrima[1];
                                            objGuardarPrima.DeducibleRobo = new String(strDeducibles.Split('-')[0].ToCharArray().Where(c => Char.IsDigit(c)).ToArray());
                                            objGuardarPrima.DeducibleDanio = new String(strDeducibles.Split('-')[1].ToCharArray().Where(c => Char.IsDigit(c)).ToArray());
                                            objGuardarPrima.NroCertif = arrPrima[3];
                                            objGuardarPrima.NombreProd = arrPrima[4];
                                            objGuardarPrima.DescProd = arrPrima[5];
                                            objGuardarPrima.IncidenciaTipoDanio = arrPrima[6];
                                            objGuardarPrima.IncidenciaTipoRobo = arrPrima[7];
                                        }
                                    }
                                    arrGuardarPrima.Add(objGuardarPrima);
                                    blnDetalleTieneProteccionMovil = false;
                                }
                            }
                        } //PROY-24724-IDEA-28174 - FIN
                    }

                    //if(!blnArregloCuotaInicialCargado) //PROY-30166-IDEA–38863-INICIO
                    if (productoEnc && !blnArregloCuotaInicialCargado) //PROY-30166-IDEA–38863-INICIO
                    {
                        if (!string.IsNullOrEmpty(strCadenaCuotaInicial))
                        {
                            objLog.CrearArchivolog("[INICIO Grabar Evaluacion DNI - Cadena Cuota Inicial]", null, null);
                            strCadenaCuotaInicial = strCadenaCuotaInicial.Substring(1, strCadenaCuotaInicial.Length - 1);
                            objLog.CrearArchivolog("[ * Cadena Cuota Inicial: " + strCadenaCuotaInicial + "]", null, null);
                            String[] arrCuotaInicial = strCadenaCuotaInicial.Split('|');
                            BEPlanDetalleVenta objPlanDetalleVenta = new BEPlanDetalleVenta();
                            Int64 intSoplnCodigo = 0;
                            double dblMontoCuotaInicial = 0.0;

                            foreach (string strConcatCuotaInicial in arrCuotaInicial)
                            {
                                int strIndiceOrden = strConcatCuotaInicial.IndexOf("*ID") + "*ID".Length;
                                string strOrden = strConcatCuotaInicial.Substring(strIndiceOrden, 1);
                                objLog.CrearArchivolog("[ * Orden: " + strOrden + "]", null, null);

                                for (int i = 0; i < objSolicitud.oPlanDetalle.Count; i++)
                                {
                                    BEPlanDetalleVenta objPlanDetalleVta = (BEPlanDetalleVenta)objSolicitud.oPlanDetalle[i];

                                    if (strOrden.Equals(Funciones.CheckStr(objPlanDetalleVta.SOPLN_ORDEN)))
                                    {
                                        intSoplnCodigo = objPlanDetalleVta.SOPLN_CODIGO;
                                        dblMontoCuotaInicial = Funciones.CheckDbl(strConcatCuotaInicial.Split('*')[2]);
                                        objLog.CrearArchivolog("[ * SOPLN_CODIGO: " + intSoplnCodigo + "]", null, null);
                                        objLog.CrearArchivolog("[ * Monto Cuota Inicial: " + dblMontoCuotaInicial + "]", null, null);
                                    }
                                }
                                strCadenaGrabaCuotaInicial += intSoplnCodigo + ";" + dblMontoCuotaInicial + "|";
                            }
                            strCadenaGrabaCuotaInicial = strCadenaGrabaCuotaInicial.Substring(0, strCadenaGrabaCuotaInicial.Length - 1);
                            blnArregloCuotaInicialCargado = true;
                            objLog.CrearArchivolog("[ * Cadena Graba Cuota Inicial: " + strCadenaGrabaCuotaInicial + "]", null, null);
                            objLog.CrearArchivolog("[FIN Grabar Evaluacion DNI - Cadena Cuota Inicial]", null, null);
                        }
                    } //PROY-30166-IDEA–38863-FIN

                    objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEvaluacionDNI] blnGrabarVentaVarios", blnGrabarVentaVarios), null);

                    if (blnGrabarVentaVarios)
                    {
                        new BLConsumer().GrabarPlanDetalle(objPlanDetalle, nroSECPadre, null, null, string.Empty, null); //PROY-140736 fin //PROY-140546
                    }
                }

                #region INICIATIVA - 803 - VALIDACION INVACION AL METODO <RegistrarEvaluacionTiendaVirtual> - <GrabarEvaluacionDNI>
                if (Funciones.CheckStr(hidFlagTiendaVirtual.Value).Equals("1"))
                {
                    BEAprobacionExcepcionPrecios objAprobacion = new BEAprobacionExcepcionPrecios();

                    objAprobacion = (BEAprobacionExcepcionPrecios)HttpContext.Current.Session["DatosExecpPrecios"];
                    objAprobacion.cuotaInicialSisact = (!Funciones.CheckStr(strCadenaGrabaCuotaInicial).Equals(string.Empty)) ? strCadenaGrabaCuotaInicial.Split('|')[0].Split(';')[1] : string.Empty;
                    objAprobacion.cuotaInicialTienda = hidCuotaIncialTienda.Value;

                    if (!RegistrarEvaluacionTiendaVirtual(Funciones.CheckStr(nroSEC), objAprobacion))
                    {
                        throw new Exception();

                    }
                    Session.Remove("dblCuotaInicialComercial");
                }

                #endregion

                hidNroSEC.Value = Funciones.CheckStr(nroSECPadre);
                strMensajeSEC = string.Format(MensajeSEC(), nroSECPadre);

                //Inicio PROY-25335 -  Contratación Electronica - Release 0- RIHU
                objLog.CrearArchivolog("[INICIO][CARTA PODER]", null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[hidCartaPoder.Value]=>", hidCartaPoder.Value), null, null);

                if (hidCartaPoder.Value == "S")
                {
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[nroSEC]=>", nroSEC), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[hidTipoDocumento.Value]=>", hidTipoDocumento.Value), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[hidNTienePortabilidadValues.Value]=>", hidNTienePortabilidadValues.Value), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[objSolicitud.TOPEN_CODIGO]=>", objSolicitud.TOPEN_CODIGO), null, null);

                    if (nroSEC > 0 && hidTipoDocumento.Value == "01" && (objSolicitud.TOPEN_CODIGO == "1" || objSolicitud.TOPEN_CODIGO == "2")) //PROY-25335 - Contratacion Electronica - Release 2
                    {
                        objLog.CrearArchivolog("[INICIO][GrabarCartaPorder()]", null, null);
                        GrabarCartaPorder();
                        objLog.CrearArchivolog("[FIN][GrabarCartaPorder()]", null, null);
                    }
                }
                objLog.CrearArchivolog("[FIN][CARTA PODER]", null, null);
                //Fin PROY-25335 -  Contratación Electronica - Release 0- RIHU

                //PROYECTO 140141 :: KV FASE 2 INICIO
                if (hidNroSEC.Value != "" && hdnNumCT.Value != "")
                {
                    hdnOkCT.Value = "1";
                }
                else
                {
                    hdnOkCT.Value = "0";
                }
                //PROYECTO 140141 :: KV FASE 2 FIN

                //PROY-140736 INI
                objLog.CrearArchivolog("Inicio Eliminar sec buyback sec recurrente", null, null);
                objLog.CrearArchivolog(string.Format("[EliminarBuyback][hdsecbuyback.Value][{0}]", hdsecbuyback.Value), null, null);
                int codigo = 0;
                string msjrpta = string.Empty;
                Int64 nroSecbuyback = Funciones.CheckInt64(hdsecbuyback.Value);
                objLog.CrearArchivolog(string.Format("[EliminarBuyback][nroSecbuyback][{0}]", nroSecbuyback), null, null);

                new BLGeneral().EliminarBuyback(nroSecbuyback.ToString(), ref codigo, ref msjrpta);
                objLog.CrearArchivolog(string.Format("[EliminarBuyback][codigo] [{0}]", codigo), null, null);
                objLog.CrearArchivolog(string.Format("[EliminarBuyback][msjrpta] [{0}]", msjrpta), null, null);

                objLog.CrearArchivolog("Fin Eliminar sec buyback sec recurrente", null, null);
                ////PROY-140736 FIN



            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[ERROR]", ex.Message, null);
                hidCodError.Value = "1";
                strMensajeSEC = "Ocurrió un error al registrar la Solicitud.";
                if (Funciones.CheckStr(ex.Message).IndexOf("-20662") != -1)
                {
                    strMensajeSEC = ConfigurationManager.AppSettings["constMsjErrorClienteTieneSEC"].ToString();
                }

                objLog.CrearArchivolog("[hidCadenaDetalle]", hidCadenaDetalle.Value, null);
                objLog.CrearArchivolog("[hidNServicioServerV]", hidNServicioServerV.Value, null);
                objLog.CrearArchivolog("[hidGrupoPaqueteServerV]", hidGrupoPaqueteServerV.Value, null);
                objLog.CrearArchivolog("[hidnResultadoReglasValues]", hidnResultadoReglasValues.Value, null);
                objLog.CrearArchivolog("[hidEquipoServer]", hidEquipoServer.Value, null);

                objLog.CrearArchivolog("[ERROR GrabarEvaluacionDNI]", null, ex);
            }
            finally
            {
                HttpContext.Current.Session["DatosExecpPrecios"] = null; // INICIATIVA - 803
                hidnMensajeValue.Value = strMensajeSEC;
            }
            objLog.CrearArchivolog("[Fin][GrabarEvaluacionDNI]", null, null);
        }

        //Inicio PROY-25335 -  Contratación Electronica - Release 0 - RIHU
        private void GrabarCartaPorder()
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, "[Inicio][GrabarCartaPoder]", null, "WEB");

            BLCartaPoder objCartaPoder = new BLCartaPoder();
            BECartaPoder Carta = new BECartaPoder();
            bool resultado = false;

            Carta.codSec_Solicitud = Convert.ToInt64(hidNroSEC.Value);
            Carta.tipoOperacion = hidTipoOperacion.Value;
            Carta.tipodocumento = hidTipoDocumento.Value;
            Carta.numDocumento = hidNroDocumento.Value;
            Carta.nomApoderado = hidNombre.Value;
            Carta.apellidoPaterno = hidApePaterno.Value;
            Carta.apellidomaterno = hidApeMaterno.Value;
            Carta.comentario = txtComentarioPDV.Text;
            Carta.aplicacion = ConfigurationManager.AppSettings["constNombreAplicacion"];
            Carta.usuariocrea = hidUsuarioRed.Value;

            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.codSec_Solicitud]=>", Funciones.CheckStr(Carta.codSec_Solicitud)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.tipoOperacion]=>", Funciones.CheckStr(Carta.tipoOperacion)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.tipodocumento]=>", Funciones.CheckStr(Carta.tipodocumento)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.numDocumento]=>", Funciones.CheckStr(Carta.numDocumento)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.nomApoderado]=>", Funciones.CheckStr(Carta.nomApoderado)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.apellidoPaterno]=>", Funciones.CheckStr(Carta.apellidoPaterno)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.apellidomaterno]=>", Funciones.CheckStr(Carta.apellidomaterno)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.comentario]=>", Funciones.CheckStr(Carta.comentario)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.aplicacion]=>", Funciones.CheckStr(Carta.aplicacion)), null, null);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Carta.usuariocrea]=>", Funciones.CheckStr(Carta.usuariocrea)), null, null);

            resultado = objCartaPoder.RegistraCartaPoder(Carta);

            if (resultado == true)
                objLog.CrearArchivolog("Se registró correctamente la Carta Poder", null, null);
            else
                objLog.CrearArchivolog("Ocurrió un error al registrar la Carta Poder", null, null);

            objLog.CrearArchivolog("[FIN][GrabarCartaPoder]", null, null);
        }

        private void GrabarRepresenteLegal(List<BERepresentanteLegal> objRepresenta)
        {

            GeneradorLog objLog = new GeneradorLog(CurrentUser, "[Inicio][GrabarRepresentanteLegal]", null, "WEB");

            List<BERepresentanteLegal> olistRRL = objRepresenta;
            BERepresentanteLegal oRepresentanteLegal = null;
            bool resultado = false;
            string tipodocRRLL = string.Empty;

            BLCartaPoder objRepresentanteLegal = new BLCartaPoder();
            for (int i = 0; i < olistRRL.Count; i++)
            {
                oRepresentanteLegal = new BERepresentanteLegal();
                oRepresentanteLegal.SOLIN_CODIGO = Convert.ToInt64(hidNroSEC.Value);
                oRepresentanteLegal.P_SCPN_NRO_PEDIDO = 0;
                oRepresentanteLegal.APODN_CODIGO = 0;
                oRepresentanteLegal.P_SRLV_ID_TX_P = "";
                oRepresentanteLegal.APODV_NUM_DOC_REP = olistRRL[i].APODV_NUM_DOC_REP;
                oRepresentanteLegal.APODV_NOM_REP_LEG = olistRRL[i].APODV_NOM_REP_LEG;
                oRepresentanteLegal.APODV_APA_REP_LEG = olistRRL[i].APODV_APA_REP_LEG;
                oRepresentanteLegal.APODV_AMA_REP_LEG = olistRRL[i].APODV_AMA_REP_LEG;
                oRepresentanteLegal.P_SCPV_OBSERVACION = "";
                oRepresentanteLegal.P_SCPV_APLICACION = ConfigurationManager.AppSettings["constNombreAplicacion"];
                oRepresentanteLegal.P_SCPV_USUARIO_CREA = hidUsuarioRed.Value;
                oRepresentanteLegal.SRLC_CODNACIONALIDAD = olistRRL[i].SRLC_CODNACIONALIDAD; //PROY-31636
                oRepresentanteLegal.SRLV_DESCNACIONALIDAD = olistRRL[i].SRLV_DESCNACIONALIDAD; //PROY-31636

                //INI PROY-20054: SE ADICIONO LA CONDICIONANTE || PARA LOS CASOS 01,03 Y 06 
                if (olistRRL[i].APODC_TIP_DOC_REP == "1" || olistRRL[i].APODC_TIP_DOC_REP == "01") tipodocRRLL = "01";
                else if (olistRRL[i].APODC_TIP_DOC_REP == "3" || olistRRL[i].APODC_TIP_DOC_REP == "03") tipodocRRLL = "04";
                else if (olistRRL[i].APODC_TIP_DOC_REP == "6" || olistRRL[i].APODC_TIP_DOC_REP == "06") tipodocRRLL = "06";
                else tipodocRRLL = "99";
                //FIN PROY-20054

                if (string.IsNullOrEmpty(olistRRL[i].APODC_TIP_DOC_REP))
                {
                    if (olistRRL[i].APODV_NUM_DOC_REP.Length == 8)
                    {
                        tipodocRRLL = "01";
                    }
                }

                oRepresentanteLegal.APODC_TIP_DOC_REP = tipodocRRLL;

                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.codSec_Solicitud]=>", Funciones.CheckStr(oRepresentanteLegal.SOLIN_CODIGO)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.tipodocumento]=>", Funciones.CheckStr(oRepresentanteLegal.APODC_TIP_DOC_REP)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.numDocumento]=>", Funciones.CheckStr(oRepresentanteLegal.APODV_NUM_DOC_REP)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.nomApoderado]=>", Funciones.CheckStr(oRepresentanteLegal.APODV_NOM_REP_LEG)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.apellidoPaterno]=>", Funciones.CheckStr(oRepresentanteLegal.APODV_APA_REP_LEG)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.apellidomaterno]=>", Funciones.CheckStr(oRepresentanteLegal.APODV_AMA_REP_LEG)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.aplicacion]=>", Funciones.CheckStr(oRepresentanteLegal.P_SCPV_APLICACION)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "[oRepresentanteLegal.usuariocrea]=>", Funciones.CheckStr(oRepresentanteLegal.P_SCPV_USUARIO_CREA)), null, null);

                //INC000003013199 - INI
                objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - REINTENTOS DE REGISTRO DE RRLL - INI ", Funciones.CheckStr(string.Empty)), null, null);
                objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - ReadKeySettings.Key_ReintentosRegistroRRLL => ", Funciones.CheckStr(ReadKeySettings.Key_ReintentosRegistroRRLL)), null, null);
                int cont = 1;
                while (resultado == false && cont <= Funciones.CheckInt(ReadKeySettings.Key_ReintentosRegistroRRLL))
                {
                    resultado = objRepresentanteLegal.RegistrarRepresentanteLegal(oRepresentanteLegal);
                    cont = cont + 1;
                    objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - RegistrarRepresentanteLegal: resultado => ", Funciones.CheckStr(resultado)), null, null);
                    objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - RegistrarRepresentanteLegal: cont => ", Funciones.CheckStr(cont)), null, null);
                };
                objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - REINTENTOS DE REGISTRO DE RRLL - FIN ", Funciones.CheckStr(string.Empty)), null, null);
                //INC000003013199 - FIN

                if (resultado == true)
                {
                    objLog.CrearArchivolog("Se registró correctamente el Representante Legal", null, null);
                    objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - RegistrarRepresentanteLegal: resultado => ", Funciones.CheckStr(resultado)), null, null); //INC000003013199
                    objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - RegistrarRepresentanteLegal: cont => ", Funciones.CheckStr(cont)), null, null); //INC000003013199
                }
                else
                {
                    objLog.CrearArchivolog("Ocurrió un error al registrar el Representante Legal", null, null);
                    objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - RegistrarRepresentanteLegal: resultado => ", Funciones.CheckStr(resultado)), null, null); //INC000003013199
                    objLog.CrearArchivolog(String.Format("{0}{1}", "INC000003013199 - RegistrarRepresentanteLegal: cont => ", Funciones.CheckStr(cont)), null, null); //INC000003013199
                }

            }

            objLog.CrearArchivolog("[FIN][GrabarRepresentanteLegal]", null, null);

        }
        //Fin PROY-25335 -  Contratación Electronica - Release 0 - RIHU

        private void GrabarEvaluacionRUC()
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, "[Inicio][GrabarEvaluacionRUC]", null, "WEB");
            objLog.CrearArchivolog("    GrabarEvaluacionRUC  ", null, null);
            Int64 nroSEC = 0;
            Int64 nroSECPadre = 0;
            bool blnGrabarMovil = false;
            bool blnGrabarVentaVarios = false;
            string strPlan = string.Empty;
            string strPlazoAcuerdo = string.Empty;
            string strMensajeSEC = string.Empty;
            string idNroDocumento = hidNroDocumento.Value;
            string strCadenaCuotaInicial = hidConcatCuotaServer.Value; //PROY-30166-IDEA–38863-INICIO
            bool blnArregloCuotaInicialCargado = false; //PROY-30166-IDEA–38863-FIN
            bool productoEnc = false; //PROY 30166

            try
            {
                objLog.CrearArchivolog("    GrabarEvaluacionRUC/DatosEvalEmpresa  ", null, null);
                BESolicitudEmpresa objEmpresa = DatosEvalEmpresa();
                objLog.CrearArchivolog("    GrabarEvaluacionRUC/ObtenerPlanDetalle  ", null, null);
                List<BEPlanDetalleVenta> arrPlanDetalle = ObtenerPlanDetalle();

                double dblImporteGrupoSEC = objCliente.oVistaEvaluacion.importeGarantia;
                double dblCFGrupoSEC = objCliente.oVistaEvaluacion.cargoFijo;

                objLog.CrearArchivolog("    GrabarEvaluacionRUC/ListarProducto  ", null, null);
                List<BEItemGenerico> objListaProducto = new BLGeneral().ListarProducto();
                objEmpresa.SOLIC_DEUDA_CLIENTE = hidDeudaCliente.Value;//PROY-29121 

                //PROY-29215 INICIO
                string strFormaPago = Funciones.CheckStr(hidFP.Value);
                string strNroCuotas = Funciones.CheckStr(hidCP.Value);
                String[] arrFormaPago = strFormaPago.Split('|');
                String[] arrCuotaPago = strNroCuotas.Split('|');
                //PROY-29215 FIN

                foreach (BEItemGenerico item in objListaProducto)
                {
                    ArrayList arrPlanGrabar = new ArrayList();
                    blnGrabarMovil = false;
                    double dblCFTotal = 0;
                    BEGarantia objGarantia = new BEGarantia();

                    foreach (BEPlanDetalleVenta plan in arrPlanDetalle)
                    {
                        objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEvaluacionRUC] plan", Funciones.CheckStr(new JavaScriptSerializer().Serialize(plan))), null);

                        if (item.Codigo == plan.PRDC_CODIGO)
                        {
                            productoEnc = true; //PROY 30166
                            if (plan.PRDC_CODIGO == constTipoProductoVentaVarios)
                            {
                                // Grabar Detalle Equipo
                                arrPlanGrabar.Add(plan);
                                blnGrabarVentaVarios = true;
                            }
                            else
                            {
                                //  Consultar Garantías x Producto
                                foreach (BEGarantia obj in objCliente.oVistaEvaluacion.oGarantia)
                                {
                                    if (obj.idProducto == item.Codigo)
                                    {
                                        objGarantia = obj;
                                    }
                                }

                                //PROY-29215 INICIO
                                // EMERGENCIA-29215-INICIO
                                if (plan.PRDC_CODIGO == constTipoProductoDTH || plan.PRDC_CODIGO == constTipoProductoHFC || plan.PRDC_CODIGO == constTipoProducto3PlayInalam || plan.PRDC_CODIGO == constTipoProductoFTTH)
                                // EMERGENCIA-29215-FIN
                                {
                                    int cantPlan = arrPlanDetalle.Count;
                                    for (int p = 0; p <= cantPlan; p++)
                                    {

                                        if (arrFormaPago[p] != "")
                                        {
                                            plan.FORMA_PAGO = arrFormaPago[p].ToString();
                                        }
                                        if (arrCuotaPago[p] != "")
                                        {
                                            plan.CUOTA_PAGO = arrCuotaPago[p].ToString();
                                        }
                                    }
                                }
                                //PROY-29215 FIN

                                strPlan = plan.PLANC_CODIGO;
                                strPlazoAcuerdo = plan.PACUC_CODIGO;
                                dblCFTotal = dblCFTotal + plan.CARGO_FIJO_LIN;
                                // EMERGENCIA-29215-INICIO
                                if (!(item.Codigo == constTipoProductoDTH || item.Codigo == constTipoProductoHFC || item.Codigo == constTipoProducto3PlayInalam || item.Codigo == constTipoProductoFTTH))
                                // EMERGENCIA-29215-FIN
                                {
                                    arrPlanGrabar.Add(plan);
                                    blnGrabarMovil = true;
                                }
                                else
                                {
                                    arrPlanGrabar = new ArrayList();
                                    arrPlanGrabar.Add(plan);

                                    objEmpresa.TPREC_CODIGO = item.Codigo;
                                    objEmpresa.PRDC_CODIGO = item.Codigo;
                                    objEmpresa.PACUC_CODIGO = plan.PACUC_CODIGO;
                                    objEmpresa.SOLIN_NUM_RA = objGarantia.nroGarantia;
                                    objEmpresa.SOLIN_NUM_CAR_FIJ_ADI = objGarantia.nroGarantia;
                                    objEmpresa.SOLIC_TIP_CAR_MAN = objGarantia.idGarantia;
                                    objEmpresa.SOLIC_TIP_CAR_FIJ = objGarantia.idGarantia;
                                    objEmpresa.SOLIN_IMP_DG = objGarantia.importe;
                                    objEmpresa.SOLIN_IMP_DG_MAN = objGarantia.importe;
                                    objEmpresa.SOLIN_CAN_LIN = arrPlanDetalle.Count;
                                    objEmpresa.SOLIN_GRUPO_SEC = nroSECPadre;

                                    objEmpresa.SOLIN_NUM_CAR_FIJ_LINEA = dblCFTotal;
                                    objEmpresa.SOLIN_LIM_CRE_FIN = dblCFTotal * Funciones.CheckDbl(hidFactorLC.Value);
                                    objEmpresa.SOLIN_SUM_CAR_CON = dblCFTotal;
                                    objEmpresa.SOLIN_SUM_CAR_FIN = dblCFTotal;
                                    objEmpresa.SOLIN_IMP_DG_GRUPO_SEC = dblImporteGrupoSEC;
                                    objEmpresa.SOLIN_CF_GRUPO_SEC = dblCFGrupoSEC;
                                    objEmpresa.SOLIN_KIT_COS_INST = plan.SOLIN_COSTO_INST_DTH;

                                    // GRABAR SEC
                                    nroSEC = GrabarEmpresa(arrPlanGrabar, item.Codigo, objEmpresa, plan.SOPLN_ORDEN, nroSECPadre);

                                    strNroSECPROA = nroSEC.ToString(); //Proy-30748

                                    if (nroSECPadre == 0)
                                    {
                                        nroSECPadre = nroSEC;
                                    }
                                    dblCFTotal = 0;
                                }
                            }
                        }
                    }

                    objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEvaluacionRUC] blnGrabarMovil", blnGrabarMovil), null);

                    if (blnGrabarMovil)
                    {
                        //Inicio IDEA-30067
                        hidProductoPortAuto.Value = item.Codigo;
                        //Fin IDEA-30067

                        objEmpresa.TPREC_CODIGO = item.Codigo;
                        objEmpresa.PRDC_CODIGO = item.Codigo;
                        objEmpresa.PACUC_CODIGO = strPlazoAcuerdo;
                        objEmpresa.SOLIN_NUM_CAR_FIJ = objGarantia.nroGarantia;
                        objEmpresa.SOLIN_NUM_RA = objGarantia.nroGarantia;
                        objEmpresa.SOLIN_NUM_CAR_FIJ_ADI = objGarantia.nroGarantia;
                        objEmpresa.SOLIC_TIP_CAR_MAN = objGarantia.idGarantia;
                        objEmpresa.SOLIC_TIP_CAR_FIJ = objGarantia.idGarantia;
                        objEmpresa.SOLIN_IMP_DG = objGarantia.importe;
                        objEmpresa.SOLIN_IMP_DG_MAN = objGarantia.importe;
                        objEmpresa.SOLIN_CAN_LIN = arrPlanDetalle.Count;
                        objEmpresa.SOLIN_GRUPO_SEC = nroSECPadre;

                        objEmpresa.SOLIN_NUM_CAR_FIJ_LINEA = dblCFTotal;
                        objEmpresa.SOLIN_LIM_CRE_FIN = dblCFTotal * Funciones.CheckDbl(hidFactorLC.Value);
                        objEmpresa.SOLIN_SUM_CAR_CON = dblCFTotal;
                        objEmpresa.SOLIN_SUM_CAR_FIN = dblCFTotal;
                        objEmpresa.SOLIN_IMP_DG_GRUPO_SEC = dblImporteGrupoSEC;

                        if (blnSecTieneProteccionMovil) //PROY-24724-IDEA-28174 - INICIO
                            objEmpresa.SOLIN_CF_GRUPO_SEC = objEmpresa.SOLIN_SUM_CAR_CON;
                        else //PROY-24724-IDEA-28174 - FIN
                            objEmpresa.SOLIN_CF_GRUPO_SEC = dblCFGrupoSEC;

                        // GRABAR SEC
                        nroSEC = GrabarEmpresa(arrPlanGrabar, item.Codigo, objEmpresa, 0, nroSECPadre);

                        strNroSECPROA = nroSEC.ToString(); //Proy-30748

                        if (nroSECPadre == 0)
                        {
                            nroSECPadre = nroSEC;
                        }
                    }

                    bool blnDetalleTieneProteccionMovil = false; //PROY-24724-IDEA-28174 - INICIO
                    BEPlanDetalleVenta objPlanDetalleVenta;
                    string strConcatPrima = hidConcatPrimaServer.Value;
                    String[] arrConcatPrima = strConcatPrima.Split('|');

                    if (blnSecTieneProteccionMovil)
                    {
                        for (int x = 0; x < arrPlanGrabar.Count; x++)
                        {
                            objPlanDetalleVenta = (BEPlanDetalleVenta)arrPlanGrabar[x];

                            for (int y = 0; y < objPlanDetalleVenta.SERVICIO.Count; y++)
                            {
                                if (((BESecServicio_AP)objPlanDetalleVenta.SERVICIO[y]).SERVV_CODIGO == strCodServProteccionMovil)
                                    blnDetalleTieneProteccionMovil = true;
                            }

                            if (blnDetalleTieneProteccionMovil)
                            {
                                BEPrima objGuardarPrima = new BEPrima();
                                objGuardarPrima.NroSec = Funciones.CheckStr(nroSEC);
                                objGuardarPrima.TipoOperacion = Funciones.CheckStr(objEmpresa.TOPEN_CODIGO);
                                objGuardarPrima.TipoCliente = ddlOferta.SelectedItem.Text;
                                objGuardarPrima.TipoDoc = objEmpresa.TDOCC_CODIGO;
                                objGuardarPrima.NroDoc = objEmpresa.CLIEC_NUM_DOC.Trim();
                                objGuardarPrima.DescProt = strDescServProteccionMovil;
                                objGuardarPrima.FlagPortabilidad = objEmpresa.FLAG_PORTABILIDAD;
                                objGuardarPrima.FlagEstado = strCodEstadoGuardarPrima;
                                objGuardarPrima.Resultado = strCodEstadoGuardarPrima;
                                objGuardarPrima.FechaEvaluacion = DateTime.Now.Date.ToString("dd/MM/yyyy");
                                objGuardarPrima.UsrMod = CurrentUser;
                                objGuardarPrima.SoplnCodigo = Funciones.CheckStr(objPlanDetalleVenta.SOPLN_CODIGO);
                                objGuardarPrima.CodMaterial = objPlanDetalleVenta.MATERIAL;

                                foreach (string strPrima in arrConcatPrima)
                                {
                                    String[] arrPrima = strPrima.Split(';');
                                    if (arrPrima[0].Equals(Funciones.CheckStr(objPlanDetalleVenta.SOPLN_ORDEN)))
                                    {
                                        string strDeducibles = arrPrima[2];
                                        objGuardarPrima.MontoPrima = arrPrima[1];
                                        objGuardarPrima.DeducibleRobo = new String(strDeducibles.Split('-')[0].ToCharArray().Where(c => Char.IsDigit(c)).ToArray());
                                        objGuardarPrima.DeducibleDanio = new String(strDeducibles.Split('-')[1].ToCharArray().Where(c => Char.IsDigit(c)).ToArray());
                                        objGuardarPrima.NroCertif = arrPrima[3];
                                        objGuardarPrima.NombreProd = arrPrima[4];
                                        objGuardarPrima.DescProd = arrPrima[5];
                                        objGuardarPrima.IncidenciaTipoDanio = arrPrima[6];
                                        objGuardarPrima.IncidenciaTipoRobo = arrPrima[7];
                                    }
                                }
                                arrGuardarPrima.Add(objGuardarPrima);
                                blnDetalleTieneProteccionMovil = false;
                            }
                        }
                    } //PROY-24724-IDEA-28174 - FIN
                    //if (!blnArregloCuotaInicialCargado) //PROY-30166-IDEA–38863-INICIO
                    if (productoEnc && !blnArregloCuotaInicialCargado)//PROY-30166-IDEA–38863-INICIO
                    {
                        if (!string.IsNullOrEmpty(strCadenaCuotaInicial))
                        {
                            objLog.CrearArchivolog("[ INICIO Grabar Evaluacion RUC - Cadena Cuota Inicial] ", null, null);
                            objLog.CrearArchivolog("[  * Cadena Cuota Inicial:] " + strCadenaCuotaInicial + " ]", null, null);
                            strCadenaCuotaInicial = strCadenaCuotaInicial.Substring(1, strCadenaCuotaInicial.Length - 1);
                            String[] arrCuotaInicial = strCadenaCuotaInicial.Split('|');
                            BEPlanDetalleVenta objPlanDetalleVenta2 = new BEPlanDetalleVenta();
                            Int64 intSoplnCodigo = 0;
                            double dblMontoCuotaInicial = 0.0;

                            foreach (string strConcatCuotaInicial in arrCuotaInicial)
                            {
                                int strIndiceOrden = strConcatCuotaInicial.IndexOf("*ID") + "*ID".Length;
                                string strOrden = strConcatCuotaInicial.Substring(strIndiceOrden, 1);
                                objLog.CrearArchivolog("[ * Orden: " + strOrden + " ]", null, null);

                                for (int i = 0; i < arrPlanGrabar.Count; i++)
                                {
                                    BEPlanDetalleVenta objPlanDetalleVta = (BEPlanDetalleVenta)arrPlanGrabar[i];

                                    if (strOrden.Equals(Funciones.CheckStr(objPlanDetalleVta.SOPLN_ORDEN)))
                                    {
                                        intSoplnCodigo = objPlanDetalleVta.SOPLN_CODIGO;
                                        dblMontoCuotaInicial = Funciones.CheckDbl(strConcatCuotaInicial.Split('*')[2]);
                                        objLog.CrearArchivolog("[ * SOPLN_CODIGO:  " + intSoplnCodigo + " ]", null, null);
                                        objLog.CrearArchivolog("[ * Monto Cuota Inicial: " + dblMontoCuotaInicial + " ]", null, null);
                                    }
                                }
                                strCadenaGrabaCuotaInicial += intSoplnCodigo + ";" + dblMontoCuotaInicial + "|";
                            }
                            strCadenaGrabaCuotaInicial = strCadenaGrabaCuotaInicial.Substring(0, strCadenaGrabaCuotaInicial.Length - 1);
                            blnArregloCuotaInicialCargado = true;
                            objLog.CrearArchivolog("[ * Cadena Graba Cuota Inicial: " + strCadenaGrabaCuotaInicial + " ]", null, null);
                            objLog.CrearArchivolog("[ FIN Grabar Evaluacion RUC - Cadena Cuota Inicial ]", null, null);
                        }
                    } //PROY-30166-IDEA–38863-FIN

                    objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEvaluacionRUC] blnGrabarVentaVarios", blnGrabarVentaVarios), null);

                    if (blnGrabarVentaVarios)
                    {
                        new BLConsumer().GrabarPlanDetalle(arrPlanGrabar, nroSECPadre, null, null, string.Empty, null); //PROY-140736 fin //PROY-140546
                    }
                }

                #region INICIATIVA - 803 - VALIDACION INVACION AL METODO <RegistrarEvaluacionTiendaVirtual> - <GrabarEvaluacionRUC>

                if (Funciones.CheckStr(hidFlagTiendaVirtual.Value).Equals("1"))
                {
                    BEAprobacionExcepcionPrecios objAprobacion = new BEAprobacionExcepcionPrecios();

                    objAprobacion = (BEAprobacionExcepcionPrecios)HttpContext.Current.Session["DatosExecpPrecios"];
                    objAprobacion.cuotaInicialSisact = (!Funciones.CheckStr(strCadenaGrabaCuotaInicial).Equals(string.Empty)) ? strCadenaGrabaCuotaInicial.Split('|')[0].Split(';')[1] : string.Empty;
                    objAprobacion.cuotaInicialTienda = hidCuotaIncialTienda.Value;

                    if (!RegistrarEvaluacionTiendaVirtual(Funciones.CheckStr(nroSEC), objAprobacion))
                    {
                        throw new Exception();
                    }
                    Session.Remove("dblCuotaInicialComercial");
                }

                #endregion

                hidNroSEC.Value = Funciones.CheckStr(nroSECPadre);
                strMensajeSEC = string.Format(MensajeSEC(), nroSECPadre);

                //INI PROY-25906 CNH
                objLog.CrearArchivolog("Ini-actualizar_datos_empresa_clarify", null, null);
                this.actualizar_datos_empresa_clarify(idNroDocumento, objEmpresa.REPRESENTANTE_LEGAL);
                objLog.CrearArchivolog("Fin-actualizar_datos_empresa_clarify", null, null);
                //FIN PROY-25906 CNH
                //Inicio PROY-25335 -  Contratación Electronica - Release 0 - RIHU
                objLog.CrearArchivolog("###################[INICIO][GrabarRepresentanteLegal()]###################", null, null);
                GrabarRepresenteLegal(objEmpresa.REPRESENTANTE_LEGAL);
                objLog.CrearArchivolog("#####################[FIN][GrabarRepresentanteLegal()]####################", null, null);
                //Fin PROY-25335 -  Contratación Electronica - Release 0 - RIHU

                //Inicio PROY-25335 -  Contratación Electronica - Release 2- RIHU
                objLog.CrearArchivolog("[INICIO][CARTA PODER]", null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[hidCartaPoder.Value]=>", hidCartaPoder.Value), null, null);

                if (hidCartaPoder.Value == "S")
                {
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[nroSEC]=>", nroSEC), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[hidTipoDocumento.Value]=>", hidTipoDocumento.Value), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[hidNTienePortabilidadValues.Value]=>", hidNTienePortabilidadValues.Value), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[objSolicitud.TOPEN_CODIGO]=>", objEmpresa.TOPEN_CODIGO), null, null);

                    if (nroSEC > 0 && (objEmpresa.TOPEN_CODIGO == 1 || objEmpresa.TOPEN_CODIGO == 2)) //PROY-25335 - Contratacion Electronica - Release 2
                    {
                        objLog.CrearArchivolog("[INICIO][GrabarCartaPorder()]", null, null);
                        GrabarCartaPorder();
                        objLog.CrearArchivolog("[FIN][GrabarCartaPorder()]", null, null);
                    }
                }
                objLog.CrearArchivolog("[FIN][CARTA PODER]", null, null);
                //Fin PROY-25335 -  Contratación Electronica - Release 2- RIHU

                //PROYECTO 140141 :: KV FASE 2 INICIO
                if (hidNroSEC.Value != "" && hdnNumCT.Value != "")
                {
                    hdnOkCT.Value = "1";
                }
                else
                {
                    hdnOkCT.Value = "0";
                }
                //PROYECTO 140141 :: KV FASE 2 FIN

            }
            catch (Exception ex)
            {
                hidCodError.Value = "1";
                strMensajeSEC = "Ocurrió un error al registrar la Solicitud.";
                if (Funciones.CheckStr(ex.Message).IndexOf("-20662") != -1)
                {
                    strMensajeSEC = ConfigurationManager.AppSettings["constMsjErrorClienteTieneSEC"].ToString();
                }

                GeneradorLog _objLog = CrearLog(idNroDocumento);

                _objLog.CrearArchivolog("[hidCadenaDetalle]", hidCadenaDetalle.Value, null);
                _objLog.CrearArchivolog("[hidNServicioServerV]", hidNServicioServerV.Value, null);
                _objLog.CrearArchivolog("[hidGrupoPaqueteServerV]", hidGrupoPaqueteServerV.Value, null);
                _objLog.CrearArchivolog("[hidnResultadoReglasValues]", hidnResultadoReglasValues.Value, null);
                _objLog.CrearArchivolog("[hidEquipoServer]", hidEquipoServer.Value, null);

                _objLog.CrearArchivolog("[ERROR GrabarEvaluacionRUC]", null, ex);
            }
            finally
            {
                HttpContext.Current.Session["DatosExecpPrecios"] = null; // INICIATIVA - 803

                hidnMensajeValue.Value = strMensajeSEC;

                //PROY-26963-F3 - GPRD
                if (hidNTienePortabilidadValues.Value.Equals("S") && hidnAutonomia.Value.Equals("N") && hAdjuntarDocumento.Value.Equals("S"))
                    hAdjuntarDocumento.Value = nroSEC.ToString();
                //Fin PROY-26963-F3 - GPRD

                objLog.CrearArchivolog("    GrabarEvaluacionRUC/SALIDA  ", null, null);
            }
        }

        //INI PROY-25906 CNH
        private void actualizar_datos_empresa_clarify(string NroDocumento, List<BERepresentanteLegal> objRepresenta)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, "[Inicio][actualizar_datos_empresa_clarify]", null, "WEB");
            try
            {
                objLog.CrearArchivolog("hidCodProducto.Value=>" + hidCodProducto.Value, null, null);
                objLog.CrearArchivolog("constTipoProductoMovil=>" + Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]), null, null);

                if (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                {
                    BEDatoPersonaClarify entityEmpresa = new BEDatoPersonaClarify();
                    if (HttpContext.Current.Session["objClienteClarify" + NroDocumento] != null)
                    {
                        objLog.CrearArchivolog("Session objClienteClarify", null, null);
                        entityEmpresa = (BEDatoPersonaClarify)HttpContext.Current.Session["objClienteClarify" + NroDocumento];
                        entityEmpresa.Nombres = "";
                        entityEmpresa.ApePaterno = "";
                        entityEmpresa.ApePaterno = "";
                    }
                    else
                    {
                        objLog.CrearArchivolog("Session objClienteClarify NULL", null, null);
                        string strTipoDoc = obtener_tipo_doc_clarify(hidTipoDocumento.Value);
                        objLog.CrearArchivolog("strTipoDoc=>" + strTipoDoc, null, null);
                        entityEmpresa.TipoDocumento = strTipoDoc;
                        entityEmpresa.NroDocumento = hidNroDocumento.Value;
                        objLog.CrearArchivolog("hidNroDocumento.Value=>" + hidNroDocumento.Value, null, null);
                        entityEmpresa.ApePaterno = "";
                        entityEmpresa.ApeMaterno = "";
                        entityEmpresa.Nombres = "";
                        entityEmpresa.RazonSocial = hidRazonSocial.Value;
                        entityEmpresa.TipoValidacion = Funciones.CheckStr(ConfigurationManager.AppSettings["constOrigenInsertWs"]);//DATA CREDITO
                        objLog.CrearArchivolog("hidRazonSocial.Value=>" + hidRazonSocial.Value, null, null);
                    }

                    objLog.CrearArchivolog("Ini update_cliente_clarify", null, null);
                    this.update_cliente_clarify(entityEmpresa);
                    objLog.CrearArchivolog("Fin update_cliente_clarify", null, null);

                    List<BERepresentanteLegal> olistRRL = objRepresenta;
                    BEDatoPersonaClarify entityRRL = null;
                    for (int i = 0; i < olistRRL.Count; i++)
                    {
                        entityRRL = new BEDatoPersonaClarify();
                        entityRRL.NroDocumento = olistRRL[i].APODV_NUM_DOC_REP;
                        entityRRL.TipoDocumento = Funciones.CheckStr(ConfigurationManager.AppSettings["constClienUNI_Dni"]);
                        entityRRL.Nombres = olistRRL[i].APODV_NOM_REP_LEG;
                        entityRRL.ApePaterno = olistRRL[i].APODV_APA_REP_LEG;
                        entityRRL.ApeMaterno = olistRRL[i].APODV_AMA_REP_LEG;
                        entityRRL.TipoValidacion = Funciones.CheckStr(ConfigurationManager.AppSettings["constOrigenInsertWs"]);//DATA CREDITO

                        objLog.CrearArchivolog("NroDocumento=>" + entityRRL.NroDocumento, null, null);
                        objLog.CrearArchivolog("TipoDocumento=>" + entityRRL.TipoDocumento, null, null);
                        objLog.CrearArchivolog("Nombres=>" + entityRRL.Nombres, null, null);
                        objLog.CrearArchivolog("ApePaterno=>" + entityRRL.ApePaterno, null, null);
                        objLog.CrearArchivolog("ApeMaterno=>" + entityRRL.ApeMaterno, null, null);
                        objLog.CrearArchivolog("TipoValidacion=>" + entityRRL.TipoValidacion, null, null);

                        this.update_cliente_clarify(entityRRL);
                    }

                    Session.Remove("objClienteClarify" + NroDocumento);
                }
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("Error actualizar_datos_empresa_clarify  =>" + ex.Message, null, null);
            }
            finally
            {

            }
            objLog.CrearArchivolog("Fin Metodo actualizar_datos_empresa_clarify", null, null);
        }

        #endregion [Funciones Grabar]

        #region [Detalle Venta]

        private List<BEPlanDetalleVenta> ObtenerPlanDetalle()
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][ObtenerPlanDetalle]", null, null);

            List<BEPlanDetalleVenta> objDetallePlan = new List<BEPlanDetalleVenta>();
            string strCadenaEvaluacion = Funciones.CheckStr(hidCadenaDetalle.Value);
            string strAgrupaPaquete = Funciones.CheckStr(hidGrupoPaqueteServerV.Value);
            string strResultadoReglas = Funciones.CheckStr(hidnResultadoReglasValues.Value);

            string strCodCanal = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[3];
            string strCodOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];

            string[] arrPlanes = strCadenaEvaluacion.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
            objLog.CrearArchivolog("[arrPlanes]", strCadenaEvaluacion.ToString(), null);

            CantPlanes = arrPlanes.Length;//PROY-30748
            foreach (string strPlanes in arrPlanes)
            {
                string[] strPlanFila = strPlanes.Split(';');
                BEPlanDetalleVenta objPlanDetalle = new BEPlanDetalleVenta();
                objPlanDetalle.strServidor = CurrentHostName; //PROY-140736
                // [INC000002442213] INC FALLA CARGO FIJO INI 
                objLog.CrearArchivolog("[==============INC FALLA CARGO FIJO INI]======================", null, null);
                List<BEPlan> objPLan = (List<BEPlan>)HttpContext.Current.Session["objplan" + Funciones.CheckStr(strPlanFila[0])];
                Double CFCuotaInicial = Funciones.CheckDbl(HttpContext.Current.Session["cargoFijoCuota" + Funciones.CheckStr(strPlanFila[0])]);
                objLog.CrearArchivolog("[CFCuotaInicial]" + Funciones.CheckStr(CFCuotaInicial), null, null);
                //INC000002464679 INICIO
                objLog.CrearArchivolog("[CFCuotaInicial]strPlanFila:" + Funciones.CheckStr(strPlanFila[0]), null, null);

                if (CFCuotaInicial > 0)
                {
                    if (objPLan != null)
                    {
                        foreach (BEPlan item in objPLan)
                        {
                            objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][item.PLANC_CODIGO]" + Funciones.CheckStr(item.PLANC_CODIGO), null, null);
                            objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][strPlanFila[10]]" + Funciones.CheckStr(strPlanFila[10]), null, null);

                            objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][item.PLANN_CAR_FIJ]" + Math.Round(Funciones.CheckDbl(item.PLANN_CAR_FIJ), 2), null, null);
                            objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][strPlanFila[20]]" + Math.Round(Funciones.CheckDbl(strPlanFila[20]), 2), null, null);
                            objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][strPlanFila[23]]" + Math.Round(Funciones.CheckDbl(strPlanFila[23]), 2), null, null);

                            objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][item.PRDC_CODIGO]]" + Funciones.CheckStr(item.PRDC_CODIGO), null, null);

                            if (item.PRDC_CODIGO.Trim().Length > 0)
                            {
                                if (item.PLANC_CODIGO == strPlanFila[10] && "09|08|05|03|06".IndexOf(Funciones.CheckStr(item.PRDC_CODIGO)) <= -1 && Math.Round(Funciones.CheckDbl(item.PLANN_CAR_FIJ), 2) != Math.Round(Funciones.CheckDbl(strPlanFila[23]), 2))
                                {

                                    if (Math.Round(Funciones.CheckDbl(item.PLANN_CAR_FIJ), 2) != Math.Round(Funciones.CheckDbl(strPlanFila[20]), 2))
                                        if (Math.Round(Funciones.CheckDbl(strPlanFila[23]), 2) != Math.Round(Funciones.CheckDbl(CFCuotaInicial), 2))
                                            throw new Exception("Error, cargo fijo no coincide con la carga inicial 1");

                                }
                                else
                                {
                                    objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][PASO 1]", null, null);
                                }
                            }

                            objLog.CrearArchivolog("[INC000002442213][hidConcatCuotaServer.Value]" + Funciones.CheckStr(hidConcatCuotaServer.Value), null, null);
                            if (!string.IsNullOrEmpty(hidConcatCuotaServer.Value))
                            {
                                objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][EVALUACION EN CUOTAS]", null, null);
                                objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][strPlanFila[23]]" + Funciones.CheckInt(Funciones.CheckDbl(strPlanFila[23], 2)), null, null);
                                objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][CFCuotaInicial]" + Funciones.CheckStr(CFCuotaInicial), null, null);

                                if (item.PLANC_CODIGO == strPlanFila[10] && Funciones.CheckInt(CFCuotaInicial) != Funciones.CheckInt(Funciones.CheckDbl(strPlanFila[23], 2)))
                                {
                                    throw new Exception("Error, cargo fijo no coincide con la carga inicial 2");
                                }
                                else
                                {
                                    objLog.CrearArchivolog("[INC000002442213][VALIDACION FRAUDE][PASO 2]", null, null);
                                }

                            }
                        }
                    }
                }
                //INC000002464679 FIN
                objLog.CrearArchivolog("[INC000002442213][==============INC FALLA CARGO FIJO FIN]======================", null, null);
                //[INC000002442213] INC FALLA CARGO FIJO FIN
                objPlanDetalle.SOPLN_ORDEN = Funciones.CheckInt(strPlanFila[0]);
                //gaa20151209
                //objPlanDetalle.TPROC_CODIGO = ddlOferta.SelectedValue;
                objPlanDetalle.TPROC_CODIGO = hidnTipoOfertaValue.Value;
                //fin gaa20151209
                objPlanDetalle.PRDC_CODIGO = strPlanFila[1];
                objPlanDetalle.PACUC_CODIGO = strPlanFila[2];
                objPlanDetalle.PACUV_DESCRIPCION = strPlanFila[3];
                objPlanDetalle.CARGO_FIJO = Funciones.CheckDbl(strPlanFila[20], 2);
                objPlanDetalle.IDCOMBO = Funciones.CheckStr(hidCombo.Value);
                objPlanDetalle.COMBO = Funciones.CheckStr(hidComboText.Value).ToUpper();
                objPlanDetalle.USUARIO = CurrentUser;
                objPlanDetalle.MODALIDAD_VENTA = hidModalidadVenta.Value;

                // Tipo Producto
                if (objPlanDetalle.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProductoDTH"].ToString())
                {
                    string[] arrResultadoReglas = strResultadoReglas.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

                    foreach (string item in arrResultadoReglas)
                    {
                        int idFila = Funciones.CheckInt(item.Split(';')[0]);
                        string strCostoInstalacion = item.Split(';')[2];

                        if (objPlanDetalle.SOPLN_ORDEN == idFila)
                        {
                            if (strCostoInstalacion != ConfigurationManager.AppSettings["constMsjSinCostoInstalacion"].ToString())
                            {
                                objPlanDetalle.SOLIN_COSTO_INST_DTH = Funciones.CheckDbl(strCostoInstalacion, 2);
                            }
                            else
                            {
                                objPlanDetalle.SOLIN_COSTO_INST_DTH = -1;
                            }
                        }
                    }
                }
                //FTTH
                if (objPlanDetalle.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProductoHFC"].ToString() || objPlanDetalle.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProducto3PlayInalam"].ToString() || objPlanDetalle.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProductoFTTH"].ToString())
                {
                    // Primer elemento que Agrupa un Paquete => {,[1],[2],[3],[4],[5]}{,[6],[7],[8],[9],[10]}
                    if (strAgrupaPaquete.IndexOf("{,[" + objPlanDetalle.SOPLN_ORDEN + "]") > -1)
                    {
                        double dblCF = 0;

                        objPlanDetalle.PLAN_SOL_HFC = ObtenerDetalleHFC(objPlanDetalle.SOPLN_ORDEN, ref dblCF);
                        objPlanDetalle.CARGO_FIJO_LIN = dblCF;
                        objPlanDetalle.TELEFONO = objPlanDetalle.PLAN_SOL_HFC.Telefono;
                        // POR LCA Inicio 
                        string[] arrResultadoReglas = strResultadoReglas.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

                        foreach (string item in arrResultadoReglas)
                        {
                            int idFila = Funciones.CheckInt(item.Split(';')[0]);
                            string strCostoInstalacion = item.Split(';')[2];

                            if (objPlanDetalle.SOPLN_ORDEN == idFila)
                            {
                                if (strCostoInstalacion != ConfigurationManager.AppSettings["constMsjSinCostoInstalacion"].ToString())
                                {
                                    objPlanDetalle.SOLIN_COSTO_INST_DTH = Funciones.CheckDbl(strCostoInstalacion, 2);
                                }
                                else
                                {
                                    objPlanDetalle.SOLIN_COSTO_INST_DTH = -1;
                                }
                            }
                        }
                        objDetallePlan.Add(objPlanDetalle);
                    }
                }
                else
                {
                    objPlanDetalle.PAQTV_CODIGO = strPlanFila[6];
                    objPlanDetalle.PAQTV_DESCRIPCION = strPlanFila[7];

                    string[] arrPlan = strPlanFila[9].Split('_');
                    objPlanDetalle.PLANC_CODIGO = arrPlan[0];
                    objPlanDetalle.PLANV_DESCRIPCION = strPlanFila[11];

                    if (!string.IsNullOrEmpty(objPlanDetalle.PAQTV_CODIGO))
                    {
                        objPlanDetalle.SOPLN_SECUENCIA = Funciones.CheckInt(arrPlan[4]);
                        objPlanDetalle.SOPLV_PAQU_AGRU = hidGrupoPaqueteServerV.Value;
                    }
                    objLog.CrearArchivolog("[PROY_30748]", string.Format("{0}-->{1}", "objPlanDetalle.TOPE_MONTO", Funciones.CheckStr(Funciones.CheckDbl(strPlanFila[19], 2))), null);//APOYO-PROY-30748
                    objPlanDetalle.TOPE_MONTO = Funciones.CheckDbl(strPlanFila[19], 2);
                    objPlanDetalle.SOPLN_CANTIDAD = 1;
                    objPlanDetalle.CAMPANA = strPlanFila[15];
                    objPlanDetalle.CAMPANA_DESC = strPlanFila[16];
                    objPlanDetalle.MATERIAL = strPlanFila[17];
                    objPlanDetalle.MATERIAL_DESC = strPlanFila[18];

                    if (objPlanDetalle.PRDC_CODIGO != ConfigurationManager.AppSettings["constTipoProductoDTH"].ToString())
                    {
                        if (!string.IsNullOrEmpty(objPlanDetalle.MATERIAL))
                        {
                            string[] arrCadPrecio = strPlanFila[24].Split('_');
                            objPlanDetalle.LISTA_PRECIO = arrCadPrecio[1];
                            objPlanDetalle.LISTA_PRECIO_DESC = arrCadPrecio[2];
                            objPlanDetalle.PRECIO_LISTA = Funciones.CheckDbl(arrCadPrecio[3], 2);
                            objPlanDetalle.PRECIO_VENTA = Funciones.CheckDbl(arrCadPrecio[0], 2);
                        }
                    }

                    // CUOTA
                    objPlanDetalle.CUOTA_CODIGO = strPlanFila[28];

                    //PROY-30166-IDEA–38863 - INICIO 
                    objLog.CrearArchivolog(" ==== INICIO Obtener Plan Detalle Cuota Inicial: ", null, null);
                    if (objPlanDetalle.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProductoMovil"].ToString())
                    {
                        objPlanDetalle.CUOTA_INICIAL = Funciones.CheckDbl(strPlanFila[40], 2);
                    }
                    else
                    {
                        objPlanDetalle.CUOTA_INICIAL = Funciones.CheckDbl(strPlanFila[29], 2);
                    }
                    objLog.CrearArchivolog(" ====  * objPlanDetalle.CUOTA_INICIAL: " + objPlanDetalle.CUOTA_INICIAL + " ]", null, null);
                    objLog.CrearArchivolog(" ==== FIN Obtener Plan Detalle Cuota Inicial: ", null, null);
                    //PROY-30166-IDEA–38863 - FIN
                    objPlanDetalle.TELEFONO = strPlanFila[30];

                    if (blnSecTieneProteccionMovil) //PROY-24724-IDEA-28174 - INICIO
                    {
                        string strConcatPrima = hidConcatPrimaServer.Value;
                        String[] arrConcatPrima = strConcatPrima.Split('|');
                        foreach (string strPrima in arrConcatPrima)
                            if (strPrima.Split(';')[0].Equals(Funciones.CheckStr(objPlanDetalle.SOPLN_ORDEN)))
                            {
                                objPlanDetalle.CARGO_FIJO_LIN = Funciones.CheckDbl(strPlanFila[23], 2) + Funciones.CheckDbl(strPrima.Split(';')[1]);
                                break;
                            }
                            else
                            {
                                objPlanDetalle.CARGO_FIJO_LIN = Funciones.CheckDbl(strPlanFila[23], 2);
                            }
                    }
                    else //PROY-24724-IDEA-28174 - FIN
                        objPlanDetalle.CARGO_FIJO_LIN = Funciones.CheckDbl(strPlanFila[23], 2);

                    objLog.CrearArchivolog("[Variable][ObtenerServicio]", objPlanDetalle.SOPLN_ORDEN, null);
                    objLog.CrearArchivolog("[Variable][ObtenerServicio] [" + Funciones.CheckStr(objPlanDetalle.SOPLN_ORDEN) + "]", null, null);
                    objPlanDetalle.SERVICIO = ObtenerServicio(objPlanDetalle.SOPLN_ORDEN);
                    objLog.CrearArchivolog("[Variable][objPlanDetalle.SERVICIO] ", objPlanDetalle.SERVICIO, null);
                    objPlanDetalle.SUBSIDIO = CalificarSubsidio(objPlanDetalle.PRECIO_LISTA, objPlanDetalle.PRECIO_VENTA);
                    //gaa20161024
                    objPlanDetalle.FAMILIA_PLAN = strPlanFila[36];
                    //fin gaa20161024
                    if (objPlanDetalle.SERVICIO != null && objPlanDetalle.SERVICIO.Count > 0)
                    {
                        string constTopeConsumoSinCF = ConfigurationManager.AppSettings["constCodTopeSinCFServicio"].ToString();
                        string constTopeConsumoCero = ConfigurationManager.AppSettings["constCodTopeCeroServicio"].ToString();
                        string constTopeConsumoAuto = ConfigurationManager.AppSettings["constCodTopeAutomaticoServicio"].ToString(); //PROY-29296

                        foreach (BESecServicio_AP obj in objPlanDetalle.SERVICIO)
                        {
                            if (obj.SERVV_CODIGO == constTopeConsumoSinCF)
                                objPlanDetalle.TOPE_CONSUMO = ((int)BEServicio.TIPO_TOPE_CONSUMO.TOPE_CONSUMO_ABIERTO).ToString(); //PROY-29296

                            if (obj.SERVV_CODIGO == constTopeConsumoCero)
                                objPlanDetalle.TOPE_CONSUMO = ((int)BEServicio.TIPO_TOPE_CONSUMO.TOPE_CONSUMO_EXACTO).ToString(); //PROY-29296

                            if (obj.SERVV_CODIGO == constTopeConsumoAuto)
                                objPlanDetalle.TOPE_CONSUMO = ((int)BEServicio.TIPO_TOPE_CONSUMO.TOPE_CONSUMO_ADICIONAL).ToString(); //PROY-29296
                        }
                    }
                    objLog.CrearArchivolog("[Variable][objPlanDetalle.TOPE_CONSUMO] " + Funciones.CheckStr(objPlanDetalle.TOPE_CONSUMO), null, null);

                    // DTH
                    if (objPlanDetalle.PRDC_CODIGO == ConfigurationManager.AppSettings["constTipoProductoDTH"].ToString())
                    {
                        // EQUIPO CAMBIO TITULARIDAD
                        if (objPlanDetalle.MATERIAL == "0")
                        {
                            objPlanDetalle.FLAG_TITULARIDAD = "S";
                            hidFlgTitularidad.Value = "S";
                        }
                    }

                    objDetallePlan.Add(objPlanDetalle);
                }
            }
            objLog.CrearArchivolog("[Fin][ObtenerPlanDetalle]", null, null);
            CantPlanes = 0;//PROY-30748

            return objDetallePlan;
        }

        private List<BESecServicio_AP> ObtenerServicio(int idPlan)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][ObtenerServicio]", null, null);
            objLog.CrearArchivolog("[Inicio][idPlan] => " + Funciones.CheckStr(idPlan), null, null);//INC000003456157
            List<BESecServicio_AP> objLista = new List<BESecServicio_AP>();
            BESecServicio_AP objServicio = null;
            string strCadenaServicio = Funciones.CheckStr(hidNServicioServerV.Value);

            if (Funciones.CheckStr(hidNServicioServerV.Value) == "" )//INC000003848031
            {

                strCadenaServicio = (string)HttpContext.Current.Session["hidNServicioServerV"];//INC000003848031
                                
            }

            objLog.CrearArchivolog("INC000003848031-ObtenerServicio - hidNServicioServerV => " + Funciones.CheckStr(hidNServicioServerV.Value), null, null);//INC000003848031
            objLog.CrearArchivolog("INC000003848031-ObtenerServicio - session hidNServicioServerV : " + (string)HttpContext.Current.Session["hidNServicioServerV"], null, null);//INC000003848031


            objLog.CrearArchivolog("[Inicio][CadenaServicio][" + strCadenaServicio + "]", null, null);//INC000003848031
            //INICIO PROY-30748
            string strCadenaNewServicio = Funciones.CheckStr(hidNuevoServicio.Value);
            objLog.CrearArchivolog("strCadenaNewServicio", strCadenaNewServicio, null);//APOYO-PROY-30748

            objLog.CrearArchivolog("[Inicio][idPlan]", idPlan, null);//INC000003456157
            objLog.CrearArchivolog("[Inicio][CantPlanes]", CantPlanes, null);//INC000003456157

            objLog.CrearArchivolog("strCadenaNewServicio => " + Funciones.CheckStr(strCadenaNewServicio), null, null);

            if (strCadenaNewServicio.Length > 0 & strCadenaNewServicio != "undefined" || strCadenaNewServicio == "SSA")//INC000003456157
            {
                //if (strCadenaNewServicio != "SSA")
                if (!strCadenaNewServicio.Contains("SSA"))
                {
                    string[] arrListaServicio = strCadenaNewServicio.Split(' ');
                    objLog.CrearArchivolog("[Inicio][CadenaNewServicio]", strCadenaNewServicio, null);
                    foreach (string str in arrListaServicio)
                    {
                        string[] arrServicio = str.Split('_');

                        objLog.CrearArchivolog("[Inicio][foreach 1]", strCadenaNewServicio, null);//emmh

                        objServicio = new BESecServicio_AP();
                        objServicio.SOPLN_ORDEN = Funciones.CheckInt(idPlan);
                        objLog.CrearArchivolog("[Inicio][foreach 2] " + Funciones.CheckStr(idPlan), strCadenaNewServicio, null);//emmh
                        objServicio.SERVV_CODIGO = arrServicio[0];
                        objLog.CrearArchivolog("[Inicio][foreach 3] " + Funciones.CheckStr(arrServicio[0]), strCadenaNewServicio, null);//emmh
                        objServicio.CARGO_FIJO_BASE = Convert.ToDouble(arrServicio[1]);
                        objLog.CrearArchivolog("[Inicio][foreach 4] " + Funciones.CheckStr(arrServicio[1]), strCadenaNewServicio, null);//emmh
                        objServicio.SERVV_USUARIO_CREA = hidUsuarioRed.Value;
                        objLog.CrearArchivolog("[Inicio][foreach 5] " + Funciones.CheckStr(hidUsuarioRed.Value), strCadenaNewServicio, null);//emmh
                        objLista.Add(objServicio);
                    }
                }
            }
            else
            {
                //FIN PROY-30748

                strCadenaServicio = strCadenaServicio.Replace("(*)", "");
                objLog.CrearArchivolog("strCadenaServicio => " + Funciones.CheckStr(strCadenaServicio), null, null);
                string[] arrListaServicio = strCadenaServicio.Split(new string[] { "*ID*" }, StringSplitOptions.RemoveEmptyEntries);

                foreach (string strSrv in arrListaServicio)
                {
                    string[] arrSrvPlan = strSrv.Split('|');
                    objLog.CrearArchivolog("strSrv => " + Funciones.CheckStr(strSrv), null, null);
                    int idSrv = Funciones.CheckInt(arrSrvPlan[0]);
                    objLog.CrearArchivolog("idSrv => " + Funciones.CheckStr(idSrv), null, null);
                    objLog.CrearArchivolog("idPlan => " + Funciones.CheckStr(idPlan), null, null);
                    if (idSrv == idPlan)
                    {
                        foreach (string str in arrSrvPlan)
                        {
                            string arrSrvPlanFila = str.Split(';')[0];
                            if (arrSrvPlanFila.Split('_').Length > 1)
                            {
                                objServicio = new BESecServicio_AP();
                                objServicio.SOPLN_ORDEN = Funciones.CheckInt(idSrv);
                                objServicio.SERVV_CODIGO = arrSrvPlanFila.Split('_')[3];
                                objServicio.CARGO_FIJO_BASE = Funciones.CheckDbl(arrSrvPlanFila.Split('_')[4], 2);
                                objLog.CrearArchivolog("objServicio.SOPLN_ORDEN => " + Funciones.CheckStr(objServicio.SOPLN_ORDEN), null, null);
                                objLog.CrearArchivolog("objServicio.SERVV_CODIGO => " + Funciones.CheckStr(objServicio.SERVV_CODIGO), null, null);
                                objLog.CrearArchivolog("objServicio.CARGO_FIJO_BASE => " + Funciones.CheckStr(objServicio.CARGO_FIJO_BASE), null, null);
                                if (arrSrvPlanFila.Split('_').Length > 6) //PROY-29296
                                    objServicio.SERVN_ID_MONTO_TOPE = Funciones.CheckInt(arrSrvPlanFila.Split('_')[6]); //PROY-29296
                                if (blnSecTieneProteccionMovil) //PROY-24724-IDEA-28174 - INICIO
                                {
                                    if (objServicio.SERVV_CODIGO == strCodServProteccionMovil)
                                    {
                                        string strConcatPrima = hidConcatPrimaServer.Value;
                                        String[] arrConcatPrima = strConcatPrima.Split('|');
                                        foreach (string strPrima in arrConcatPrima)
                                            if (strPrima.Split(';')[0].Equals(Funciones.CheckStr(objServicio.SOPLN_ORDEN)))
                                                objServicio.CARGO_FIJO_BASE = Funciones.CheckDbl(strPrima.Split(';')[1]);
                                    }
                                } //PROY-24724-IDEA-28174 - FIN

                                objServicio.SERVV_USUARIO_CREA = hidUsuarioRed.Value;
                                //objServicio.SERVC_ESTADO = null;
                                //objServicio.SERVC_PLAZO = null;
                                //objServicio.SERVD_FECHA_ACTIVACION = null;
                                //objServicio.SERVD_FECHA_DESACTIVACION = null;

                                if (arrSrvPlanFila.Split('_').Length >= 8)
                                {
                                    string strEstado = arrSrvPlanFila.Split('_')[5];
                                    if (!string.IsNullOrEmpty(strEstado))
                                    {
                                        objServicio.SERVC_ESTADO = ConfigurationManager.AppSettings["ConstPendienteProcesar"].ToString();
                                    }
                                    objServicio.SERVC_PLAZO = strEstado;

                                    string strFechaActiva = arrSrvPlanFila.Split('_')[7];
                                    if (!string.IsNullOrEmpty(strFechaActiva))
                                    {
                                        objServicio.SERVD_FECHA_ACTIVACION = DateTime.Parse(strFechaActiva);
                                    }

                                    string strFechaDesactiva = arrSrvPlanFila.Split('_')[8];
                                    if (!string.IsNullOrEmpty(strFechaDesactiva))
                                    {
                                        objServicio.SERVD_FECHA_DESACTIVACION = DateTime.Parse(strFechaDesactiva);
                                    }
                                }
                                objLista.Add(objServicio);
                            }
                        }
                    }
                }
            }
            //FIN PROY-30748
            return objLista;
        }

        private BEPlanSolicitudHFC ObtenerDetalleHFC(int idxFila, ref double dblCF)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][ObtenerDetalleHFC]", null, null);


            BEPlanSolicitudHFC objPlanSolHFC = new BEPlanSolicitudHFC();
            List<BEPlanDetalleHFC> objPlanDetHFC = new List<BEPlanDetalleHFC>();
            string strCadenaEvaluacion = Funciones.CheckStr(hidCadenaDetalle.Value);
            string strAgrupaPaquete = Funciones.CheckStr(hidGrupoPaqueteServerV.Value);
            int index = 0;

            string[] arrPlanes = strCadenaEvaluacion.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
            string strFilasGrupo = ObtenerFilasGrupo(idxFila);
            objLog.CrearArchivolog("[arrPlanes]", strCadenaEvaluacion.ToString(), null);
            foreach (string strPlanes in arrPlanes)
            {
                index = index + 1;
                string[] arrPlanFila = strPlanes.Split(';');
                int idFila = Funciones.CheckInt(arrPlanFila[0]);
                string strTipoProducto = arrPlanFila[1];

                // Producto HFC
                if (strTipoProducto == constTipoProductoHFC || strTipoProducto == constTipoProducto3PlayInalam || strTipoProducto == constTipoProductoFTTH && (strFilasGrupo.IndexOf(idFila.ToString()) > -1)) //FTTH
                {
                    dblCF = dblCF + Funciones.CheckDbl(arrPlanFila[23], 2);

                    if (idFila == idxFila)
                    {
                        objPlanSolHFC.IdPlazo = arrPlanFila[2];
                        objPlanSolHFC.Plazo = arrPlanFila[3];
                        objPlanSolHFC.IdPaquete = Funciones.CheckInt(arrPlanFila[6].Split('_')[0]);
                        objPlanSolHFC.Paquete = arrPlanFila[7];
                        objPlanSolHFC.Usuario = hidUsuarioRed.Value;
                        objPlanSolHFC.IdCampana = arrPlanFila[15];
                        objPlanSolHFC.Campana = arrPlanFila[16];
                        objPlanSolHFC.IdPlan = arrPlanFila[9];
                        objPlanSolHFC.Plan = arrPlanFila[11];

                        // Equipo
                        objPlanSolHFC.oEquipo = ObtenerEquipoHFC(idFila);
                    }

                    // Telefono
                    if (!string.IsNullOrEmpty(arrPlanFila[30]))
                        objPlanSolHFC.Telefono = arrPlanFila[30];

                    // Servicio Principal
                    BEPlanDetalleHFC oPlanDetHFC = new BEPlanDetalleHFC();

                    string[] arrServicio = arrPlanFila[32].Split('_');
                    oPlanDetHFC.IdServicio = arrServicio[0];
                    oPlanDetHFC.Servicio = arrPlanFila[33];
                    oPlanDetHFC.FlagPrincipal = "1";
                    oPlanDetHFC.Orden = idFila;
                    oPlanDetHFC.Agrupa = hidGrupoPaqueteServerV.Value;
                    oPlanDetHFC.Precio = Funciones.CheckDbl(arrServicio[1], 2);
                    oPlanDetHFC.CF_Linea = Funciones.CheckDbl(arrPlanFila[23], 2);
                    oPlanDetHFC.Grupo = index;
                    oPlanDetHFC.IdTope = Funciones.CheckStr(arrPlanFila[42]); //PROY-29296
                    oPlanDetHFC.Id_MontoTope = Funciones.CheckInt(arrPlanFila[41]); //PROY-29296
                    // Servicios(Opcional)
                    List<BEPlanDetalleHFC> objSrvDetHFC = new List<BEPlanDetalleHFC>();
                    objSrvDetHFC.Add(oPlanDetHFC);
                    objSrvDetHFC.AddRange(ObtenerServicioHFC(idFila));

                    // Servicio
                    foreach (BEPlanDetalleHFC item in objSrvDetHFC)
                    {
                        item.Grupo = index;
                        objPlanDetHFC.Add(item);
                    }
                }
            }
            objPlanSolHFC.oServicio = objPlanDetHFC;
            objLog.CrearArchivolog("[Fin][ObtenerDetalleHFC]", null, null);
            return objPlanSolHFC;
        }

        private List<BEPlanEquipoHFC> ObtenerEquipoHFC(int idPlan)
        {
            List<BEPlanEquipoHFC> objLista = new List<BEPlanEquipoHFC>();
            BEPlanEquipoHFC objPlanEquipoHFC = null;
            string strCadenaEquipo = Funciones.CheckStr(hidEquipoServer.Value);


            if (!string.IsNullOrEmpty(strCadenaEquipo))
            {
                string strItemIni = "|*ID" + idPlan.ToString() + "*";
                string strItemFin = "*/ID" + idPlan.ToString() + "*";
                string strEquipos = String.Empty;

                int intPosIni = strCadenaEquipo.IndexOf(strItemIni);
                if (intPosIni > -1)
                {
                    int inPosFin = strCadenaEquipo.IndexOf(strItemFin);
                    strEquipos = strCadenaEquipo.Substring((intPosIni + strItemIni.Length), (inPosFin - strItemIni.Length));
                }

                string[] arrListaEquipo = strEquipos.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string strEquipo in arrListaEquipo)
                {
                    objPlanEquipoHFC = new BEPlanEquipoHFC();
                    objPlanEquipoHFC.IdEquipo = Funciones.CheckStr(strEquipo.Split(';')[0]);
                    objPlanEquipoHFC.Equipo = Funciones.CheckStr(strEquipo.Split(';')[2]);
                    objPlanEquipoHFC.CF_Alquiler = Funciones.CheckDbl(strEquipo.Split(';')[3]);

                    objLista.Add(objPlanEquipoHFC);
                }
            }

            return objLista;
        }

        private List<BEPlanDetalleHFC> ObtenerServicioHFC(int idPlan)
        {
            List<BEPlanDetalleHFC> objLista = new List<BEPlanDetalleHFC>();
            BEPlanDetalleHFC objPlanDetHFC = null;
            string strCadenaServicio = Funciones.CheckStr(hidNServicioServerV.Value);

            strCadenaServicio = strCadenaServicio.Replace("(*)", "");
            string[] arrListaServicio = strCadenaServicio.Split(new string[] { "*ID*" }, StringSplitOptions.RemoveEmptyEntries);

            foreach (string strServicio in arrListaServicio)
            {
                string[] arrSrvPlan = strServicio.Split('|');
                int idSrv = Funciones.CheckInt(arrSrvPlan[0]);

                if (idSrv == idPlan)
                {
                    foreach (string str in arrSrvPlan)
                    {
                        string arrSrvPlanFila = str.Split(';')[0];
                        if (arrSrvPlanFila.Split('_').Length > 1)
                        {
                            objPlanDetHFC = new BEPlanDetalleHFC();
                            objPlanDetHFC.IdServicio = arrSrvPlanFila.Split('_')[3];
                            objPlanDetHFC.Servicio = Funciones.CheckStr(str.Split(';')[1]);
                            objPlanDetHFC.FlagPrincipal = "0";
                            objPlanDetHFC.Precio = Funciones.CheckDbl(arrSrvPlanFila.Split('_')[4], 2);

                            objLista.Add(objPlanDetHFC);
                        }
                    }
                }
            }
            return objLista;
        }

        private string ObtenerFilasGrupo(int idFila)
        {
            string strAgrupaPaquete = Funciones.CheckStr(hidGrupoPaqueteServerV.Value);
            string[] arrAgrupaPaquete = strAgrupaPaquete.Split('}');
            string strCadenaId = string.Empty;

            foreach (string item in arrAgrupaPaquete)
            {
                strCadenaId = item.Replace("{", "").Replace("[", "").Replace("]", "") + ",";

                if (strCadenaId.IndexOf("," + idFila.ToString() + ",") > -1)
                {
                    break;
                }
            }
            return strCadenaId;
        }

        #endregion [Detalle Venta]

        private BESolicitudPersona DatosEvalPersona(ref Vista_SolicitudDC_Reporte vista)
        {
            BESolicitudPersona objSolicitud = new BESolicitudPersona();

            string nroDocumento = hidNroDocumento.Value;
            bool blnAutonomia = (hidnAutonomia.Value == "S");
            bool blnIrCreditos = false;
            blnIrCreditos = (blnIrCreditos || (hidCreditosxDC7.Value == "S"));
            blnIrCreditos = (blnIrCreditos || (hidCreditosxCE.Value == "S"));
            blnIrCreditos = (blnIrCreditos || (hidnCreditosxNombresV.Value == "S"));
            blnIrCreditos = (blnIrCreditos || (hidCreditosxAsesor.Value == "S"));
            blnIrCreditos = (blnIrCreditos || (hidCreditosxLineaDesactiva.Value == "S"));

            bool blnAdjuntarIngreso = (hidnAdjuntarIngreso.Value == "S");
            bool blnPortabilidad = (hidNTienePortabilidadValues.Value == "S");

            string strCodCanal = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[3];
            string strCodOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];
            string strDesOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[1];
            string strTipoOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[2];
            string strCodEvaluador = hidUsuarioRed.Value;
            string strCodAnalista = ConfigurationManager.AppSettings["constResultadoCodigoAnalista"];
            string strCodTipoDocumento = Funciones.Right(("00" + hidTipoDocumento.Value), 2);
            string strNroDocumento = Funciones.Right(("00000000000000" + nroDocumento), 16);
            //gaa20151209
            //string strCodOferta = ddlOferta.SelectedValue;
            string strCodOferta = hidnTipoOfertaValue.Value;
            //fin gaa20151209
            string strCodCasoEspecial = hidCasoEspecial.Value.Split('_')[0];
            string strCodSegmento;

            if ((strCodOferta == constTipoProductoCON) || (strCodOferta == constTipoProductoB2E))
            {
                strCodSegmento = constSegmentoCON;
            }
            else
            {
                strCodSegmento = constSegmentoECA;
                strCodCanal = ConfigurationManager.AppSettings["constCodCanalBD"];
                if (strCodOferta == constTipoProductoBUS)
                {
                    strCodCanal = ConfigurationManager.AppSettings["constCodCanalBI"];
                    if (strTipoOficina == ConfigurationManager.AppSettings["constCodTipoOficinaCAC"])
                    {
                        strCodCanal = ConfigurationManager.AppSettings["constCodCanalBD"];
                    }
                }
            }

            string strCodTipoVenta = ConfigurationManager.AppSettings["strTVPostpago"];
            string strCodTipoCliente = ConfigurationManager.AppSettings["constTipoClienteNAT"];
            string strCodTipoActivacion = ConfigurationManager.AppSettings["SISACT_TipoActivacion_Inmediata"];
            string strCodTipoOperacion = ConfigurationManager.AppSettings["constTipoOperacionATN"];

            // Agregado en caso no tenga kit, se asignara tipo operacion transferencia para no ser listado en venta express
            if (hidFlgTitularidad.Value == "S")
            {
                strCodTipoOperacion = ConfigurationManager.AppSettings["constTipoOperacionTRA"];
            }
            else
            {
                strCodTipoOperacion = hidTipoOperacion.Value;
            }

            string strCodFormaPago = ConfigurationManager.AppSettings["SISACT_FormaPago_Efectivo"];
            string strCodResultadoFinal = ConfigurationManager.AppSettings["constCodResultadoFinalAPR"];
            string strExisteBSCS = "0";
            if (objCliente.esClienteClaro) strExisteBSCS = "1";

            string strControlConsumo = "0";
            Int64 nroSECAnterior = Funciones.CheckInt64(hidNroSEC.Value);
            string strCodEstado = constEstadoAPR;
            string strDesEstado = constDesEstadoAPR;

            // VALIDACION ESTADO SEC
            if (blnAutonomia)
            {
                if (blnPortabilidad)
                {
                    strCodEstado = constEstadoENVPOOLEMIT;
                    strDesEstado = constDesEstadoENVPOOLEMIT;
                }
            }
            else
            {
                strCodEstado = constEstadoEnvCreditos;
                strDesEstado = constDesEstadoEnvCreditos;
            }
            if (blnIrCreditos)
            {
                strCodEstado = constEstadoEnvCreditos;
                strDesEstado = constDesEstadoEnvCreditos;
            }
            if (blnAdjuntarIngreso)
            {
                strCodEstado = constEstadoPENDADJARCH;
                strDesEstado = constDesEstadoPENDADJARCH;
            }

            #region INICIATIVA - 803 | OBTENER DATOS DE DatosEvalPersona

            if (Funciones.CheckStr(hidFlagTiendaVirtual.Value).Equals("1"))
            {
                string strIdEstado = string.Empty;
                string strIdFlujo = string.Empty;
                string strNodoRegistro = string.Empty;
                string strPedidoTV = string.Empty;
                string strPrecioTV = string.Empty;
                string strPrecioSISACT = string.Empty;
                string strCodiOficina = string.Empty;
                string strUsuario = string.Empty;
                string strCodEstadoPOS = string.Empty;

                BEAprobacionExcepcionPrecios objAprobacion = new BEAprobacionExcepcionPrecios();

                strPedidoTV = Funciones.CheckStr(txtNroPedidoWeb.Value);
                strPrecioTV = Funciones.CheckStr(txtPrecioExcep.Value);
                strPrecioSISACT = Funciones.CheckStr(hidMontoEquipoVenta.Value);
                strCodiOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];
                strUsuario = Funciones.CheckStr(CurrentUser);
                strNodoRegistro = CurrentHostName;
                strIdEstado = ReadKeySettings.Key_CodEstadoSinExcepcionPrecio;
                strIdFlujo = ReadKeySettings.Key_IdFlujoEvalConsumer;

                objAprobacion.PEDIDO_TV = string.Empty;

                if (chkExcepPrecio.Checked && hidFlagServicio.Value == "1")
                {
                    strCodEstadoPOS = strCodEstado;
                    strIdEstado = ReadKeySettings.Key_EstadoPendValidacion;
                    strCodEstado = ReadKeySettings.Key_CodEstadoAprobFactorSub;
                    strDesEstado = ReadKeySettings.Key_DesEstadoAprobFactorSub;
                }

                objAprobacion.PEDIDO_TV = strPedidoTV;
                objAprobacion.PEDIDO_SINERGIA = string.Empty;
                objAprobacion.PRECIO_TV = strPrecioTV;
                objAprobacion.PRECIO_SISACT = strPrecioSISACT;
                objAprobacion.COD_OFICINA = strCodiOficina;
                objAprobacion.USUARIO_REGISTRO = strUsuario;
                objAprobacion.NODO_REGISTRO = strNodoRegistro;
                objAprobacion.ESTADO = strIdEstado;
                objAprobacion.ESTADO_POS = strCodEstadoPOS;
                objAprobacion.ID_FLUJO = strIdFlujo;

                HttpContext.Current.Session["DatosExecpPrecios"] = objAprobacion;

            }

            #endregion

            hidCodEstadoSEC.Value = strCodEstado;

            string strCodTipoEvaluador = constCodEvaluadorPDV;
            if (strCodCanal != constCodCodCanalDefectoMT)
            {
                strCodTipoEvaluador = constCodEvaluadorCET;
            }

            string strFlagTerminado = "N";
            string strDesTipoActivacion = ConfigurationManager.AppSettings["constDesTipoActivacionINM"].ToString();
            string strComentarioPDV = Funciones.CheckStr(hidComentarioPDV.Value);
            string strCodUsuario = hidUsuarioRed.Value;
            string strNombreCliente = Funciones.CheckStr(hidNombre.Value).ToUpper();
            string strAPaternoCliente = Funciones.CheckStr(hidApePaterno.Value).ToUpper();
            string strAMaternoCliente = Funciones.CheckStr(hidApeMaterno.Value).ToUpper();

            //string strDatosDC = hidDatosDC.Value;
            //string[] arrDatosDC = strDatosDC.Split('?');

            string strResultado = objClienteDC.ACCION;                      //Funciones.CheckStr(arrDatosDC[1]);
            double dblLineaCredito = objClienteDC.LC_DISPONIBLE;            //Funciones.CheckStr(arrDatosDC[2]);
            string strNroOperacion = objClienteDC.NUMEROOPERACION;          //Funciones.CheckStr(arrDatosDC[4]);
            string strTipoClienteDC = objClienteDC.TIPO_DE_CLIENTE;         //Funciones.CheckStr(arrDatosDC[5]);
            string strLetraScoreCrediticio = objClienteDC.CREDIT_SCORE;     //Funciones.CheckStr(arrDatosDC[8]);
            string strNumScoreCrediticio = Funciones.CheckStr(objClienteDC.SCORE); //Funciones.CheckStr(arrDatosDC[9]);
            string strOrigen_Lc_DC = objClienteDC.TOP_10000;                //Funciones.CheckStr(arrDatosDC[17]);
            string strANALISIS_DC = objClienteDC.ANALISIS;                  //Funciones.CheckStr(arrDatosDC[18]);
            string strSCORE_RANKING_OPER_DC = objClienteDC.SCORE_RANKIN_OPERATIVO; //Funciones.CheckStr(arrDatosDC[19]);
            double dblPUNTAJE_DC = objClienteDC.PUNTAJE;                    //Funciones.CheckStr(arrDatosDC[20]);
            double dblLC_DATA_CREDITO_DC = objClienteDC.LIMITECREDITODATACREDITO; //Funciones.CheckStr(arrDatosDC[21]);
            double dblLC_BASE_EXTERNA_DC = objClienteDC.LIMITECREDITOBASEEXTERNA; //Funciones.CheckStr(arrDatosDC[22]);
            double dblLC_CLARO_DC = objClienteDC.LIMITECREDITOCLARO;        //Funciones.CheckStr(arrDatosDC[23]);
            string strRazonesDC = objClienteDC.RAZONES;                     //Funciones.CheckStr(arrDatosDC[24]);
            DateTime strFechaNacimiento = Funciones.CheckDate(objClienteDC.FECHANACIMIENTO);       //Funciones.CheckStr(arrDatosDC[25]);
            int strBuro = objClienteDC.CODIGOBURO;                       //Funciones.CheckStr(arrDatosDC[26]);

            string strREGLAS_DURAS_DC = String.Empty;
            string strALERTA_COMPORTAMIENTO_DC = String.Empty;
            string strALERTAS_DC = String.Empty;
            string strCORRESPONDENCIA_SALDO_DC = String.Empty;
            string strRAZONES_NODOS = String.Empty;
            if (strRazonesDC.Length >= 5)
            {
                try
                {
                    if (strRazonesDC.Substring(0, 1) != "V")
                    {
                        strREGLAS_DURAS_DC = strRazonesDC.Substring(0, 1);
                        strALERTA_COMPORTAMIENTO_DC = strRazonesDC.Substring(1, 1);
                        strALERTAS_DC = strRazonesDC.Substring(2, 1);
                        strCORRESPONDENCIA_SALDO_DC = strRazonesDC.Substring(3, 1);
                    }
                    strRAZONES_NODOS = strRazonesDC.Substring(5);
                }
                catch (Exception)
                {
                }
            }
            // VALIDACION ESSALUD - SUNAT
            string strValidacionEssalud;
            string strValidacionSunat;

            if ((Funciones.CheckInt(strTipoClienteDC) & Funciones.CheckInt(BEDataCreditoOUT.TIPO_CLIENTE.SUNAT)) != 0)
                strValidacionSunat = "P";
            else
                strValidacionSunat = "N";

            if ((Funciones.CheckInt(strTipoClienteDC) & Funciones.CheckInt(BEDataCreditoOUT.TIPO_CLIENTE.ESSALUD)) != 0)
                strValidacionEssalud = "P";
            else
                strValidacionEssalud = "N";

            string strCodResultadoDir = ConfigurationManager.AppSettings["constResultadoDireccionPostVenta"].ToString();
            string strDesResultadoDir = ConfigurationManager.AppSettings["constDesResDireccionPostVenta"].ToString();
            string strFlagInfocorp = "1";
            string strIdVendedor = "";

            string strEstadoCivil = ConfigurationManager.AppSettings["ConstEstadoCivilSoltero"].ToString();
            string strDistrito = ConfigurationManager.AppSettings["ConstUbigeoLima"].ToString();
            DateTime fechaNacPdv = Funciones.CheckDate("01/01/1900");

            if (!string.IsNullOrEmpty(hidFechaNac.Value))
            {
                fechaNacPdv = Funciones.CheckDate(hidFechaNac.Value);
            }

            objSolicitud.OVENC_CODIGO = strCodOficina;
            objSolicitud.CANAC_CODIGO = strCodCanal;
            objSolicitud.SOLIN_USU_VEN = strCodEvaluador;
            objSolicitud.SOLIC_EXI_BSC_FIN = strExisteBSCS;
            objSolicitud.ANALC_CODIGO = strCodAnalista;
            objSolicitud.TDOCC_CODIGO = strCodTipoDocumento;
            objSolicitud.CLIEC_NUM_DOC = strNroDocumento;
            objSolicitud.CLIEV_RAZ_SOC = String.Empty;
            objSolicitud.TPROC_CODIGO = strCodOferta;
            objSolicitud.SEGMN_CODIGO = Funciones.CheckInt(strCodSegmento);
            objSolicitud.TCLIC_CODIGO = strCodTipoCliente;
            objSolicitud.TVENC_CODIGO = strCodTipoVenta;
            objSolicitud.TACTC_CODIGO = strCodTipoActivacion;
            objSolicitud.TOPEN_CODIGO = strCodTipoOperacion;
            objSolicitud.FPAGC_CODIGO = strCodFormaPago;
            objSolicitud.MRECC_CODIGO = strCodResultadoFinal;
            objSolicitud.ESTAC_CODIGO = strCodEstado;
            objSolicitud.TEVAC_CODIGO = strCodTipoEvaluador;
            objSolicitud.SOLIC_FLA_TER = strFlagTerminado;
            objSolicitud.SOLIV_DES_EST = strDesEstado;
            objSolicitud.SOLIV_DES_OFI_VEN = ((strDesOficina.Length > 20) ? strDesOficina.Substring(0, 20) : strDesOficina);
            objSolicitud.SOLIV_DES_TIP_ACT = strDesTipoActivacion;
            objSolicitud.SOLIV_COM_PUN_VEN = strComentarioPDV;
            objSolicitud.SOLIC_USU_CRE = strCodUsuario;
            objSolicitud.CLIEV_NOM = strNombreCliente;
            objSolicitud.CLIEV_APE_PAT = strAPaternoCliente;
            objSolicitud.CLIEV_APE_MAT = strAMaternoCliente;
            objSolicitud.CLIEC_CODNACION = hidCodNacionalidad.Value; //PROY-31636
            objSolicitud.CLIEV_DESCNACION = hidDesNacionalidad.Value; //PROY-31636
            objSolicitud.SOLIC_EVA_ESS = strValidacionEssalud;
            objSolicitud.SOLIC_EVA_SUN = strValidacionSunat;
            objSolicitud.SOLIC_COD_RES_DIR = strCodResultadoDir;
            objSolicitud.SOLIV_DES_RES_DIR = strDesResultadoDir;
            objSolicitud.SOLIV_RES_EXP_CON = strResultado;
            objSolicitud.SOLIV_NUM_OPE_CON = strNroOperacion;
            objSolicitud.SOLIN_LIM_CRE_CON = dblLineaCredito;
            objSolicitud.TCESC_CODIGO = strCodCasoEspecial;
            objSolicitud.SOLIC_SCO_TXT_CON = strLetraScoreCrediticio;
            objSolicitud.SOLIN_SCO_NUM_CON = strNumScoreCrediticio;
            objSolicitud.SOLIN_CODIGO_PADRE = nroSECAnterior;
            objSolicitud.FLAG_INFOCORP = strFlagInfocorp;
            objSolicitud.SOLIC_EXI_BSC_CON = strExisteBSCS;
            objSolicitud.VENDEDOR_ID = strIdVendedor;
            objSolicitud.FLAG_CONSUMO = strControlConsumo;
            objSolicitud.CLIEV_EST_CIV = strEstadoCivil;
            objSolicitud.SOLIV_UBIGEO_INEI = strDistrito;
            objSolicitud.SOLIC_ORIGEN_LC_DC = strOrigen_Lc_DC;
            objSolicitud.SOLIC_ANALISIS_DC = strANALISIS_DC;
            objSolicitud.SOLIC_SCORE_RANKING_OPER_DC = strSCORE_RANKING_OPER_DC;
            objSolicitud.SOLIN_PUNTAJE_DC = dblPUNTAJE_DC;
            objSolicitud.SOLIN_LC_DATA_CREDITO_DC = dblLC_DATA_CREDITO_DC;
            objSolicitud.SOLIN_LC_BASE_EXTERNA_DC = dblLC_BASE_EXTERNA_DC;
            objSolicitud.SOLIN_LC_CLARO_DC = dblLC_CLARO_DC;
            objSolicitud.SOLIC_REGLAS_DURAS_DC = strREGLAS_DURAS_DC;
            objSolicitud.SOLIC_ALERT_COMPORT_DC = strALERTA_COMPORTAMIENTO_DC;
            objSolicitud.SOLIC_ALERTAS_DC = strALERTAS_DC;
            objSolicitud.SOLIC_CORRESP_SALDO_DC = strCORRESPONDENCIA_SALDO_DC;
            objSolicitud.CLIED_FEC_NAC = strFechaNacimiento;
            objSolicitud.CLIED_FEC_NAC_PDV = fechaNacPdv;
            objSolicitud.LC_DISPONIBLE = Funciones.CheckDbl(hidnLCDisponibleValue.Value);
            objSolicitud.CF_MENORES = objCliente.CF_Menor;
            objSolicitud.CF_MAYORES = objCliente.CF_Mayor;
            objSolicitud.DEUDA = objCliente.deudaVencida;
            objSolicitud.BLOQUEO = ((objCliente.nroBloqueo > 0) ? "1" : "0");
            objSolicitud.RESPUESTA_DC = hidNRespuestaDCValue.Value;
            objSolicitud.CLIEV_CALIFICACION_PAGO = objCliente.comportamientoPago.ToString();
            objSolicitud.BURO_CREDITICIO = strBuro;
            objSolicitud.CLIEV_RIESGO_CLARO = hidnRiesgoClaroValue.Value;
            objSolicitud.CLIEV_COMPORTA_PAGO = objCliente.oVistaEvaluacion.oOfrecimiento[0].ComportamientoConsolidado.ToString();//INC000000882268
            objSolicitud.CLIEC_FLAG_EXONERAR_RA = hidnExoneracionRAValues.Value;
            objSolicitud.FLAG_PORTABILIDAD = ConfigurationManager.AppSettings["FlagPortabilidad"].ToString();
            objSolicitud.PORT_OPER_CED = Funciones.CheckInt(hidOperadorCedente.Value);
            objSolicitud.PORT_ESTADO = ConfigurationManager.AppSettings["constEstadoEmitidoPortabilidad"].ToString();
            objSolicitud.PORT_TELEF_CONT = hidNumeroContacto.Value;
            objSolicitud.PORT_FLAG_REC_OPE_CED = "0";
            objSolicitud.PORT_CARGO_FIJO_OPE_CED = "0";
            objSolicitud.PORT_NRO_FOLIO = hidNumeroFolio.Value;
            objSolicitud.TLINC_CODIGO_CEDENTE = hidModalidad.Value;

            //Inicio IDEA-30067
            if (blnPortabilidad)
            {
                objSolicitud.CODCAMPANNA = constFlagPortabilidadCP.ToString();
            }
            else
            {
                objSolicitud.CODCAMPANNA = constFlagConvergente.ToString();
            }
            //Fin IDEA-30067

            objSolicitud.FLAG_VTA_PROACTIVA = "0";
            objSolicitud.NRO_DOCUMENTO = nroDocumento;

            vista.DCREV_NUM_OPERACION = strNroOperacion;
            vista.DCREV_OVEN_CODIGO = strCodOficina;
            vista.DCREN_USUARIO_REG = hidUsuarioRed.Value;
            vista.DCREC_TIPO_DOCUMENTO = strCodTipoDocumento;
            vista.DCREV_NUM_DOCUMENTO = nroDocumento;
            vista.DCREV_APELLIDO_PAT = strAPaternoCliente;
            vista.DCREV_APELLIDO_MAT = strAMaternoCliente;
            vista.DCREV_NOMBRE = strNombreCliente;
            vista.DCREN_CANT_INTENTOS = Funciones.CheckInt(hidIntentos10.Value);
            vista.DCREC_VALIDAR_CLIENTE = "X";
            vista.FUENTECONSULTA = objClienteDC.FUENTECONSULTA;

            return objSolicitud;
        }

        private BESolicitudEmpresa DatosEvalEmpresa()
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][DatosEvalEmpresa]", null, null);
            BESolicitudEmpresa item = new BESolicitudEmpresa();
            objLog.CrearArchivolog("[hidUsuarioRed]", hidUsuarioRed.Value, null);
            objLog.CrearArchivolog("[hidNroDocumento]", hidNroDocumento.Value, null);
            objLog.CrearArchivolog("[hidnAutonomia]", hidnAutonomia.Value, null);
            objLog.CrearArchivolog("[hidCreditosxCE]", hidCreditosxCE.Value, null);
            objLog.CrearArchivolog("[hidCreditosxAsesor]", hidCreditosxAsesor.Value, null);
            objLog.CrearArchivolog("[hidCreditosxLineaDesactiva]", hidCreditosxLineaDesactiva.Value, null);
            objLog.CrearArchivolog("[hidAdjuntarIngreso]", hidnAdjuntarIngreso.Value, null);
            objLog.CrearArchivolog("[hidNTienePortabilidadValues]", hidNTienePortabilidadValues.Value, null);
            //INI - INC000002758369
            objLog.CrearArchivolog("[hAdjuntarDocumento]", hAdjuntarDocumento.Value, null);
            //FIN - INC000002758369
            string usuario = hidUsuarioRed.Value;
            string strNroDocumento = hidNroDocumento.Value;
            bool blnAutonomia = (hidnAutonomia.Value == "S");
            bool blnIrCreditos = false;
            blnIrCreditos = (blnIrCreditos || (hidCreditosxCE.Value == "S"));
            blnIrCreditos = (blnIrCreditos || (hidCreditosxAsesor.Value == "S"));
            blnIrCreditos = (blnIrCreditos || (hidCreditosxLineaDesactiva.Value == "S"));
            bool blnAdjuntarIngreso = (hidnAdjuntarIngreso.Value == "S");
            bool blnPortabilidad = (hidNTienePortabilidadValues.Value == "S");
            objLog.CrearArchivolog("[blnAutonomia]", blnAutonomia.ToString(), null);
            objLog.CrearArchivolog("[blnIrCreditos]", blnIrCreditos.ToString(), null);
            objLog.CrearArchivolog("[blnAdjuntarIngreso]", blnAdjuntarIngreso.ToString(), null);
            objLog.CrearArchivolog("[blnPortabilidad]", blnPortabilidad.ToString(), null);


            string strCodCanal = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[3];
            string strCodOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];
            string strDesOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[1];
            string strTipoOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[2];
            string strCodTipoDocumento = Funciones.Right(("00" + hidTipoDocumento.Value), 2);
            //gaa20151209
            //string strCodOferta = ddlOferta.SelectedValue;
            string strCodOferta = hidnTipoOfertaValue.Value;
            //fin gaa20151209

            if (strCodOferta == ConfigurationManager.AppSettings["constTipoProductoBUS"].ToString())
            {
                if (strCodCanal == ConfigurationManager.AppSettings["constCodCodCanalDefectoMT"].ToString())
                {
                    strCodCanal = ConfigurationManager.AppSettings["constCodCanalBD"].ToString();
                }
                else
                {
                    strCodCanal = ConfigurationManager.AppSettings["constCodCanalBI"].ToString();
                }
            }

            // VALIDACION ESTADO SEC
            if (blnAutonomia)
            {
                item.SOLIV_FLAG_ENVIO = "1";
                item.ESTAC_CODIGO = ConfigurationManager.AppSettings["constEstadoAPR"].ToString();
                item.SOLIV_DES_RES_FIN = ConfigurationManager.AppSettings["constDesResultadoFinalAPR"].ToString();
                item.SOLIV_COM_DG = ConfigurationManager.AppSettings["constTextoAprobadoAutonomia"].ToString();
            }
            else
            {
                item.SOLIV_FLAG_ENVIO = "2";
                item.ESTAC_CODIGO = ConfigurationManager.AppSettings["constcodEstadoSECPENDADJARCHIVOS"].ToString();
                item.SOLIV_DES_RES_FIN = ConfigurationManager.AppSettings["constdesEstadoSECPENDADJARCHIVOS"].ToString();
                item.SOLIV_COM_DG = ConfigurationManager.AppSettings["constTextoNoAprobadoAutonomia"].ToString();
            }
            if (blnPortabilidad)
            {
                item.SOLIV_COM_DG = "";
                if (blnAutonomia)
                {
                    if (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"]) || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                    {
                        item.SOLIV_FLAG_ENVIO = "1";
                        item.ESTAC_CODIGO = ConfigurationManager.AppSettings["constEstadoAPR"].ToString();
                        item.SOLIV_DES_RES_FIN = ConfigurationManager.AppSettings["constDesResultadoFinalAPR"].ToString();
                    }
                    else
                    {
                        item.SOLIV_FLAG_ENVIO = "2";
                        item.ESTAC_CODIGO = ConfigurationManager.AppSettings["constcodEstadoSECPENDADJARCHIVOS"].ToString();
                        item.SOLIV_DES_RES_FIN = ConfigurationManager.AppSettings["constdesEstadoSECPENDADJARCHIVOS"].ToString();
                    }

                }
                else if (hAdjuntarDocumento.Value != "S" && hAdjuntarDocumento.Value != "")//Si es "S" Se queda con el estado PENDADJARCH //INC000002758369 Se agrega que ademas sea diferente a vacio
                {
                    item.SOLIV_FLAG_ENVIO = "";
                    item.ESTAC_CODIGO = ConfigurationManager.AppSettings["constEstadoEnvCreditos"].ToString();
                    item.SOLIV_DES_RES_FIN = ConfigurationManager.AppSettings["constDesEstadoEnvCreditos"].ToString();
                }
                //Fin PROY-26963-F3 - GPRD
            }

            // Enviar a Creditos
            if (blnIrCreditos)
            {
                item.SOLIV_FLAG_ENVIO = "2";
                item.ESTAC_CODIGO = ConfigurationManager.AppSettings["constcodEstadoSECPENDADJARCHIVOS"].ToString();
                item.SOLIV_DES_RES_FIN = ConfigurationManager.AppSettings["constdesEstadoSECPENDADJARCHIVOS"].ToString();
                item.SOLIV_COM_DG = ConfigurationManager.AppSettings["constTextoNoAprobadoAutonomia"].ToString();
            }

            #region INICIATIVA - 803 | OBTENER DATOS DE DatosEvalEmpresa

            if (Funciones.CheckStr(hidFlagTiendaVirtual.Value).Equals("1"))
            {
                string strIdEstado = string.Empty;
                string strIdFlujo = string.Empty;
                string strNodoRegistro = string.Empty;
                string strPedidoTV = string.Empty;
                string strPrecioTV = string.Empty;
                string strPrecioSISACT = string.Empty;
                string strCodiOficina = string.Empty;
                string strUsuario = string.Empty;
                string strCodEstadoPOS = string.Empty;

                BEAprobacionExcepcionPrecios objAprobacion = new BEAprobacionExcepcionPrecios();

                strPedidoTV = Funciones.CheckStr(txtNroPedidoWeb.Value);
                strPrecioTV = Funciones.CheckStr(txtPrecioExcep.Value);
                strPrecioSISACT = Funciones.CheckStr(hidMontoEquipoVenta.Value);
                strCodiOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];
                strUsuario = Funciones.CheckStr(CurrentUser);
                strNodoRegistro = CurrentHostName;
                strIdEstado = ReadKeySettings.Key_CodEstadoSinExcepcionPrecio;
                strIdFlujo = ReadKeySettings.Key_IdFlujoEvalConsumer;

                objAprobacion.PEDIDO_TV = string.Empty;

                if (chkExcepPrecio.Checked && Funciones.CheckStr(hidFlagServicio.Value).Equals("1"))
                {
                    strCodEstadoPOS = item.ESTAC_CODIGO;
                    strIdEstado = ReadKeySettings.Key_CodEstadoPendAprobacion;
                    item.ESTAC_CODIGO = ReadKeySettings.Key_CodEstadoAprobFactorSub;
                    item.SOLIV_DES_RES_FIN = ReadKeySettings.Key_DesEstadoAprobFactorSub;
                }

                objAprobacion.PEDIDO_TV = strPedidoTV;
                objAprobacion.PEDIDO_SINERGIA = string.Empty;
                objAprobacion.PRECIO_TV = strPrecioTV;
                objAprobacion.PRECIO_SISACT = strPrecioSISACT;
                objAprobacion.COD_OFICINA = strCodiOficina;
                objAprobacion.USUARIO_REGISTRO = strUsuario;
                objAprobacion.NODO_REGISTRO = strNodoRegistro;
                objAprobacion.ESTADO = strIdEstado;
                objAprobacion.ESTADO_POS = strCodEstadoPOS;
                objAprobacion.ID_FLUJO = strIdFlujo;

                HttpContext.Current.Session["DatosExecpPrecios"] = objAprobacion;

            }

            #endregion


            hidCodEstadoSEC.Value = item.ESTAC_CODIGO;
            item.OVENC_CODIGO = strCodOficina;
            item.CANAC_CODIGO = strCodCanal;
            item.ANEXO2 = "";
            item.ANALC_CODIGO = ConfigurationManager.AppSettings["constCodAnalista"].ToString();
            item.TDOCC_CODIGO = strCodTipoDocumento;
            item.CLIEC_NUM_DOC = strNroDocumento;

            string strRazonSocial = Funciones.CheckStr(hidRazonSocial.Value);
            item.CLIEV_RAZ_SOC = ((strRazonSocial.Length > 40) ? strRazonSocial.Substring(0, 40) : strRazonSocial);

            // CLASIFICACION TOP - NO TOP
            item.CLASC_CODIGO = ConfigurationManager.AppSettings["constCodClasificacionEmpresaNoTop"].ToString();
            if (Funciones.CheckStr(hidTop.Value) == "S") //PENDIENTE DESA   
            {
                item.CLASC_CODIGO = ConfigurationManager.AppSettings["constCodClasificacionEmpresaTop"].ToString();
            }
            item.SOLIN_CAR_FIJO_ACTUAL = 0;


            int nroLineasBSCS = objCliente.nroLineasBSCS;

            // CF ACTUAL BSCS
            item.SOLIC_EXI_BSC_FIN = "0";
            if (objCliente.esClienteClaro)
            {
                item.SOLIC_EXI_BSC_FIN = "1";
            }
            item.SOLIN_CAN_LIN_EXCOMP = nroLineasBSCS;

            // LINEAS ACTIVAS BSCS
            item.SOLIN_LINEA_CLIENTE = nroLineasBSCS;

            // LINEAS ACTIVAS BSCS
            int iIdTipoCliente = 1;
            if (objCliente.esClienteClaro)
            {
                iIdTipoCliente = 2;
            }

            item.NRO_LINEAS_MENOR_N_DIAS = objCliente.nroLineaMenor90Dia;
            item.NRO_LINEAS_MAYOR_N_DIAS = objCliente.nroLineaMayor90Dia;
            item.DIAS_LINEAS_RECURRENTE = 0;
            item.NRO_LINEAS_RECURRENTE_ACTUAL = nroLineasBSCS;
            item.SOLIN_SUBSIDIO_TOTAL = 0;
            item.CLIEN_PROM_VEN = 0;
            item.SEGMN_CODIGO = Funciones.CheckInt(ConfigurationManager.AppSettings["constCodSegmentoBUS"].ToString());
            item.TCLIC_CODIGO = ConfigurationManager.AppSettings["constCodTipoClientePRI"].ToString();
            item.TACTC_CODIGO = ConfigurationManager.AppSettings["constCodTipoActivacionINM"].ToString();
            item.RFINC_CODIGO = ConfigurationManager.AppSettings["constCodResultadoFinalAPR"].ToString();
            //item.SOLIC_FLA_TER = "N";
            item.SOLIC_FLA_TER = (item.ESTAC_CODIGO.Equals(ConfigurationManager.AppSettings["constEstadoEnvCreditos"].ToString()) ? "S" : "N"); //PROY-26963-F3  - GPRD
            item.SOLIN_DEUDA_CLIENTE = objClienteDCCorp.deuda_financiera;
            item.SOLIV_DES_OFI_VEN = ((strDesOficina.Length > 20) ? strDesOficina.Substring(0, 20) : strDesOficina);
            item.SOLIV_DES_TIP_ACT = ConfigurationManager.AppSettings["constDesTipoActivacionINM"].ToString();
            item.SOLIC_USU_CRE = usuario;
            item.USUAN_CODIGO = 0;
            item.FLEXN_CODIGO = 0;
            item.SOLIV_NUM_OPE_CON = hidNroOperacionDC.Value;
            item.TRIEC_CODIGO = hidnRiesgoDCValue.Value;

            // CALCULO LINEA DE CREDITO
            int iIdSegmento = Funciones.CheckInt(item.CLASC_CODIGO);
            int iIdRiesgo = Funciones.CheckInt(item.TRIEC_CODIGO);
            double dDeudaFinanciera = objClienteDCCorp.deuda_financiera;
            double dLineaCredito = Funciones.CheckDbl(new BLConsumer().CalcularLineaCreditoDescentralizado(iIdTipoCliente, iIdSegmento, iIdRiesgo, dDeudaFinanciera));

            item.SOLIN_LINEA_CREDITO_CALC = dLineaCredito;
            item.OPERC_CODIGO = "";
            item.CONSULTOR_ID = 0;
            item.SOLIN_ANTIGUEDAD = 0;
            item.SOLIC_FLAG_EMPRESA_TRAFICO = "0";
            item.FLAG_RESPONSABLE_PUNTO_VENTA = "";
            item.SOLIC_FLAG_EMPRESA_TOLERAN = "";

            List<BERepresentanteLegal> arrListaRepresentante = new List<BERepresentanteLegal>();
            string cadenaRepresentanteLegal = hidListaRepresentante.Value;
            if (Funciones.CheckStr(hidListaRepresentante.Value) != "")
            {
                string[] arrRepresentanteLegal = Funciones.CheckStr(hidListaRepresentante.Value).Split('|');
                foreach (string representantes in arrRepresentanteLegal)
                {
                    string[] arregloDatos = representantes.Split(';');
                    BERepresentanteLegal oRepresentanteLegal = new BERepresentanteLegal();
                    oRepresentanteLegal.CLIEC_NUM_DOC = item.CLIEC_NUM_DOC;
                    oRepresentanteLegal.APODC_TIP_DOC_REP = Funciones.Right(("00" + arregloDatos[0]), 2); //ADD PROY-20054-IDEA-23849 - NUEVO REQUERIDO X USUARIO
                    oRepresentanteLegal.APODV_NUM_DOC_REP = arregloDatos[1];
                    oRepresentanteLegal.APODV_NOM_REP_LEG = arregloDatos[2];
                    oRepresentanteLegal.APODV_APA_REP_LEG = arregloDatos[3];
                    oRepresentanteLegal.APODV_AMA_REP_LEG = arregloDatos[4];
                    oRepresentanteLegal.APODV_CAR_REP = arregloDatos[5];
                    oRepresentanteLegal.SRLC_CODNACIONALIDAD = arregloDatos[6]; //PROY-31636
                    oRepresentanteLegal.SRLV_DESCNACIONALIDAD = arregloDatos[7]; //PROY-31636
                    arrListaRepresentante.Add(oRepresentanteLegal);
                }
            }

            item.REPRESENTANTE_LEGAL = arrListaRepresentante;
            item.SOLIN_CODIGO_PADRE = Funciones.CheckInt64(hidNroSEC.Value);
            item.SOLIC_FLAG_REINGRESO = "";
            item.EMAIL_AUTORIZADO = "";
            item.DPCHN_CODIGO = Funciones.CheckInt(ConfigurationManager.AppSettings["ConstCodTipoDespaDescentra"].ToString());
            item.TOPEN_CODIGO = Funciones.CheckInt(ConfigurationManager.AppSettings["ConstTipoOperacionAlta"].ToString());
            item.TOPEN_CODIGO = Funciones.CheckInt(hidTipoOperacion.Value);
            item.TPROC_CODIGO = strCodOferta;
            item.TVENC_CODIGO = ConfigurationManager.AppSettings["strTVPostpago"].ToString();
            item.FPAGC_CODIGO = ConfigurationManager.AppSettings["SISACT_FormaPago_Efectivo"].ToString();
            item.SOLIN_USU_VEN = usuario;
            item.TEVAC_CODIGO = ConfigurationManager.AppSettings["constCodEvaluadorPDV"].ToString();
            // item.SOLIN_LIM_CRE_FIN = CheckDbl(CheckDbl(hidCFTotal.Value)) * CheckDbl(hidFactorLC.Value)
            // item.SOLIN_SUM_CAR_CON = CheckDbl(hidCFTotal.Value)
            // item.SOLIN_SUM_CAR_FIN = CheckDbl(hidCFTotal.Value)

            if (!string.IsNullOrEmpty(hidPoderes.Value))
            {
                item.RGLPC_PODERES = hidPoderes.Value;
            }




            item.TCESC_CODIGO = hidCasoEspecial.Value;
            if (blnPortabilidad)
            {
                item.FLAG_PORTABILIDAD = ConfigurationManager.AppSettings["FlagPortabilidad"].ToString();
                item.PORT_OPER_CED = Funciones.CheckInt(hidOperadorCedente.Value);
                item.TLINC_CODIGO_CEDENTE = hidModalidad.Value;
                item.PORT_SOLIN_NRO_FORMATO = hidNumeroFolio.Value;
                item.PORT_CARGO_FIJO_OPE_CED = "0";
                item.PORT_TELEF_CONT = hidNumeroContacto.Value;
                //26963 f1 GPRD INI
                //INICIO PROY-140335.INC000003628687 JCC
                var LineasRepositorio = (List<BEPorttSolicitud>)(HttpContext.Current.Session["DetalleCPRepositorio"]); //PROY-140335 RF1

                string LineasSinCP = string.Empty;
                string LineasConCP = string.Empty;

                if (LineasRepositorio != null)
                {
                    if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Count() > 0)
                    {
                        LineasSinCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                    }

                }
                //CAMBIADO POR EL PROY-140335 RF1

                //if (Comun.AppSettings.consFlagConsultaPreviaChip == "1" && &
                //(hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"]) || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                //&& (hidNTienePortabilidadValues.Value).Equals("S") && (AppSettings.consCPModdalidadVenta.IndexOf(hidModalidadVenta.Value) > -1) && (AppSettings.consCPCanalVenta.IndexOf(hidnCanalValue.Value) > -1)
                //&& (AppSettings.consCPPuntoVenta.IndexOf(hidOficinaUsuario.Value) == -1) && (blnAutonomia))

                if ((hidNTienePortabilidadValues.Value).Equals("S") &&
                    (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"]) || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                   && (blnAutonomia) && (LineasSinCP != string.Empty))
                {
                    item.PORT_ESTADO = ConfigurationManager.AppSettings["constcodEstadoPendEvalMP"].ToString();
                }
                else
                {
                    item.PORT_ESTADO = ConfigurationManager.AppSettings["constcodEstadoEMITIDOPort"].ToString();
                }
                //26963 f1 GPRD FIN
                //FIN PROY-140335.INC000003628687 JCC
                //Inicio IDEA-30067
                item.CAMPN_CODIGO = constFlagPortabilidadCP;
            }
            else
            {
                item.CAMPN_CODIGO = constFlagConvergente;
            }
            //Fin IDEA-30067

            //INICIO: PROY-20054-IDEA-23849
            item.BURO_CODIGO = objClienteDCCorp.buro_consultado;
            //FIN

            // Mejoras Fase 1
            //item.BURO_CODIGO = Funciones.CheckInt(ConfigurationManager.AppSettings["constCodBuroDataCreditoRUC"].ToString()); //PROY-20054 - ELIMINAR O COMENTAR (ES PARTE DEL PASE)
            item.CLIEV_CALIFICACION_PAGO = objCliente.comportamientoPago.ToString();
            item.CLIEN_MONTO_VENCIDO = Funciones.CheckDbl(objCliente.deudaTotal);

            // BRMS
            item.CLIEV_RIESGO_CLARO = hidnRiesgoClaroValue.Value;
            item.CLIEV_COMPORTA_PAGO = hidnComportamiento.Value;
            item.CLIEC_FLAG_EXONERAR_RA = hidnExoneracionRAValues.Value;

            return item;
        }

        private void GrabarComentario(Int64 nroSEC, string strComentario)
        {
            BEComentario item = new BEComentario();
            item.COMEC_ESTADO = "1";
            item.COMEC_FLA_COM = "00";
            item.COMEC_USU_REG = hidUsuarioRed.Value;
            item.SOLIN_CODIGO = nroSEC;
            item.COMEV_COMENTARIO = strComentario.ToUpper();
            new BLSolicitud().GrabarComentario(item);
        }

        //private void GrabarArchivoIrCreditos(Int64 nroSEC)
        //{
        //    string rutaDestino = ConfigurationManager.AppSettings["constRutaUploadFileConsumer"].ToString();
        //    string listaArchivo = hidArchivosEnvioCreditos.Value;

        //    if (!string.IsNullOrEmpty(listaArchivo))
        //    {
        //        string[] objArchivo = listaArchivo.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
        //        foreach (string item in objArchivo)
        //        {
        //            string nombreArchivo = item.Split(';')[1];
        //            string rutaCompletaArchivo = item.Split(';')[2];
        //            (new BLSolicitud()).GrabarArchivo(nroSEC, nombreArchivo, rutaCompletaArchivo, hidUsuarioRed.Value);
        //        }
        //    }
        //}

        private void GrabarArchivoIrCreditos(Int64 nroSEC)
        {
            string listaArchivo = hidArchivosEnvioCreditos.Value;

            if (!string.IsNullOrEmpty(listaArchivo))
            {
                string[] objArchivo = listaArchivo.Split(new string[] { "<@ARCHIVO@>" }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string item in objArchivo)
                {
                    string nombreArchivo = item.Split('|')[1];
                    string rutaCompletaArchivo = item.Split('|')[0];
                    (new BLSolicitud()).GrabarArchivo(nroSEC, nombreArchivo, rutaCompletaArchivo, hidUsuarioRed.Value);
                }
            }
        }

        //PROY-24740
        private Int64 GrabarPersona(BESolicitudPersona objPersona, Vista_SolicitudDC_Reporte oReporteDC)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][GrabarPersona]", null, null);

            objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarPersona] objPersona", Funciones.CheckStr(new JavaScriptSerializer().Serialize(objPersona))), null);

            Int64 nroSEC;
            string nroDocumento = hidNroDocumento.Value;
            string strCodEstado = hidCodEstadoSEC.Value;
            bool flgPortabilidad = (hidNTienePortabilidadValues.Value == "S");
            BLSolicitud objSolicitud = new BLSolicitud();
            List<BENumeroPortabilidad> lstNumeroPortabilidad = new List<BENumeroPortabilidad>();//PROY-140223 IDEA-140462 
            string strCodTipoProd = objPersona.PRDC_CODIGO;
            Int64 nroSECPadre = objPersona.SOLIN_GRUPO_SEC;
            ArrayList listaPlanDetalle = objPersona.oPlanDetalle;

            // GRABAR SEC
            if (flgPortabilidad)
            {
                objLog.CrearArchivolog("[N° Documento Porta]", null, null);
                nroSEC = new BLPortabilidad().GrabarEvaluacionPersona(objPersona);
                objLog.CrearArchivolog("[SEC Porta]", nroSEC.ToString(), null);
            }
            else if ((strCodTipoProd == constTipoProductoDTH) || (strCodTipoProd == constTipoProductoHFC) || (strCodTipoProd == constTipoProducto3PlayInalam) || (strCodTipoProd == constTipoProductoFTTH)) //FTTH
            {
                objLog.CrearArchivolog("[N° Documento]", objPersona.CLIEC_NUM_DOC.ToString(), null);

                nroSEC = objSolicitud.RegistrarEvaluacionDTH_HFC(objPersona);

                objLog.CrearArchivolog("[SEC]", nroSEC.ToString(), null);
            }
            else
            {
                objLog.CrearArchivolog("[N° Documento]", objPersona.CLIEC_NUM_DOC.ToString(), null);
                nroSEC = objSolicitud.RegistrarEvaluacion(objPersona);
                objLog.CrearArchivolog("[SEC]", nroSEC.ToString(), null);
            }

            //PROY-140579 METODO ACTUALIZAR SEC HISTORIAL GENERADOS INICIO
            objLog.CrearArchivolog("[ -- INICIO METODO  ActualizarSecHistorialBRMS - GrabarPersona -- ] - Nro Sec: ", nroSEC.ToString(), null);
            BWHistorialBrms objHistorialBrms = new BWHistorialBrms();
            bool rtpaActualizarBrms = objHistorialBrms.ActualizarSecHistorialBRMS(nroSEC.ToString(), Funciones.CheckStr(hidProdCuentaFact.Value));//PROY-140743
            objLog.CrearArchivolog("[ -- FIN METODO  ActualizarSecHistorialBRMS - GrabarPersona -- ] - Nro Sec: ", nroSEC.ToString(), null);
            //PROY-140579 METODO ACTUALIZAR SEC HISTORIAL GENERADOS FIN

            //PROY-140579 FASE 2 - ACTUALIZAR HISTORIAL PROACTIVA INICIO
            objLog.CrearArchivolog("[PROY-140579][INICIO - ACTUALIZAR IDS PROACTIVA SEC  GrabarPersona] -> Nro Sec: ", nroSEC.ToString(), null);
            BWActualizarHistoricoProactiva ObjActualizarHistProa = new BWActualizarHistoricoProactiva();
            rtpaActualizarBrms = ObjActualizarHistProa.ActualizarHistoricoProactivaNegocios(nroSEC.ToString());
            objLog.CrearArchivolog("[PROY-140579][FIN - ACTUALIZAR IDS PROACTIVA SEC GrabarPersona] -> Nro Sec: ", nroSEC.ToString(), null);
            //PROY-140579 FASE 2 - ACTUALIZAR HISTORIAL PROACTIVA SEC FIN
            // GRABAR SOT MIGRACION HFC
            bool blnProductoHFC = false;
            //string blnProductoHFC2;
            if (strCodTipoProd == constTipoProductoHFC) { blnProductoHFC = TieneProducto(constTipoProductoHFC); }
            if (strCodTipoProd == constTipoProducto3PlayInalam) { blnProductoHFC = TieneProducto(constTipoProducto3PlayInalam); }

            if (hidTipoOperacion.Value == ConfigurationManager.AppSettings["constTipoOperacionMIG"].ToString() && blnProductoHFC)
            {
                string nroSOT = Funciones.CheckStr(hidNroSOTMigracion.Value);
                objLog.CrearArchivolog("    GrabarPersona/GrabarSOTMigracionHFC/nroSEC    ", nroSEC.ToString(), null);
                objLog.CrearArchivolog("    GrabarPersona/GrabarSOTMigracionHFC/nroSOT    ", nroSOT.ToString(), null);
                new BLSolicitud().GrabarSOTMigracionHFC(nroSEC, nroSOT);
            }

            //INICIO PROY-140546
            RegistroPARequest oRequest = null;
            if (strCodTipoProd == constTipoProductoHFC || strCodTipoProd == constTipoProductoFTTH || strCodTipoProd == constTipoProducto3PlayInalam)
            {
                oRequest = new RegistroPARequest();
                oRequest.numeroSolicitud = nroSEC;
                oRequest.tipoProducto = strCodTipoProd;
                oRequest.montoInicialInstalacion = Funciones.CheckDbl(hidMAI.Value);
                oRequest.tipoOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[2];
                oRequest.ovencCodigo = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];

                objLog.CrearArchivolog("[PROY-140546][numeroSolicitud]", Funciones.CheckStr(oRequest.numeroSolicitud), null);
                objLog.CrearArchivolog("[PROY-140546][tipoProducto]", oRequest.tipoProducto, null);
                objLog.CrearArchivolog("[PROY-140546][montoInicialInstalacion]", Funciones.CheckStr(oRequest.montoInicialInstalacion), null);
                objLog.CrearArchivolog("[PROY-140546][tipoOficina]", oRequest.tipoOficina, null);
                objLog.CrearArchivolog("[PROY-140546][ovencCodigo]", oRequest.ovencCodigo, null);
            }
            //FIN PROY-140546

            // GRABAR DETALLE SEC
            objLog.CrearArchivolog("[GRABAR DETALLE][hdbuyback.Value]", hdbuyback.Value, null);//PROY-140736 fin
            new BLConsumer().GrabarPlanDetalle(listaPlanDetalle, nroSEC, objCliente.oVistaEvaluacion, "", hdbuyback.Value, oRequest); //PROY-140736 fin //PROY-140546
            objLog.CrearArchivolog("[GRABAR DETALLE][Campaña]", objCliente.oVistaEvaluacion.oOfrecimiento[0].In_campana.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DETALLE][Plan]", objCliente.oVistaEvaluacion.oOfrecimiento[0].In_plan_solicitado.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DETALLE][Servicio]", objCliente.oVistaEvaluacion.oOfrecimiento[0].In_servicio.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DETALLE][EQUIPO]", objCliente.oVistaEvaluacion.oOfrecimiento[0].In_equipo.ToString(), null);//PROY-140579 IN_EQUIPO

            // GRABAR DIRECCION
            if ((strCodTipoProd == constTipoProductoDTH) || (strCodTipoProd == constTipoProductoHFC) || (strCodTipoProd == constTipoProducto3PlayInalam) || (strCodTipoProd == constTipoProductoFTTH) || (strCodTipoProd == constTipoProductoInterInalam)) //FTTH PROY-140690 IFI
            {
                BEDireccionCliente oDireccion = DatosDireccion(strCodTipoProd, objPersona.idFila);

                if (strCodTipoProd == constTipoProducto3PlayInalam)
                {
                    new BLSolicitud().InsertarSolDireccion_LTE(oDireccion, nroSEC);
                    objLog.CrearArchivolog("[GRABAR DIRECCION3PI]", oDireccion.Direccion.ToString(), null);
                }
                else
                {
                    new BLSolicitud().InsertarSolDireccion(oDireccion, nroSEC);
                    objLog.CrearArchivolog("[GRABAR DIRECCION]", oDireccion.ToString(), null);
                }
            }

            //PROY-FULLCLARO.V2 ::INICIO
            //GRABAR BENEFICIO FULLCLARO
            string tipoBenefElegidoFC = (string)HttpContext.Current.Session["TipoBenefElegidoFC"];

            if (!string.IsNullOrEmpty(tipoBenefElegidoFC))
                GrabarBono_FullClaro(nroSEC, flgPortabilidad, tipoBenefElegidoFC, CurrentUser, Funciones.CheckStr(objPersona.CLIEC_NUM_DOC), objPersona, null, listaPlanDetalle);
            //PROY-FULLCLARO.V2 ::FIN

            //PROY-140457-DEBITO AUTOMATICO-INI
            HttpContext.Current.Session["ListaSoplnCodigo"] = listaPlanDetalle;
            //PROY-140457-DEBITO AUTOMATICO-FIN

            // GRABAR DATOS PORTABILIDAD
            if (flgPortabilidad)
            {
                //INI: PROY-140335 RF1
                var LineasRepositorio = (List<BEPorttSolicitud>)(HttpContext.Current.Session["DetalleCPRepositorio"]);

                string LineasSinCP = string.Empty;
                string LineasConCP = string.Empty;
                List<string> lstLineasSinCP;
                if (LineasRepositorio != null)
                {
                    if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Count() > 0)
                    {
                        LineasSinCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                    }
                    if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Count() > 0)
                    {
                        LineasConCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                    }

                }

                //FIN: PROY-140335 RF1

                BLPortabilidad objPortabilidad = new BLPortabilidad();

                // GRABAR TELEFONOS PORTABILIDAD
                objLog.CrearArchivolog("[GRABAR DATOS PORTA]", null, null);
                foreach (BEPlanDetalleVenta objPlanDetalle in listaPlanDetalle)
                {
                    BENumeroPortabilidad objNroPortabilidad = new BENumeroPortabilidad();
                    objNroPortabilidad.SOLIN_CODIGO = objPlanDetalle.SOLIN_CODIGO;
                    objNroPortabilidad.SOLIN_GRUPO_SEC = ((nroSECPadre > 0) ? nroSECPadre : objPlanDetalle.SOLIN_CODIGO);
                    objNroPortabilidad.SOPLN_CODIGO = objPlanDetalle.SOPLN_CODIGO;
                    objNroPortabilidad.PORT_NUM_DOC = Funciones.CheckStr(hidNroDocumento.Value);
                    objNroPortabilidad.PLANC_CODIGO = objPlanDetalle.PLANC_CODIGO;
                    objNroPortabilidad.PORT_NUMERO = objPlanDetalle.TELEFONO;
                    objNroPortabilidad.FLAG_ESTADO = ConfigurationManager.AppSettings["FlagPortaNumeroNuevo"].ToString();
                    //gaa20151209
                    //objNroPortabilidad.TPROC_CODIGO = ddlOferta.SelectedValue;
                    objNroPortabilidad.TPROC_CODIGO = hidnTipoOfertaValue.Value;
                    //fin gaa20151209
                    if (hidTipoDocumento.Value == ConfigurationManager.AppSettings["TipoDocumentoRUC"].ToString())
                    {
                        objNroPortabilidad.TPROC_CODIGO = ConfigurationManager.AppSettings["constCodEvaluacionEmpresarial"].ToString();
                    }

                    objNroPortabilidad.PORT_USU_CREA = hidUsuarioRed.Value;
                    objNroPortabilidad.PORT_MODALIDAD = hidModalidad.Value;

                    objNroPortabilidad.PORT_TIPO_SERVICIO = ((int)BENumeroPortabilidad.TIPO_SERVICIO.MOVIL).ToString();
                    if (strCodTipoProd == constTipoProductoFijo)
                    {
                        objNroPortabilidad.PORT_TIPO_PLAN = ((int)BENumeroPortabilidad.TIPO_PLAN_HFC.TFI).ToString();
                        objNroPortabilidad.PORT_TIPO_SERVICIO = ((int)BENumeroPortabilidad.TIPO_SERVICIO.FIJO).ToString();
                    }
                    if (strCodTipoProd == constTipoProductoHFC || strCodTipoProd == constTipoProducto3PlayInalam || strCodTipoProd == constTipoProductoFTTH) //FTTH
                    {
                        if (strCodTipoProd == constTipoProducto3PlayInalam)
                        {
                            objNroPortabilidad.PORT_TIPO_PLAN = ((int)BENumeroPortabilidad.TIPO_PLAN_HFC.LTE).ToString();
                        }
                        else
                        {
                            objNroPortabilidad.PORT_TIPO_PLAN = ((int)BENumeroPortabilidad.TIPO_PLAN_HFC.HFC).ToString();
                        }
                        objNroPortabilidad.PORT_TIPO_SERVICIO = ((int)BENumeroPortabilidad.TIPO_SERVICIO.FIJO).ToString();
                    }
                    // PROY-140262
                    string strTipoDocumentoABCDP = Comun.WebComunes.ListaTipoDocumento().Where(w => w.Codigo == Funciones.CheckStr(hidTipoDocumento.Value)).FirstOrDefault().Codigo5; //PROY-140262

                    objNroPortabilidad.PORT_OPERADORCEDENTE = hidOperadorCedente.Value;
                    objNroPortabilidad.PORT_TIPO_DOCUMENTO = strTipoDocumentoABCDP; //PROY-140262
                    objNroPortabilidad.INICIO_RANGO = objPlanDetalle.TELEFONO;
                    objNroPortabilidad.FINAL_RANGO = objPlanDetalle.TELEFONO;
                    objNroPortabilidad.PORT_CANTIDAD_NUM = listaPlanDetalle.Count;
                    objNroPortabilidad.NOM_RASO_ABONAD = objCliente.nombres + " " + objCliente.apellidoPaterno + " " + objCliente.apellidoMaterno;
                    objNroPortabilidad.USUARIO_CREA = CurrentUser;
                    objNroPortabilidad.USUARIO_MODIF = CurrentUser;
                    //FIN: PROY-140223 IDEA-140462
                    objPortabilidad.GrabarNumeroPortabilidad(objNroPortabilidad);
                    //INI: PROY-140223 IDEA-140462
                    lstNumeroPortabilidad.Add(objNroPortabilidad);
                    //FIN: PROY-140223 IDEA-140462
                }

                //CAMBIADO POR EL PROY-140335 RF1 INI
                //INI: PROY-140223 IDEA-140462
                //objLog.CrearArchivolog("[VALIDACION DE  NO CONSULTA PREVIA][consFlagConsultaPreviaChip]->", Funciones.CheckStr(Comun.AppSettings.consFlagConsultaPreviaChip), null);
                //if (Comun.AppSettings.consFlagConsultaPreviaChip == "1" &&
                //    (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"]) || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                //    && (hidNTienePortabilidadValues.Value).Equals("S")
                //    && (AppSettings.consCPModdalidadVenta.IndexOf(hidModalidadVenta.Value) > -1) && (AppSettings.consCPCanalVenta.IndexOf(hidnCanalValue.Value) > -1)
                //    && (AppSettings.consCPPuntoVenta.IndexOf(hidOficinaUsuario.Value) == -1))
                //   // && Funciones.CheckStr(ConfigurationManager.AppSettings["constCodModalidadChipSuelto"].ToString()).Contains(hidModalidadVenta.Value.ToString()))
                //{
                //    objLog.CrearArchivolog("[VALIDACION DE  NO CONSULTA PREVIA][CUMPLIO CONDICION CONFIGURADA]->", "[SI]", null);
                //    GrabarEnvioMesaPortabilidadSinCP(lstNumeroPortabilidad, objLog);
                //}
                //FIN: PROY-140223 IDEA-140462
                if ((hidNTienePortabilidadValues.Value).Equals("S") && (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"])
                    || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"])) && (LineasSinCP != string.Empty)) //&& strCodEstado == constEstadoENVPOOLEMIT))
                {
                    lstLineasSinCP = LineasSinCP.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();
                    foreach (var item in lstLineasSinCP)
                    {
                        Funciones.CheckStr(lstNumeroPortabilidad.RemoveAll(x => !LineasSinCP.Contains(x.INICIO_RANGO)));
                    }
                    objLog.CrearArchivolog(String.Format("{0} : {1}", "[PROY-140335][GrabarPersona] - [VALIDACION DE  NO CONSULTA PREVIA][CUMPLIO CONDICION CONFIGURADA]-> ", "[SI]"), null, null);
                    objLog.CrearArchivolog(String.Format("{0} : {1}", "[PROY-140335][GrabarPersona] - [Lineas que no realizaron CP]-> ", LineasSinCP), null, null);
                    GrabarEnvioMesaPortabilidadSinCP(lstNumeroPortabilidad, objLog);
                }

                //CAMBIADO POR EL PROY-140335 RF1 INI
                // GRABAR ARCHIVOS PORTABILIDAD
                string[] arrArchivo = hidArchivos.Value.Split('|');
                foreach (string archivo in arrArchivo)
                {
                    if (!string.IsNullOrEmpty(archivo))
                    {
                        BEArchivo objArchivo = new BEArchivo();

                        string[] arrArchivoPortabilidad = archivo.Split(';');
                        string strNombreArchivo = string.Format("{0}_{1}", Funciones.CheckStr(nroSEC), arrArchivoPortabilidad[1]);
                        string strRutaArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["constLeerFileServerSPPortINTemp"].ToString(), strNombreArchivo);
                        string strNombreTemporalArchivo = arrArchivoPortabilidad[0];
                        string strRutaTemporalArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["constLeerFileServerSPPortINTemp"].ToString(), arrArchivoPortabilidad[0]);
                        string strTipoArchivo = arrArchivoPortabilidad[2];

                        MoverArchivo(strRutaTemporalArchivo, strRutaArchivo);

                        objArchivo.SOLIN_CODIGO = nroSEC;
                        objArchivo.ARCH_NOMBRE = strNombreArchivo;
                        objArchivo.ARCH_RUTA = strRutaArchivo;
                        objArchivo.FLAG_ESTADO = "1";
                        objArchivo.ARCH_TIPO = strTipoArchivo;

                        objPortabilidad.GrabarArchivoPortabilidad(objArchivo);
                    }
                }

                // ENVIO DIRECTO A MP
                if (strCodEstado == constEstadoENVPOOLEMIT)
                {
                    objLog.CrearArchivolog("[ENVIAR A MESA DE PORTABILDIAD]", Comun.AppSettings.consProductosConsultaCP, null);
                    if (!Funciones.CheckStr(Comun.AppSettings.consProductosConsultaCP).Contains(strCodTipoProd))
                    {
                        objLog.CrearArchivolog("[ENVIAR A MESA DE PORTABILDIAD]->", "TRUE", null);
                        objPortabilidad.EnviarMesaPortabilidad(nroSEC, hidUsuarioRed.Value);
                    }
                    else
                    {
                        objLog.CrearArchivolog("[ENVIAR A MESA DE PORTABILDIAD]->", "FALSE", null);
                    }
                }
            }

            // GRABAR DATOS ADICIONAL DE CREDITOS
            BEDatosCreditos itemCreditos = new BEDatosCreditos();
            itemCreditos.nroLineas = objCliente.nroLineasBSCS;
            itemCreditos.nroLineaMenor7Dia = objCliente.nroLineaMenor7Dia;
            itemCreditos.nroLineaMenor30Dia = objCliente.nroLineaMenor30Dia;
            itemCreditos.nroLineaMenor90Dia = objCliente.nroLineaMenor90Dia;
            itemCreditos.nroLineaMenor180Dia = objCliente.nroLineaMenor180Dia;
            itemCreditos.nroLineaMayor180Dia = objCliente.nroLineaMayor180Dia;

            StringBuilder strMontosxBilletera = new StringBuilder();
            double dblMontoFacturado = 0.0;
            double dblMontoNoFacturado = 0.0;

            foreach (BEBilletera item in objCliente.oLCDisponiblexBilletera)
            {
                if (objCliente.oMontoFacturadoxBilletera != null)
                {
                    var lisMontos = objCliente.oMontoFacturadoxBilletera.Where(w => w.idBilletera == item.idBilletera).ToList();//PROY-26963
                    if (lisMontos != null && lisMontos.Count > 0)
                    {
                        dblMontoFacturado = lisMontos[lisMontos.Count - 1].monto;
                    }
                }
                if (objCliente.oMontoNoFacturadoxBilletera != null)
                {
                    var lisNoMontos = objCliente.oMontoNoFacturadoxBilletera.Where(w => w.idBilletera == item.idBilletera).ToList();//PROY-26963
                    if (lisNoMontos != null && lisNoMontos.Count() > 0)
                    {
                        dblMontoNoFacturado = lisNoMontos[lisNoMontos.Count - 1].monto;
                    }
                }

                strMontosxBilletera.Append('|');
                strMontosxBilletera.Append(item.idBilletera);
                strMontosxBilletera.Append(';');
                strMontosxBilletera.Append(item.monto);
                strMontosxBilletera.Append(';');
                strMontosxBilletera.Append(dblMontoFacturado);
                strMontosxBilletera.Append(';');
                strMontosxBilletera.Append(dblMontoNoFacturado);
            }

            itemCreditos.SOLIN_CODIGO = nroSEC;
            itemCreditos.LC_DISPONIBLE = Funciones.CheckDbl(hidnLCDisponibleValue.Value);
            itemCreditos.PRODUCTO_MONTO = strMontosxBilletera.ToString();
            itemCreditos.MSJ_AUTONOMIA = Funciones.CheckStr(hidnMensajeAutonomiaValue.Value);
            itemCreditos.USUARIO_CREA = hidUsuarioRed.Value;
            itemCreditos.MOTIVO = DatosMotivo(strCodEstado);
            itemCreditos.RANGO_LC_DISPONIBLE = txtRangoLC.Value;

            objSolicitud.GrabarEvaluacionDatosCreditos(itemCreditos);

            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][SEC]", itemCreditos.SOLIN_CODIGO.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][LC_DISPONIBLE]", itemCreditos.LC_DISPONIBLE.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][PRODUCTO_MONTO]", itemCreditos.PRODUCTO_MONTO.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][MSJ_AUTONOMIA]", itemCreditos.MSJ_AUTONOMIA.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][USUARIO_CREA]", itemCreditos.USUARIO_CREA.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][MOTIVO]", itemCreditos.MOTIVO.ToString(), null);
            objLog.CrearArchivolog("[GRABAR DATOS CREDITOS][RANGO_LC_DISPONIBLE]", itemCreditos.RANGO_LC_DISPONIBLE.ToString(), null);

            // GRABAR SUSTENTO A PEDIDO DEL PDV
            if (hidCreditosxAsesor.Value == "S")
            {
                GrabarArchivoIrCreditos(nroSEC);
            }

            // DC RAZONES
            string nodos;
            string strRazonesDC = Funciones.CheckStr(objClienteDC.RAZONES);
            string[] arrRazonesDC = strRazonesDC.Split('|');
            BLDataCredito objDataCredito = new BLDataCredito();

            foreach (string item in arrRazonesDC)
            {
                nodos = Funciones.CheckStr(item).Split('|')[0];
                if (!string.IsNullOrEmpty(nodos))
                {
                    objDataCredito.GrabarRazonesEvaluacion(nroSEC, nodos);
                }
            }

            // GUARDAR REPORTE DC
            oReporteDC.DCREN_SOLIN_CODIGO = nroSEC;
            //if (oReporteDC.FUENTECONSULTA == BEDataCreditoOUT.FUENTE_CONSULTA.BURO.ToString())
            //{
            //    objDataCredito.GrabarDCReporte(oReporteDC);
            //}
            (new BLDataCredito()).ActualizarDCHistorico(oReporteDC.DCREV_NUM_OPERACION, oReporteDC.DCREC_VALIDAR_CLIENTE);
            objLog.CrearArchivolog("[ACTUALIZA DC HIST.][DCREV_NUM_OPERACION]", oReporteDC.DCREV_NUM_OPERACION.ToString(), null);

            // GRABAR HISTORICO
            if (strCodEstado == constEstadoAPR)
            {
                objSolicitud.GrabarLogHistorico(nroSEC, constEstadoAPRENVACT, hidUsuarioRed.Value);
                objLog.CrearArchivolog("[GRABAR HIST1.][constEstadoAPRENVACT]", constEstadoAPRENVACT.ToString(), null);
            }

            objSolicitud.GrabarLogHistorico(nroSEC, strCodEstado, hidUsuarioRed.Value);
            objLog.CrearArchivolog("[GRABAR HIST2.][strCodEstado]", strCodEstado.ToString(), null);

            objLog.CrearArchivolog("[Fin][GrabarPersona]", null, null);
            return nroSEC;

        }

        //PROY-24740
        private Int64 GrabarEmpresa(ArrayList listaPlanDetalle, string strCodTipoProd, BESolicitudEmpresa oEmpresa, int idxOrden, Int64 nroSECPadre)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][GrabarEmpresa]", null, null);

            objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEmpresa] param in oEmpresa", Funciones.CheckStr(new JavaScriptSerializer().Serialize(oEmpresa))), null);
            objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEmpresa] param in strCodTipoProd", Funciones.CheckStr(strCodTipoProd)), null);
            objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEmpresa] param in idxOrden", Funciones.CheckStr(idxOrden)), null);
            objLog.CrearArchivolog("[INC000004091065][INC000003467242]", string.Format("{0}:{1}", "[sisact_evaluacion_unificada.aspx.cs][GrabarEmpresa] param in nroSECPadre", Funciones.CheckStr(nroSECPadre)), null);

            Int64 nroSEC;
            string nroDocumento = hidNroDocumento.Value;
            bool flgPortabilidad = (hidNTienePortabilidadValues.Value == "S");
            string strCodEstado = hidCodEstadoSEC.Value;
            BLSolicitud objSolicitud = new BLSolicitud();

            //    // GRABAR SEC
            objLog.CrearArchivolog("    GrabarEmpresa/GRABAR SEC  ", null, null);

            if (flgPortabilidad)
                nroSEC = new BLPortabilidad().GrabarEvaluacionEmpresa(oEmpresa);
            else
                nroSEC = objSolicitud.GrabarEvaluacionEmpresa(oEmpresa);

            // GRABAR COMENTARIOS PDV
            objLog.CrearArchivolog("    GrabarEmpresa/GRABAR COMENTARIOS PDV  ", null, null);
            string strComentario = Funciones.CheckStr(hidComentarioPDV.Value);
            if (!string.IsNullOrEmpty(strComentario))
            {
                GrabarComentario(nroSEC, strComentario);
            }

            // GRABAR SOT MIGRACION HFC
            objLog.CrearArchivolog("    GrabarEmpresa/GRABAR SOT   ", null, null);
            var valor = "";
            if (strCodTipoProd == constTipoProducto3PlayInalam)
            {
                valor = constTipoProducto3PlayInalam;
            }
            else
            {
                valor = constTipoProductoHFC;
            }
            bool blnProductoHFC = TieneProducto(valor);
            if (hidTipoOperacion.Value == ConfigurationManager.AppSettings["constTipoOperacionMIG"].ToString() && blnProductoHFC)
            {
                string nroSOT = Funciones.CheckStr(hidNroSOTMigracion.Value);
                new BLSolicitud().GrabarSOTMigracionHFC(nroSEC, nroSOT);
            }

            //INICIO PROY-140546
            RegistroPARequest oRequest = null;
            if (strCodTipoProd == constTipoProductoHFC || strCodTipoProd == constTipoProductoFTTH || strCodTipoProd == constTipoProducto3PlayInalam)
            {
                oRequest = new RegistroPARequest();
                oRequest.numeroSolicitud = nroSEC;
                oRequest.tipoProducto = strCodTipoProd;
                oRequest.montoInicialInstalacion = Funciones.CheckDbl(hidMAI.Value);
                oRequest.tipoOficina = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[2];
                oRequest.ovencCodigo = Funciones.CheckStr(hidnOficinaActual.Value).Split(',')[0];

                objLog.CrearArchivolog("[PROY-140546][numeroSolicitud]", oRequest.numeroSolicitud, null);
                objLog.CrearArchivolog("[PROY-140546][tipoProducto]", oRequest.tipoProducto, null);
                objLog.CrearArchivolog("[PROY-140546][montoInicialInstalacion]", oRequest.montoInicialInstalacion, null);
                objLog.CrearArchivolog("[PROY-140546][tipoOficina]", oRequest.tipoOficina, null);
                objLog.CrearArchivolog("[PROY-140546][ovencCodigo]", oRequest.ovencCodigo, null);
            }
            //FIN PROY-140546

            // GRABAR DETALLE SEC
            objLog.CrearArchivolog("    GrabarEmpresa/GrabarPlanDetalle   ", nroSEC.ToString(), null);
            objLog.CrearArchivolog("    GrabarEmpresa/GrabarPlanDetalle   [EQUIPO]: ", Funciones.CheckStr(objCliente.oVistaEvaluacion.oOfrecimiento[0].In_equipo), null);//PROY-140579 IN_EQUIPO
            objLog.CrearArchivolog("[GRABAR DETALLE][hdbuyback.Value]", hdbuyback.Value, null);//PROY-140736 fin    
            new BLConsumer().GrabarPlanDetalle(listaPlanDetalle, nroSEC, objCliente.oVistaEvaluacion, "", hdbuyback.Value, oRequest); //PROY-140736 //PROY-140546

            // GRABAR DIRECCION
            objLog.CrearArchivolog("    GrabarEmpresa/GRABAR DIRECCION   ", null, null);
            // EMERGENCIA-29215-INICIO
            if ((strCodTipoProd == constTipoProductoDTH) || (strCodTipoProd == constTipoProductoHFC) || (strCodTipoProd == constTipoProducto3PlayInalam) || (strCodTipoProd == constTipoProductoFTTH) || (strCodTipoProd == constTipoProductoInterInalam)) //PROY-140690 IFI
            // EMERGENCIA-29215-FIN
            {
                string objDireccionIdFilaIFI = Funciones.CheckStr(HttpContext.Current.Session["objDireccionIdFilaIFI"]);
                objLog.CrearArchivolog("[EMPRESA]    PROY-140690 [objDireccionIdFilaIFI] =>", objDireccionIdFilaIFI, null);
                if (strCodTipoProd == constTipoProductoInterInalam)
                {
                    idxOrden = Funciones.CheckInt(objDireccionIdFilaIFI);
                    objLog.CrearArchivolog("[EMPRESA SI]    PROY-140690 [idxOrden] =>", idxOrden, null);
                }

                objLog.CrearArchivolog("[EMPRESA]    PROY-140690 [idxOrden] =>", idxOrden, null);
                BEDireccionCliente oDireccion = DatosDireccion(strCodTipoProd, idxOrden);
                new BLSolicitud().InsertarSolDireccion(oDireccion, nroSEC);
            }

            //PROY-140579 METODO ACTUALIZAR SEC HISTORIAL GENERADOS INICIO
            objLog.CrearArchivolog("[ -- INICIO METODO  ActualizarSecHistorialBRMS - GrabarEmpresa -- ] - Nro Sec: ", nroSEC.ToString(), null);
            BWHistorialBrms objHistorialBrms = new BWHistorialBrms();
            bool rtpaActualizarBrms = objHistorialBrms.ActualizarSecHistorialBRMS(nroSEC.ToString(), Funciones.CheckStr(hidProdCuentaFact.Value));//PROY-140743
            objLog.CrearArchivolog("[ -- FIN METODO  ActualizarSecHistorialBRMS - GrabarEmpresa -- ] - Nro Sec: ", nroSEC.ToString(), null);
            //PROY-140579 METODO ACTUALIZAR SEC HISTORIAL GENERADOS FIN

            //PROY-140579 FASE 2 - ACTUALIZAR HISTORIAL PROACTIVA INICIO
            objLog.CrearArchivolog("[PROY-140579][INICIO - ACTUALIZAR IDS PROACTIVA SEC  GrabarEmpresa] -> Nro Sec: ", nroSEC.ToString(), null);
            BWActualizarHistoricoProactiva ObjActualizarHistProa = new BWActualizarHistoricoProactiva();
            rtpaActualizarBrms = ObjActualizarHistProa.ActualizarHistoricoProactivaNegocios(nroSEC.ToString());
            objLog.CrearArchivolog("[PROY-140579][FIN - ACTUALIZAR IDS PROACTIVA SEC GrabarEmpresa] -> Nro Sec: ", nroSEC.ToString(), null);
            //PROY-140579 FASE 2 - ACTUALIZAR HISTORIAL PROACTIVA SEC FIN

            // FIJO INALAMBRICO - BLOQUEO Y/O DEUDA
            //double dblDeuda = CheckDbl(hidDeuda.Value);
            //if ((dblDeuda > 0))
            //{
            //    bool bln = oSolicitud.Registrar_Monto_Vencido(strNroSEC, dblDeuda, "1");
            //}

            //PROY-140457-DEBITO AUTOMATICO-INI
            HttpContext.Current.Session["ListaSoplnCodigo"] = listaPlanDetalle;
            //PROY-140457-DEBITO AUTOMATICO-FIN

            // GRABAR DATOS PORTABILIDAD
            if (flgPortabilidad)
            {
                //INI: PROY-140335 RF1
                var LineasRepositorio = (List<BEPorttSolicitud>)(HttpContext.Current.Session["DetalleCPRepositorio"]);
                string LineasSinCP = string.Empty;
                string LineasConCP = string.Empty;
                List<string> lstLineasSinCP;
                if (LineasRepositorio != null)
                {
                    if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Count() > 0)
                    {
                        LineasSinCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                    }
                    if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Count() > 0)
                    {
                        LineasConCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                    }
                }


                //FIN: PROY-140335 RF1

                BLPortabilidad objPortabilidad = new BLPortabilidad();

                // GRABAR TELEFONOS PORTABILIDAD
                objLog.CrearArchivolog("    GrabarEmpresa/GRABAR TELEFONOS PORTABILIDAD   ", null, null);
                List<BENumeroPortabilidad> lisNroPortabilidad = new List<BENumeroPortabilidad>();
                List<BEPlanDetalleVenta> lisPlanDetalle = listaPlanDetalle.Cast<BEPlanDetalleVenta>().ToList();
                string strFlagEstado = ConfigurationManager.AppSettings["FlagPortaNumeroNuevo"];
                string strTipoDocumentoRUC = ConfigurationManager.AppSettings["TipoDocumentoRUC"];
                string strTCliente = ConfigurationManager.AppSettings["constCodEvaluacionEmpresarial"];
                //PROY-140262
                string strTipoDocumentoABCDP = Comun.WebComunes.ListaTipoDocumento().Where(w => w.Codigo == Funciones.CheckStr(hidTipoDocumento.Value)).FirstOrDefault().Codigo5;

                lisNroPortabilidad.AddRange(
                    lisPlanDetalle.Select(s => new BENumeroPortabilidad()
                    {
                        SOLIN_CODIGO = s.SOLIN_CODIGO,
                        SOLIN_GRUPO_SEC = ((nroSECPadre > 0) ? nroSECPadre : s.SOLIN_CODIGO),
                        SOPLN_CODIGO = s.SOPLN_CODIGO,
                        PORT_NUM_DOC = Funciones.CheckStr(hidNroDocumento.Value),
                        PLANC_CODIGO = s.PLANC_CODIGO,
                        PORT_NUMERO = s.TELEFONO,
                        FLAG_ESTADO = strFlagEstado,
                        TPROC_CODIGO = hidTipoDocumento.Value == strTipoDocumentoRUC ? strTCliente : hidnTipoOfertaValue.Value,
                        PORT_USU_CREA = hidUsuarioRed.Value,
                        PORT_MODALIDAD = hidModalidad.Value,
                        PORT_TIPO_PLAN = strCodTipoProd == constTipoProductoFijo ? ((int)BENumeroPortabilidad.TIPO_PLAN_HFC.TFI).ToString() : strCodTipoProd == constTipoProducto3PlayInalam ? ((int)BENumeroPortabilidad.TIPO_PLAN_HFC.LTE).ToString() : strCodTipoProd == constTipoProductoHFC ? ((int)BENumeroPortabilidad.TIPO_PLAN_HFC.HFC).ToString() : null,
                        PORT_TIPO_SERVICIO = strCodTipoProd == constTipoProductoFijo ? ((int)BENumeroPortabilidad.TIPO_SERVICIO.FIJO).ToString() : ((strCodTipoProd == constTipoProductoHFC) || (strCodTipoProd == constTipoProducto3PlayInalam)) ? ((int)BENumeroPortabilidad.TIPO_SERVICIO.FIJO).ToString() : ((int)BENumeroPortabilidad.TIPO_SERVICIO.MOVIL).ToString(),
                        //INI: PROY-140223 IDEA-140462
                        PORT_OPERADORCEDENTE = hidOperadorCedente.Value,
                        PORT_TIPO_DOCUMENTO = strTipoDocumentoABCDP,//PROY-140262
                        INICIO_RANGO = s.TELEFONO,
                        FINAL_RANGO = s.TELEFONO,
                        PORT_CANTIDAD_NUM = lisPlanDetalle.Count(),
                        NOM_RASO_ABONAD = oEmpresa.CLIEV_NOMBRE + " " + oEmpresa.CLIEV_APE_PAT + " " + oEmpresa.CLIEV_APE_MAT,
                        USUARIO_CREA = CurrentUser,
                        USUARIO_MODIF = CurrentUser
                        //FIN: PROY-140223 IDEA-140462
                    }).ToList());


                foreach (BENumeroPortabilidad objNroPortabilidad in lisNroPortabilidad)
                {
                    objPortabilidad.GrabarNumeroPortabilidad(objNroPortabilidad);
                }
                bool blnAutonomia = (hidnAutonomia.Value == "S"); //26963
                objLog.CrearArchivolog("[PROY-26963][EVALUACION RUC CON AUTONOMIA]->", blnAutonomia, null);//26963
                // GRABAR ARCHIVOS PORTABILIDAD
                //CAMBIADO POR EL PROY-140335 RF1 INI

                //INI: PROY-140223 IDEA-140462
                //objLog.CrearArchivolog("[VALIDACION DE  NO CONSULTA PREVIA][consFlagConsultaPreviaChip]->", Funciones.CheckStr(Comun.AppSettings.consFlagConsultaPreviaChip), null);
                //if (Comun.AppSettings.consFlagConsultaPreviaChip == "1" &&
                //    (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"]) || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"]))
                //    && (hidNTienePortabilidadValues.Value).Equals("S") && (AppSettings.consCPModdalidadVenta.IndexOf(hidModalidadVenta.Value) > -1) && (AppSettings.consCPCanalVenta.IndexOf(hidnCanalValue.Value) > -1)
                //    && (AppSettings.consCPPuntoVenta.IndexOf(hidOficinaUsuario.Value) == -1))
                //{
                //    objLog.CrearArchivolog("[VALIDACION DE  NO CONSULTA PREVIA][CUMPLIO CONDICION CONFIGURADA]->", "[SI]", null);
                //    //string msjEnvioMesaPortaSinCP = "";
                //    //BLPortabilidad.Envio_mesa_portabilidad_sin_cp(lisNroPortabilidad, ref msjEnvioMesaPortaSinCP);
                //    GrabarEnvioMesaPortabilidadSinCP(lisNroPortabilidad, objLog);
                //} 
                if ((hidNTienePortabilidadValues.Value).Equals("S") && (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"])
                    || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"])) && (LineasSinCP != string.Empty))
                {
                    lstLineasSinCP = LineasSinCP.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries).ToList();
                    foreach (var item in lstLineasSinCP)
                    {
                        Funciones.CheckStr(lisNroPortabilidad.RemoveAll(x => !LineasSinCP.Contains(x.INICIO_RANGO)));
                    }
                    objLog.CrearArchivolog(String.Format("{0} : {1}", "[PROY-140335][GrabarEmpresa] - [VALIDACION DE  NO CONSULTA PREVIA][CUMPLIO CONDICION CONFIGURADA]-> ", "[SI]"), null, null);
                    objLog.CrearArchivolog(String.Format("{0} : {1}", "[PROY-140335][GrabarEmpresa] - [Lineas que no realizaron CP]-> ", LineasSinCP), null, null);
                    //string msjEnvioMesaPortaSinCP = "";
                    //BLPortabilidad.Envio_mesa_portabilidad_sin_cp(lisNroPortabilidad, ref msjEnvioMesaPortaSinCP);
                    GrabarEnvioMesaPortabilidadSinCP(lisNroPortabilidad, objLog);
                }
                //CAMBIADO POR EL PROY-140335 RF1 FIN
                //INICIO PROY-29963 GPRD
                else if (blnAutonomia && (hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoBAM"]) || hidCodProducto.Value == Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoProductoMovil"])))
                {
                    objLog.CrearArchivolog("[PROY-26963 - SE CUMPLE CONDICION PARA ACTUALIZAR PORTT_SOLICITUDES_PORTA]->", "[PONER CAMBIOS AQUI]", null);
                    //ini
                    string mensajeCP = string.Empty;
                    string codigoCP = string.Empty;
                    BESolicitudEmpresa datos = new BESolicitudEmpresa();
                    BESolicitudEmpresa objClienteRuc = objSolicitud.ObtenerSolicitudEmpresa(nroSEC);
                    datos = objClienteRuc;
                    objLog.CrearArchivolog("[BESolicitudEmpresa][PRDC_CODIGO] " + datos.PRDC_CODIGO, null, null);
                    objLog.CrearArchivolog("[PROY-26963][ActualizarConsultaPrevia]", null, null);
                    BeConsultaPrevia objConsultaPrevia = new BeConsultaPrevia()
                    {
                        auditoria = new BEItemGenerico()
                        {
                            Codigo = DateTime.Now.ToString("yyyyMMddhhmmssff"),
                            Descripcion2 = CurrentTerminal,
                            Descripcion = ConfigurationManager.AppSettings["constNombreAplicacion"].ToString(),
                            Codigo2 = CurrentUser
                        },
                        numeroSEC = nroSEC,
                        numeroDocumento = datos.CLIEC_NUM_DOC,
                        nombreRSAbonado = datos != null ? (!string.IsNullOrEmpty(datos.RAZON_SOCIAL) ? datos.RAZON_SOCIAL : datos.CLIEV_RAZ_SOC) : string.Empty,
                        numeroSecuencial = Funciones.CheckStr(HttpContext.Current.Session["SecuencialPorta"]),
                        observaciones = Funciones.CheckStr(Comun.AppSettings.consObservacionActualizarCP)

                    };
                    if (Funciones.CheckStr(objConsultaPrevia.numeroSecuencial).Length > 1)
                    {
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ActualizarConsultaPrevia][idTransaccion] ", objConsultaPrevia.auditoria.Codigo), null, null);
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ActualizarConsultaPrevia][usuarioAplicacion] ", objConsultaPrevia.auditoria.Codigo2), null, null);
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ActualizarConsultaPrevia][solInCodigo] ", objConsultaPrevia.numeroSEC), null, null);
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ActualizarConsultaPrevia][numeroSecuencial] ", objConsultaPrevia.numeroSecuencial), null, null);
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ActualizarConsultaPrevia][observaciones] ", objConsultaPrevia.observaciones), null, null);

                        //BEItemMensaje objMensaje = new WebComunes().ActualizarConsultaPrevia(objConsultaPrevia);
                        objLog.CrearArchivolog("[PROY-26963][ActualizarConsultaPrevia][INICIO] ", null, null);
                        BEItemMensaje objMensaje = BLPortabilidad.ActualizarConsultaPreviaCP(objConsultaPrevia, ref codigoCP, ref mensajeCP);
                        objLog.CrearArchivolog("[PROY-26963][ActualizarConsultaPrevia][FIN] ", null, null);
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ACTUALIZA PORTT_SOLICITUDES_PORTA][CODIGORPTA]->", codigoCP), null, null);
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ACTUALIZA PORTT_SOLICITUDES_PORTA][CODIGORPTA]->", mensajeCP), null, null);
                    }
                    else
                    {
                        objLog.CrearArchivolog(String.Format("{0} {1}", "[PROY-26963][ActualizarConsultaPrevia][SECUENCIAL_PORTABILIDAD INVALIDO] -> ", Funciones.CheckStr(HttpContext.Current.Session["SecuencialPorta"])), null, null);
                    }


                }//FIN PROY-29963 GPRD
                //FIN: PROY-140223 IDEA-140462
                objLog.CrearArchivolog("    GrabarEmpresa/GRABAR ARCHIVOS PORTABILIDAD   ", null, null);
                string[] arrArchivo = hidArchivos.Value.Split('|');
                foreach (string archivo in arrArchivo)
                {
                    if (!string.IsNullOrEmpty(archivo))
                    {
                        BEArchivo objArchivo = new BEArchivo();

                        string[] arrArchivoPortabilidad = archivo.Split(';');
                        string strNombreArchivo = string.Format("{0}{1}{2}", Funciones.CheckStr(nroSEC), "_", arrArchivoPortabilidad[1]);
                        string strRutaArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["constLeerFileServerSPPortINTemp"].ToString(), strNombreArchivo);
                        string strNombreTemporalArchivo = arrArchivoPortabilidad[0];
                        string strRutaTemporalArchivo = string.Format("{0}{1}", ConfigurationManager.AppSettings["constLeerFileServerSPPortINTemp"].ToString(), arrArchivoPortabilidad[0]);
                        string strTipoArchivo = arrArchivoPortabilidad[2];

                        MoverArchivo(strRutaTemporalArchivo, strRutaArchivo);

                        objArchivo.SOLIN_CODIGO = nroSEC;
                        objArchivo.ARCH_NOMBRE = strNombreArchivo;
                        objArchivo.ARCH_RUTA = strRutaArchivo;
                        objArchivo.FLAG_ESTADO = "1";
                        objArchivo.ARCH_TIPO = strTipoArchivo;

                        objPortabilidad.GrabarArchivoPortabilidad(objArchivo);
                    }
                }
            }

            // GRABAR DATOS ADICIONAL DE CREDITOS
            objLog.CrearArchivolog("    GrabarEmpresa/GRABAR DATOS ADICIONAL DE CREDITOS   ", null, null);
            BEDatosCreditos itemCreditos = new BEDatosCreditos();
            itemCreditos.nroLineas = objCliente.nroLineasBSCS;
            itemCreditos.nroLineaMenor7Dia = objCliente.nroLineaMenor7Dia;
            itemCreditos.nroLineaMenor30Dia = objCliente.nroLineaMenor30Dia;
            itemCreditos.nroLineaMenor90Dia = objCliente.nroLineaMenor90Dia;
            itemCreditos.nroLineaMenor180Dia = objCliente.nroLineaMenor180Dia;
            itemCreditos.nroLineaMayor180Dia = objCliente.nroLineaMayor180Dia;

            StringBuilder strMontosxBilletera = new StringBuilder();
            double dblMontoFacturado = 0.0;
            double dblMontoNoFacturado = 0.0;
            foreach (BEBilletera item in objCliente.oLCDisponiblexBilletera)
            {
                if (objCliente.oMontoFacturadoxBilletera != null)
                {
                    var lstMonto = objCliente.oMontoFacturadoxBilletera.Where(w => w.idBilletera == item.idBilletera).LastOrDefault();//PROY-26963 - GPRD - PROMFACT
                    dblMontoFacturado = lstMonto == null ? 0.0 : lstMonto.monto;

                }
                if (objCliente.oMontoNoFacturadoxBilletera != null)
                {
                    var lslNoMonto = objCliente.oMontoNoFacturadoxBilletera.Where(w => w.idBilletera == item.idBilletera).LastOrDefault();//PROY-26963 - GPRD - FROMFACT
                    dblMontoNoFacturado = lslNoMonto == null ? 0.0 : lslNoMonto.monto;
                }

                strMontosxBilletera.Append("|");
                strMontosxBilletera.Append(item.idBilletera);
                strMontosxBilletera.Append(";");
                strMontosxBilletera.Append(item.monto);
                strMontosxBilletera.Append(";");
                strMontosxBilletera.Append(dblMontoFacturado);
                strMontosxBilletera.Append(";");
                strMontosxBilletera.Append(dblMontoNoFacturado);
            }


            itemCreditos.SOLIN_CODIGO = nroSEC;
            itemCreditos.LC_DISPONIBLE = Funciones.CheckDbl(hidnLCDisponibleValue.Value);
            itemCreditos.PRODUCTO_MONTO = strMontosxBilletera.ToString();
            itemCreditos.MSJ_AUTONOMIA = Funciones.CheckStr(hidnMensajeAutonomiaValue.Value);
            itemCreditos.USUARIO_CREA = hidUsuarioRed.Value;
            itemCreditos.MOTIVO = DatosMotivo(strCodEstado);
            itemCreditos.RANGO_LC_DISPONIBLE = txtRangoLC.Value;

            objSolicitud.GrabarEvaluacionDatosCreditos(itemCreditos);

            // GRABAR SUSTENTO A PEDIDO DEL PDV
            if (hidCreditosxAsesor.Value == "S")
            {
                objLog.CrearArchivolog("    GrabarEmpresa/GrabarArchivoIrCreditos   ", nroSEC.ToString(), null);
                GrabarArchivoIrCreditos(nroSEC);
            }

            objLog.CrearArchivolog("    GrabarEmpresa/SALIDA   ", nroSEC.ToString(), null);
            return nroSEC;
        }

        private BEDireccionCliente DatosDireccion(string strCodProducto, int strIdFila)
        {
            BEDireccionCliente oDireccion = new BEDireccionCliente();
            string nroDocumento = hidNroDocumento.Value;

            List<BEDireccionCliente> objLista = (List<BEDireccionCliente>)Session["objDireccion" + nroDocumento];
            if (objLista != null)
            {
                foreach (BEDireccionCliente obj in objLista)
                {
                    if (obj.IdFila == strIdFila)
                    {
                        oDireccion = (BEDireccionCliente)obj;
                        break;
                    }
                }
            }

            oDireccion.IdTipoDireccion = "I";
            if (oDireccion.IdEdificacion == "-1")
            {
                oDireccion.IdEdificacion = "";
                oDireccion.Edificacion = "";
            }
            if (oDireccion.IdTipoInterior == "-1")
            {
                oDireccion.IdTipoInterior = "";
                oDireccion.TipoInterior = "";
            }
            if (oDireccion.IdDomicilio == "-1")
            {
                oDireccion.IdDomicilio = "";
                oDireccion.Domicilio = "";
            }
            if (oDireccion.IdZona == "-1")
            {
                oDireccion.IdZona = "";
                oDireccion.Zona = "";
            }

            return oDireccion;
        }

        private string DatosMotivo(string strCodEstado)
        {
            string strMotivo = string.Empty;
            bool blnIrCreditosxDC7 = (hidCreditosxDC7.Value == "S");
            bool blnIrCreditosxNombres = (hidnCreditosxNombresV.Value == "S");
            bool blnIrCreditosxAsesor = (hidCreditosxAsesor.Value == "S");
            bool blnAutonomia = (hidnAutonomia.Value == "S");
            bool blnPortabilidad = (hidNTienePortabilidadValues.Value == "S");
            bool blnIrCreditosxReglas = (hidCreditosxReglas.Value == "S");
            bool blnIrCreditosxCE = (hidCreditosxCE.Value == "S");
            bool blnAdjuntarIngreso = (hidnAdjuntarIngreso.Value == "S");
            bool blnTipoDC7 = (Funciones.CheckStr(hidNRespuestaDCValue.Value) == ConfigurationManager.AppSettings["strConstanteTipo7"]);

            //PROY-24740 
            StringBuilder sbMotivo = new StringBuilder();

            if (strCodEstado == constEstadoAPRENVACT || strCodEstado == constEstadoAPR && blnTipoDC7)
            {
                sbMotivo.Append(ConfigurationManager.AppSettings["constMsjInconsistenciaDCTipo7"].ToString());
            }
            else
            {
                if (!blnAutonomia && !blnIrCreditosxReglas)
                    sbMotivo.Append(ConfigurationManager.AppSettings["constMsjIncumplimientoAutonomia"].ToString());

                if (blnIrCreditosxNombres)
                    sbMotivo.Append(ConfigurationManager.AppSettings["constMsjCorreccionNombres"].ToString());

                if (blnIrCreditosxCE)
                    sbMotivo.Append(ConfigurationManager.AppSettings["constMsjConteoPlanesCE"].ToString());

                if (blnIrCreditosxDC7)
                    sbMotivo.Append(ConfigurationManager.AppSettings["constMsjInconsistenciaDCTipo7"].ToString());

                if (blnIrCreditosxReglas)
                    sbMotivo.Append(ConfigurationManager.AppSettings["constMsjNoTieneReglas"].ToString());

                if (blnAdjuntarIngreso)
                    sbMotivo.Append(ConfigurationManager.AppSettings["constMsjRevisionSustento"].ToString());
            }
            if (blnIrCreditosxAsesor)
            {
                sbMotivo.Append(ConfigurationManager.AppSettings["constMsjRevisionSustento"].ToString());
            }

            string strMotivoDesactiva = hidMotivoxLineaDesactiva.Value;
            string[] arrMotivoDesactiva = strMotivoDesactiva.Split('|');
            foreach (string motivo in arrMotivoDesactiva)
            {
                if (!string.IsNullOrEmpty(motivo))
                {
                    if (arrMotivoDesactiva.Length > 2)
                    {
                        sbMotivo.Append(ConfigurationManager.AppSettings["consMsjLineaDesactiva"].ToString());
                    }
                    else
                    {
                        if (motivo == ConfigurationManager.AppSettings["consMotivoBloqueoRobo"].ToString())
                            sbMotivo.Append(ConfigurationManager.AppSettings["consMsjRoboPerdida"].ToString());

                        if (motivo == ConfigurationManager.AppSettings["consMotivoBloqueoASolicitud"].ToString())
                            sbMotivo.Append(ConfigurationManager.AppSettings["consMsjSolicitudCliente"].ToString());

                        if (motivo == ConfigurationManager.AppSettings["consMotivoLineaDesactivaMorosidad"].ToString())
                            sbMotivo.Append(ConfigurationManager.AppSettings["consMsjMorosidad"].ToString());

                        if (motivo == ConfigurationManager.AppSettings["consMotivoLineaDesactivaMigracion"].ToString())
                            sbMotivo.Append(ConfigurationManager.AppSettings["consMsjMigracionPrepago"].ToString());
                    }
                    break;
                }
            }

            //PROY-24740 
            strMotivo = sbMotivo.ToString();

            if (strMotivo.Length > 3)
            {
                strMotivo = strMotivo.Substring(3);
            }
            return strMotivo;
        }

        private string MensajeSEC()
        {
            string strMensaje;
            string strCodEstado = hidCodEstadoSEC.Value;
            bool blnIrCreditosxDC7 = (hidCreditosxDC7.Value == "S");
            bool blnIrCreditosxNombres = (hidnCreditosxNombresV.Value == "S");
            bool blnIrCreditosxAsesor = (hidCreditosxAsesor.Value == "S");
            bool blnIrCreditosxLineaDesactiva = (hidCreditosxLineaDesactiva.Value == "S");
            bool blnAutonomia = (hidnAutonomia.Value == "S");
            bool blnPortabilidad = (hidNTienePortabilidadValues.Value == "S");

            #region INICIATIVA - 803 |  Mensaje SEC Aprobacion Excepcion Precios

            if (hidFlagServicio.Value == "1")
            {
                return strMensaje = ReadKeySettings.Key_MsjSecEnviadoPoolExcepcionPrecio;
            }

            #endregion

            if (hidTipoDocumento.Value == ConfigurationManager.AppSettings["TipoDocumentoRUC"].ToString())
            {
                if (blnPortabilidad)
                {
                    strMensaje = "Se registró correctamente la Solicitud N° " + "{0}";
                }
                else if (strCodEstado == constEstadoAPR)
                {
                    strMensaje = "Se registró correctamente la Solicitud N° " + "{0}";
                }
                else
                {
                    strMensaje = "Se registró correctamente la Solicitud N° " + "{0}" + ". Debera adjuntar los documentos de acuerdo a la Politica Vigente.";
                }
            }
            else
            {
                // Aprobado => Altas / PreActivacion => Migracion
                if ((strCodEstado == constEstadoAPR) || (strCodEstado == constEstadoAPRENVACT) || (strCodEstado == constEstadoENVPOOLEMIT))
                {
                    strMensaje = "Se registró correctamente la Solicitud N° " + "{0}";
                }
                else
                {
                    strMensaje = "La solicitud " + "{0}" + " ingresada no cumple con autonomía, será enviada a Créditos para su evaluación";
                    if (blnIrCreditosxDC7)
                    {
                        strMensaje = "La solicitud " + "{0}" + " está siendo enviada a Créditos para la validación del documento de identidad";
                    }
                    else if (blnIrCreditosxNombres)
                    {
                        strMensaje = "La solicitud " + "{0}" + " está siendo enviada a Créditos para la validación y corrección de datos del cliente";
                    }
                    if (blnIrCreditosxAsesor)
                    {
                        strMensaje = "Se generó la SEC " + "{0}" + " y será enviada a Créditos para la evaluación respectiva";
                    }
                }
            }
            return strMensaje;
        }

        public bool TieneProducto(string idProducto)
        {
            bool flgProductoHFC = false;
            string strCadenaEvaluacion = Funciones.CheckStr(hidCadenaDetalle.Value);
            string[] arrPlanes = strCadenaEvaluacion.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (string strPlanes in arrPlanes)
            {
                string[] strPlanFila = strPlanes.Split(';');

                if (strPlanFila[1] == idProducto)
                {
                    flgProductoHFC = true;
                    break;
                }
            }

            return flgProductoHFC;
        }

        #region [Funciones General]
        //INI PROY-31636
        public void LlenarTipoDocumento(List<BEItemGenerico> lstTipoOficina)
        {
            List<BETipoDocumento> lstDocumento = null;

            List<BETipoDocumento> lstDocumentos = null;//INC000003048070 

            String codOficina = (lstTipoOficina != null) ? lstTipoOficina[0].Codigo : "";
            String docsExtPermitidos = (codOficina == ConfigurationManager.AppSettings["constCodTipoOficinaCAC"]) ? ReadKeySettings.Key_tipoDocPermitidoPostCAC :
                                       (codOficina == ConfigurationManager.AppSettings["constCodTipoOficinaDAC"]) ? ReadKeySettings.Key_tipoDocPermitidoPostDAC :
                                       (codOficina == ConfigurationManager.AppSettings["constCodTipoOficinaCorner"]) ? ReadKeySettings.Key_tipoDocPermitidoPostCAD : "";

            if (listDocumentosIdentidad != null && listDocumentosIdentidad.Count > 0)
            {
                lstDocumento = listDocumentosIdentidad.Select(s => s).ToList();
            }
            else
            {
                lstDocumento = (new BLGeneral()).ListarTipoDocumento();
                listDocumentosIdentidad = lstDocumento.Select(s => s).ToList();
            }

            if (lstDocumento.Count > 0)
                lstDocumento.RemoveAll(x => !docsExtPermitidos.Contains(x.ID_SISACT) && !ReadKeySettings.Key_docsExistEvaluacionPost.Contains(x.ID_SISACT));

            lstDocumento = lstDocumento.OrderBy(x => x.DESCRIPCION).ToList();

            lstDocumentos = lstDocumento;//INC000003048070 

            hidDocsPostpagos.Value = lstDocumentos.Select(s => string.Format("{0},{1}", s.ID_SISACT, s.ID_BSCS)).Aggregate((a, b) => a + "|" + b);//INC000003048070 



            GeneradorLog _objLog = CrearLog(CurrentUser);//INC000003048070 
            _objLog.CrearArchivolog(String.Format("LlenarTipoDocumento - lstDocumentos.Count => {0}", lstDocumentos.Count), null, null);//INC000003048070 
            _objLog.CrearArchivolog(String.Format("LlenarTipoDocumento - hidDocsPostpagos.Value => {0}", hidDocsPostpagos.Value.ToString()), null, null);//INC000003048070 



            hidDocsPostpago.Value = lstDocumento.Select(s => string.Format("{0},{1}", s.ID_SISACT, s.DESCRIPCION)).Aggregate((a, b) => a + "|" + b);

            //foreach (var item in lstDocumento)
            //    hidDocsPostpago.Value += (hidDocsPostpago.Value.Equals(String.Empty) ? String.Format("{0},{1}", item.ID_SISACT, item.DESCRIPCION) : String.Format("|{0},{1}", item.ID_SISACT, item.DESCRIPCION));

            ddlTipoDocumento.DataSource = lstDocumento;
            ddlTipoDocumento.DataValueField = "ID_SISACT";
            ddlTipoDocumento.DataTextField = "DESCRIPCION";
            ddlTipoDocumento.DataBind();
            ddlTipoDocumento.Items.Insert(0, new ListItem("SELECCIONE...", String.Empty));
        }

        public void LlenarNacionalidad()
        {

            GeneradorLog _objLog = CrearLog(CurrentUser);
            _objLog.CrearArchivolog(String.Format("CurrentTerminal => {0}", CurrentTerminal), null, null);
            _objLog.CrearArchivolog("---- [Inicio] [método] [ConsultarNacionalidad] ----", null, null);

            string msgRespuesta = string.Empty;
            string codRespuesta = string.Empty;

            string codigoResultado = string.Empty;
            string mensajeResultado = string.Empty;
            string usuarioAplicacion = string.Empty;
            string clave = string.Empty;

            string wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_wsIp"]);

            if (string.IsNullOrEmpty(usuarioAplicacionDataPower) && string.IsNullOrEmpty(claveDatapower))
            {
                string ipTransaccion = CurrentTerminal;
                string usrAplicacion = CurrentUser;
                string codigoAplicacion = ConfigurationManager.AppSettings["CodigoAplicacion"];
                string idAplicacion = ConfigurationManager.AppSettings["system_ConsultaClave"];
                string usuarioAplicacionEncriptado = ConfigurationManager.AppSettings["User_ConsultaNacionalidad"];
                string claveEncriptada = ConfigurationManager.AppSettings["Password_ConsultaNacionalidad"];

                _objLog.CrearArchivolog("-- INICIO: SERVICIO DESENCRIPTACION -> BWConsultaClaves.ConsultaClavesWS --", null, null);
                _objLog.CrearArchivolog(String.Format("wsIp => {0}", wsIp), null, null);
                _objLog.CrearArchivolog(String.Format("ipTransaccion => {0}", ipTransaccion), null, null);
                _objLog.CrearArchivolog(String.Format("usrAplicacion => {0}", usrAplicacion), null, null);
                _objLog.CrearArchivolog(String.Format("codigoAplicacion => {0}", codigoAplicacion), null, null);
                _objLog.CrearArchivolog(String.Format("idAplicacion => {0}", idAplicacion), null, null);
                _objLog.CrearArchivolog(String.Format("usuarioAplicacionEncriptado => {0}", usuarioAplicacionEncriptado), null, null);
                _objLog.CrearArchivolog(String.Format("claveEncriptada => {0}", claveEncriptada), null, null);


                codigoResultado = new BWConsultaClaves().ConsultaClavesWS(DateTime.Now.ToString("YYYYMMDDHHMISSMS"),
                                                                 wsIp,
                                                                 ipTransaccion,
                                                                 usrAplicacion,
                                                                 codigoAplicacion,
                                                                 idAplicacion,
                                                                 usuarioAplicacionEncriptado,
                                                                 claveEncriptada,
                                                                 out mensajeResultado,
                                                                 out usuarioAplicacion,
                                                                 out clave);
                usuarioAplicacionDataPower = usuarioAplicacion;
                claveDatapower = clave;
            }
            else
            {
                usuarioAplicacion = usuarioAplicacionDataPower;
                clave = claveDatapower;
            }

            Result[] listaNacionalidad = null;

            if (listNacionalidadDataPower != null && listNacionalidadDataPower.Length > 0)
            {
                listaNacionalidad = listNacionalidadDataPower;
                codRespuesta = "0";
                msgRespuesta = "Exito";
            }
            else
            {
                listaNacionalidad = new BWConsultaNacionalidad().ConsultarNacionalidad(usuarioAplicacion, clave, CurrentUser, CurrentTerminal, wsIp, ref msgRespuesta, ref codRespuesta);
                listNacionalidadDataPower = listaNacionalidad;
            }

            if (codRespuesta == "0" && listaNacionalidad.Count() > 0)
            {
                _objLog.CrearArchivolog(String.Format("---- Éxito al obtener la lista de Nacionalidad => {0} ----", msgRespuesta), null, null);

                ddlNacionalidad.DataSource = listaNacionalidad;
                ddlNacionalidad.DataValueField = "codigo";
                ddlNacionalidad.DataTextField = "nacionalidad";
                ddlNacionalidad.DataBind();
                ddlNacionalidad.Items.Insert(0, new ListItem("SELECCIONE...", String.Empty));

                List<BEItemGenerico> listNacionalidad = listaNacionalidad.Select(x => new BEItemGenerico { Codigo = x.codigo.ToString(), Descripcion = x.nacionalidad }).ToList();
                HttpContext.Current.Session["listNacionalidad"] = listNacionalidad;

            }
            else
            {
                _objLog.CrearArchivolog(String.Format("Ocurrió un error al obtener la lista de Nacionalidad => {0}", msgRespuesta), null, null);
                ScriptManager.RegisterStartupScript(this, this.GetType(), "ERROR", "alert('Ocurrió un error al obtener la Nacionalidad');", true);
            }

            _objLog.CrearArchivolog("---- [Fin] [método] [LlenarNacionalidad] ----", null, null);

        }
        //FIN PROY-31636

        public void LlenarTipoCanal(List<BEItemGenerico> lstTipoOficina)
        {
            ddlCanal.DataSource = lstTipoOficina;
            ddlCanal.DataValueField = "CODIGO";
            ddlCanal.DataTextField = "DESCRIPCION";
            ddlCanal.DataBind();
            ddlCanal.Items.Insert(0, new ListItem("SELECCIONE...", String.Empty));
            //PROY-140397-INI
            var perfil = hidPerfil_149.Value;
            ddlCanal.SelectedIndex = perfil == "S" ? 0 : 1;
            //PROY-140397-FIN
        }

        public void LlenarTipoOferta()
        {
            string strTipoDocumento = ddlTipoDocumento.SelectedValue;
            ddlOferta.DataSource = (new BLGeneral()).ListarTipoOferta(strTipoDocumento);
            ddlOferta.DataValueField = "Codigo";
            ddlOferta.DataTextField = "Descripcion";
            ddlOferta.DataBind();
            ddlOferta.Items.Insert(0, new ListItem("SELECCIONE...", String.Empty));
        }

        public void LlenarTipoOperacion()
        {
            List<BEItemGenerico> objTipoOperacion = (new BLGeneral()).ListarTipoOperacion();
            StringBuilder sbTipoOperacion = new StringBuilder();
            foreach (BEItemGenerico item in objTipoOperacion)
            {
                sbTipoOperacion.Append("|");
                sbTipoOperacion.Append(item.Codigo);
                sbTipoOperacion.Append(";");
                sbTipoOperacion.Append(item.Tipo);
                sbTipoOperacion.Append(";");
                sbTipoOperacion.Append(item.Codigo2);
                sbTipoOperacion.Append(";");
                if (item.Descripcion == "VENTA VARIAS/RAPIDAS") //PROY-140743
                    item.Descripcion = Funciones.CheckStr(ReadKeySettings.Key_DesVentaVarias);
                sbTipoOperacion.Append(item.Descripcion);

            }
            hidListaTipoOperacion.Value = sbTipoOperacion.ToString();
        }

        [WebMethod]
        public static BEResponseWebMethod LlenadoModalidades(string tipoOperacion, string hidNTienePortabilidadValues)
        {
            //INICIATIVA 920 INI
            //string canalVenta = hidnCanalValue.Value.ToString();
            string strTipoOperacionR = "";
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            string modalidadDefecto = AppSettings.KeyModalidadDefecto;
            BEUsuarioSession objUsuarioSession = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
            List<BEItemGenerico> oficina = (List<BEItemGenerico>)HttpContext.Current.Session["oficina"];
            List<BEItemGenerico> lista = (new BLGeneral()).ListarTipoItem(constCodParamModalidadVenta).OrderBy(x => x.Codigo).ToList();
            List<BEItemGenerico> listaNueva = new List<BEItemGenerico>();

            try
            {

                if ((ValidarCanalesPermitidos(oficina) && ValidarPDVPermitidos(objUsuarioSession)) && ValidarOperacionesPermitidos(tipoOperacion, hidNTienePortabilidadValues))
                {
                    listaNueva = lista;
                }
                else
                {
                    listaNueva = lista.Where(p => p.Codigo == "1" ||
                                           p.Codigo == "2" ||
                                           p.Codigo == "3").ToList();
                }

                foreach (BEItemGenerico item in listaNueva)
                {
                    strTipoOperacionR += string.Format("|{0};{1};", item.Codigo, item.Descripcion);
                }

                objResponse.Cadena = strTipoOperacionR;
                objResponse.IdFila = modalidadDefecto;
            }
            catch (Exception ex)
            {
                objResponse.Boleano = false;
                objResponse.DescripcionError = ex.Message;
                objResponse.Mensaje = "Error en el proceso, favor intentar nuevamente.";
            }
            return objResponse;
            //INICIATIVA 920 FIN
        }
        static bool ValidarCanalesPermitidos(List<BEItemGenerico> oficina)
        {

            string[] canalesPermiidos = AppSettings.Key_Canal_Permitido.ToString().Split('|');
            string flagCanalPermitido = AppSettings.Val_Canal_Permitido;
            bool result = false;

            if (flagCanalPermitido.Equals("1"))
        {
                foreach (string permitido in canalesPermiidos)
                    if (oficina[0].Codigo == permitido)
                        result = true;
        }
            else
                result = true;
            return result;
        }
        static bool ValidarPDVPermitidos(BEUsuarioSession usuario)
        {

            string[] pdvPermiidos = AppSettings.Key_PDV_Permitido.ToString().Split('|');
            string flagPdvPermitido = AppSettings.Val_PDV_Permitido;
            bool result = false;

            if (flagPdvPermitido.Equals("1"))
            {
                foreach (string permitido in pdvPermiidos)
                    if (usuario.OficinaVenta == permitido)
                    result = true;
        }
            else
                result = true;
            return result;
        }
        static bool ValidarOperacionesPermitidos(string tipoOperacion, string hidNTienePortabilidadValues)
        {
            //string tipoOperacion = hidTipoOperacion.Value;
            string[] operacionesPermiidos = AppSettings.Key_Operacion_Permitido.ToString().Split('|');
            string flagOperacionPermitido = AppSettings.Val_Operacion_Permitido;
            bool result = false;

            if (flagOperacionPermitido.Equals("1"))
        {
                foreach (string permitido in operacionesPermiidos)
                    if (hidNTienePortabilidadValues == "S" && permitido == "P")// si es alta, y portabilidad (01)
        {
                        result = true;
        }
                    else if (tipoOperacion == permitido)
        {
                        result = true;
        }
        }
            else
                result = true;

            return result;
        }
        private void LlenarTipoModalidad()
        {
            ddlModalidadPorta.DataSource = (new BLPortabilidad()).ListarParametroPortabilidad("MO", "", "", "", "", 1);
            ddlModalidadPorta.DataValueField = "PK_PARAT_PARAC_COD";
            ddlModalidadPorta.DataTextField = "DESCRIPCION";
            ddlModalidadPorta.DataBind();
            ddlModalidadPorta.Items.Insert(0, new ListItem("SELECCIONE...", String.Empty));
        }

        public string obtenerParametro(List<BEItemGenerico> objListaItem, string idParametro)
        {
            string valor = string.Empty;
            foreach (BEItemGenerico objItem in objListaItem)
            {
                if (objItem.Codigo == idParametro)
                {
                    valor = Funciones.CheckStr(objItem.Valor);
                    break;
                }
            }
            return valor;
        }

        private void LogOut()
        {
            HttpContext.Current.Session.Clear();
            HttpContext.Current.Session.Abandon();
            string strRutaSite = ConfigurationManager.AppSettings["RutaSite"];
            Response.Redirect(strRutaSite);
            Response.End();
        }

        public static string CalificarSubsidio(double dblPrecioLista, double dblPrecioVenta)
        {
            double dblFactor;
            string strCalificacion;
            double dblFactorSubsidioMenor = Funciones.CheckDbl(ObtenerParametroGeneral(ConfigurationManager.AppSettings["constCodFactorSubsidioMenor"]));
            double dblFactorSubsidioMayor = Funciones.CheckDbl(ObtenerParametroGeneral(ConfigurationManager.AppSettings["constCodFactorSubsidioMayor"]));
            if (dblPrecioVenta == 0)
            {
                dblFactor = 0;
            }
            else
            {
                dblFactor = ((dblPrecioLista - dblPrecioVenta) / dblPrecioVenta);
                if (dblFactor < 0)
                {
                    dblFactor = 0;
                }
            }
            dblFactor = Funciones.CheckDbl(dblFactor, 2);
            if (dblFactor < dblFactorSubsidioMenor)
            {
                strCalificacion = "BAJO";
            }
            else if ((dblFactorSubsidioMenor <= dblFactor) && (dblFactor <= dblFactorSubsidioMayor))
            {
                strCalificacion = "MEDIO";
            }
            else
            {
                strCalificacion = "ALTO";
            }
            return strCalificacion;
        }

        public static string ObtenerParametroGeneral(string CodParametro)
        {
            string listaParametros = null;
            List<BEItemGenerico> arrayListaParametro = new BLGeneral().ListarParametroGeneral("1");
            foreach (BEItemGenerico oItem in arrayListaParametro)
            {
                listaParametros = listaParametros + oItem.Codigo + ";" + Funciones.CheckStr(oItem.Valor) + "|";
            }
            string valor = null;
            string[] arrListaParametro = listaParametros.Split('|');
            foreach (string item in arrListaParametro)
            {
                string[] parametro = item.Split(';');
                if (parametro[0] == CodParametro)
                {
                    valor = parametro[1];
                }
            }
            return valor;
        }

        public void MoverArchivo(string origenArchivo, string destinoArchivo)
        {
            try
            {
                using (System.Security.Principal.WindowsImpersonationContext ctx = System.Security.Principal.WindowsIdentity.Impersonate(IntraTimToken()))
                {
                    File.Move(origenArchivo, destinoArchivo);
                    if (File.Exists(origenArchivo))
                    {
                        File.Delete(origenArchivo);
                    }
                    ctx.Undo();
                }
            }
            catch (Exception ex)
            {
                GeneradorLog _objLog = CrearLog(hidNroDocumento.Value);
                _objLog.CrearArchivolog("[ERROR][origenArchivo]", origenArchivo, null);
                _objLog.CrearArchivolog("[ERROR][destinoArchivo]", destinoArchivo, null);
                _objLog.CrearArchivolog("[ERROR][MoverArchivo]", null, ex);
            }
        }

        #endregion [Funciones General]

        private void RegistroMetricaVentas()
        {
            BEItemGenerico objItem;
            Int64 nroSEC = Funciones.CheckInt64(hidNroSEC.Value);
            try
            {
                BEItemGenerico objAudit = new BEItemGenerico();
                List<BEItemGenerico> objCabecera = new List<BEItemGenerico>();

                objAudit.Codigo = nroSEC.ToString();
                objAudit.Codigo2 = CurrentUser;
                objAudit.Descripcion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                objAudit.Descripcion2 = CurrentTerminal;

                DataTable ds = new BLEvaluacion().ListarMetricaEvaluacion(nroSEC);

                objItem = new BEItemGenerico("pdv", Funciones.CheckStr(ds.Rows[0]["PDV"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("descripcionPdv", Funciones.CheckStr(ds.Rows[0]["DESCRIPCION_PDV"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("departamento", Funciones.CheckStr(ds.Rows[0]["DEPARTAMENTO"]).ToUpper());
                objCabecera.Add(objItem);

                BEConsultaDatosOficina oListConsultaDatosOficina = BLSincronizaSap.ConsultaDatosOficina(Funciones.CheckStr(ds.Rows[0]["PDV"]), null);
                string strCanal = (oListConsultaDatosOficina.Canal != null && !string.IsNullOrEmpty(oListConsultaDatosOficina.Canal)) ? oListConsultaDatosOficina.Canal : string.Empty;

                objItem = new BEItemGenerico("canal", strCanal);
                objCabecera.Add(objItem);

                objItem = new BEItemGenerico("tipoDocCliente", Funciones.CheckStr(ds.Rows[0]["TIPO_DOCUMENTO"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("riesgo", Funciones.CheckStr(ds.Rows[0]["RIESGO"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("compConsolidado", Funciones.CheckStr(ds.Rows[0]["COMPORTAMIENTO_PAGO"]));
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("autonomia", Funciones.CheckStr(ds.Rows[0]["AUTONOMIA"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("fechaEvaluacion", Funciones.CheckDate(ds.Rows[0]["FECHA_RESGISTRO"]).ToString("yyyy-MM-ddTHH:mm:ss.fffzzz"));
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("tipoEval", Funciones.CheckStr(ds.Rows[0]["TIPO_EVALUACION"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("tipoRenta", Funciones.CheckStr(ds.Rows[0]["TIPO_RENTA"]).ToUpper());
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("cantidadRenta", Funciones.CheckStr(ds.Rows[0]["NRO_RENTA"]));
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("importeRenta", Funciones.CheckStr(ds.Rows[0]["IMPORTE_RENTA"]));
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("tipoProducto", Funciones.CheckStr(ds.Rows[0]["TIPO_PRODUCTO"]));
                objCabecera.Add(objItem);
                objItem = new BEItemGenerico("cantidadPlanes", Funciones.CheckStr(ds.Rows[0]["CANTIDAD_PLANES"]));
                objCabecera.Add(objItem);

                new BWMetricaEvaluacion().registrarMetrica(hidNroDocumento.Value, objAudit, objCabecera);
            }
            catch (Exception ex)
            {
                try
                {
                    StringBuilder sbtrHTMLCuerpo = new StringBuilder();
                    sbtrHTMLCuerpo.Append("<HTML>");
                    sbtrHTMLCuerpo.Append("<HEAD></HEAD><BODY><table>");
                    sbtrHTMLCuerpo.Append("<tr><td>" + ConfigurationManager.AppSettings["RegMetricaCorreo_Titulo"].ToString() + "</tr></td>");
                    sbtrHTMLCuerpo.Append("<tr><td>   ERROR: " + ex.Message.ToString() + "</tr></td>");
                    sbtrHTMLCuerpo.Append("</table></BODY></HTML>");

                    Web.Comun.WebComunes.EnviarEmail(ConfigurationManager.AppSettings["RegMetricaCorreo_Remitente"].ToString(),
                                                    ConfigurationManager.AppSettings["RegMetricaCorreo_Para"].ToString(), "", "",
                                                    ConfigurationManager.AppSettings["RegMetricaCorreo_Asunto"].ToString(), sbtrHTMLCuerpo.ToString(), "");
                }
                catch (Exception ex1)
                {
                    GeneradorLog _objLog = CrearLog(nroSEC.ToString());
                    _objLog.CrearArchivolog("[ERROR RegistroMetricaVentas]", null, ex1);
                }
            }
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validarSecReno(string strNroDocIde)
        {
            /* [INC000002442213]VALIDACION HIDDEN - INI */
            string idTranssaccion = DateTime.Now.ToString("yyyyMMddhhmmssff");
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, idTranssaccion, null, "WEB");
            /* [INC000002442213]VALIDACION HIDDEN - FIN */
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            try
            {
                DataTable dtLista = (new BLConsumer()).ListarSecReno(strNroDocIde);
                if (dtLista.Rows.Count == 1)
                {
                    DataRow dr = dtLista.Rows[0];
                    objResponse.Cadena = String.Format("{0};{1};{2};{3};{4};{5};{6}", dr["topen_codigo"].ToString(),
                        dr["tipo_oferta"].ToString(), dr["tipo_modalidad"].ToString(), dr["combo"].ToString(),
                        dr["campana"].ToString(), dr["plazo_acuerdo"].ToString(), dr["plan"].ToString());
                }
                /* VALIDACION HIDDEN - INI */
                string[] arr = objResponse.Cadena.Split(char.Parse(";"));

                string sesionVal_hidPlazoReno = arr[5];
                HttpContext.Current.Session["sessionVal_hidPlazoReno"] = sesionVal_hidPlazoReno;
                objLog.CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidPlazoReno]", sesionVal_hidPlazoReno, null);
                string sesionVal_hidPlanReno = arr[6];
                HttpContext.Current.Session["sessionVal_hidPlanReno"] = sesionVal_hidPlanReno;
                objLog.CrearArchivolog("[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidPlanReno]", sesionVal_hidPlanReno, null);
                /* VALIDACION HIDDEN - FIN */
            }
            catch (Exception ex)
            {
                objResponse.Boleano = false;
                objResponse.DescripcionError = ex.Message;
                objResponse.Mensaje = "Error en el proceso, favor intentar nuevamente.";
            }
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod traerDatosReno(string strOficina, string strTipoOperacion, string strTipoOferta, string strTipoFlujo, string strEvaluarSoloFijo,
                                                                string strTipoDocumento, string nroDocumento, string strCasoEspecial, string strModalidadVenta)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            try
            {
                string strTipoOperacionR = string.Empty;
                List<BEItemGenerico> objTipoOperacion = (new BLGeneral()).ListarTipoOperacion();
                foreach (BEItemGenerico item in objTipoOperacion)
                {
                    strTipoOperacionR += string.Format("|{1};{2};{3};{4}", strTipoOperacion, item.Codigo, item.Tipo, item.Codigo2, item.Descripcion);
                }

                objResponse.Cadena = strTipoOperacionR + '¬';

                if (strTipoDocumento == ConfigurationManager.AppSettings["TipoDocumentoRUC"])
                    strTipoDocumento = Funciones.TipoRUC1020(nroDocumento);

                //PROY-24740 
                objResponse.Cadena = string.Format("{0}¬{1}¬{2}", strTipoOperacionR, BLReglaNegocio.LlenarTipoProductoxOferta(strTipoOferta, strTipoFlujo, strTipoOperacion, strEvaluarSoloFijo, strTipoDocumento, strCasoEspecial, strModalidadVenta), BLReglaNegocio.ListarCombo(strOficina, strTipoOferta, strTipoOperacion, strTipoFlujo, strTipoDocumento, strModalidadVenta));
                //PROY-24740 
            }
            catch (Exception ex)
            {
                objResponse.Boleano = false;
                objResponse.DescripcionError = ex.Message;
                objResponse.Mensaje = "Error en el proceso, favor intentar nuevamente.";
            }
            return objResponse;
        }


        //Inicio IDEA-30067
        private void PortaConsultaPreviaAutomatico()
        {

            GeneradorLog objLog = new GeneradorLog(CurrentUser, hidNroDocumento.Value, null, "WEB");
            objLog.CrearArchivolog("[Inicio][PortaConsultaPreviaAutomatico]", null, null);

            string constProductoPortAuto = ConfigurationManager.AppSettings["constProductoPortAuto"].ToString();

            bool blnExito = (hidCodError.Value != "1");
            bool blnAutonomia = (hidnAutonomia.Value == "S");
            bool blnPortabilidad = (hidNTienePortabilidadValues.Value == "S");
            bool blnProductoPortAuto = (constProductoPortAuto.IndexOf(hidProductoPortAuto.Value) >= 0);

            objLog.CrearArchivolog("[blnExito]", blnExito.ToString(), null);
            objLog.CrearArchivolog("[blnAutonomia]", blnAutonomia.ToString(), null);
            objLog.CrearArchivolog("[blnPortabilidad]", blnPortabilidad.ToString(), null);
            objLog.CrearArchivolog("[blnProductoPortAuto]", blnProductoPortAuto.ToString(), null);
            objLog.CrearArchivolog("[hidProductoPortAuto.Value]", hidProductoPortAuto.Value, null);
            objLog.CrearArchivolog("[constProductoPortAuto]", constProductoPortAuto, null);

            if (blnAutonomia && blnPortabilidad && blnExito && blnProductoPortAuto)
            {
                BWEnvioPorta objEnvioPortal = new BWEnvioPorta();
                BEItemMensaje objMensaje = new BEItemMensaje(false);
                string numeroSec = hidNroSEC.Value;
                string observaciones = ConfigurationManager.AppSettings["consObservacionEnvioPorta"].ToString();

                objLog.CrearArchivolog("[Cambio Portabilidad]", null, null);
                objLog.CrearArchivolog("[numeroSec]", numeroSec.ToString(), null);
                objLog.CrearArchivolog("[observaciones]", observaciones.ToString(), null);

                BEItemGenerico objAudit = new BEItemGenerico();
                objAudit.Codigo = hidNroSEC.Value + "_" + DateTime.Now.ToString("yyyyMMddhhmmss");
                objAudit.Codigo2 = CurrentUser;
                objAudit.Codigo3 = ConfigurationManager.AppSettings["CodigoAplicacion"].ToString();
                objAudit.Descripcion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                objAudit.Descripcion2 = CurrentTerminal;
                //INI: PROY-BLACKOUT
                objAudit.Estado = AppSettings.consFlagBlackOut.ToString();
                objAudit.Valor = AppSettings.consMensajeCPExitosoBlackOut;
                string keyLog = string.Format("{0}|{1}|{2}", hidNroDocumento.Value, "PROY-BLACKOUT", "PortaConsultaPreviaAutomatico()");
                CrearLogStatic(keyLog).CrearArchivolog("[INFO]-", "SE INICIO EL METODO", null);
                CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", " objAudit.Estado => "), " " + objAudit.Estado, null);
                CrearLogStatic(keyLog).CrearArchivolog(string.Format("{0},{1} ", "[INFO]-", " objAudit.Valor => "), " " + objAudit.Valor, null);
                CrearLogStatic(keyLog).CrearArchivolog("[INFO]-", "FIN DE PARAMETROS BLACKOUT CAPTURADOS", null);
                //FIN : PROY-BLACKOUT

                objMensaje = objEnvioPortal.realizarConsultaPrevia(numeroSec, observaciones, objAudit);

                objLog.CrearArchivolog("[objMensaje.exito]", Funciones.CheckStr(objMensaje.exito), null);
                objLog.CrearArchivolog("[objMensaje.codigo]", Funciones.CheckStr(objMensaje.codigo), null);
                objLog.CrearArchivolog("[objMensaje.descripcion]", Funciones.CheckStr(objMensaje.descripcion), null);

            }
            //PROY-26963 - IDEA-34399: Mejora Portabilidad Despacho PDV
            else if (blnAutonomia && blnPortabilidad && blnExito && Funciones.CheckStr(Comun.AppSettings.consProductosConsultaCP).Contains(hidProductoPortAuto.Value))
            {
                objLog.CrearArchivolog("[Consulta Previa Anticipada]", null, null);
                objLog.CrearArchivolog("[Consulta Previa Anticipada][hidCreditosxAsesor.Value]", hidCreditosxAsesor.Value, null);
                objLog.CrearArchivolog("[Consulta Previa Anticipada][hidTipoDocumento.Value]", hidTipoDocumento.Value, null);

                if (Funciones.CheckStr(hidTipoDocumento.Value) != ConfigurationManager.AppSettings["TipoDocumentoRUC"])
                {
                    if (Funciones.CheckStr(hidCreditosxAsesor.Value).ToUpper() != "S")
                    {
                        string strNumeroSecuencial = string.Empty;
                        string strCodResp = string.Empty;
                        string strMensResp = string.Empty;
                        string strCodigoCedente = hidOperadorCedente.Value;
                        string strModalidad = hidModalidad.Value;
                        string strTipoDocumento = hidTipoDocumento.Value;
                        string strNumeroDocumento = hidNroDocumento.Value;
                        string[] arrDetallePlan = Funciones.CheckStr(hidCadenaDetalle.Value).Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                        string lineas = arrDetallePlan.Select(s => s.Split(';')[30]).Where(w => !string.IsNullOrEmpty(w)).Aggregate((a, b) => a + "," + b);
                        string strNombreRSAbonado = string.Empty;

                        if (hidTipoDocumento.Value == ConfigurationManager.AppSettings["TipoDocumentoRUC"])
                        {
                            strNombreRSAbonado = objClienteDCCorp != null ? (!string.IsNullOrEmpty(objClienteDCCorp.strRazonSocial) ? objClienteDCCorp.strRazonSocial : string.Format("{0} {1} {2}", objClienteDCCorp.strNombres, objClienteDCCorp.strApellidoPaterno, objClienteDCCorp.strApellidoMaterno)) : string.Empty;
                        }
                        else
                        {
                            strNombreRSAbonado = objClienteDC != null ? (string.Format("{0} {1} {2}", objClienteDC.NOMBRES, objClienteDC.APELLIDO_PATERNO, objClienteDC.APELLIDO_MATERNO)) : string.Empty;
                        }

                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia]", "", null);

                        BeConsultaPrevia objConsultaPrevia = new BeConsultaPrevia()
                        {
                            numeroSEC = Funciones.CheckInt64(hidNroSEC.Value),
                            codigoCedente = strCodigoCedente,
                            modalidad = strModalidad,
                            tipoDocumento = strTipoDocumento,
                            numeroDocumento = strNumeroDocumento,
                            msisdn = lineas,
                            auditoria = new BEItemGenerico()
                            {
                                Codigo = DateTime.Now.ToString("yyyyMMddhhmmssff"),
                                Descripcion2 = CurrentTerminal,
                                Descripcion = ConfigurationManager.AppSettings["constNombreAplicacion"].ToString(),
                                Codigo2 = CurrentUsers
                            }
                        };


                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.numeroSEC]", objConsultaPrevia.numeroSEC, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.codigoCedente]", objConsultaPrevia.codigoCedente, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.modalidad]", objConsultaPrevia.modalidad, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.tipoDocumento]", objConsultaPrevia.tipoDocumento, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.numeroDocumento]", objConsultaPrevia.numeroDocumento, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.msisdn]", objConsultaPrevia.msisdn, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.auditoria.Codigo]", objConsultaPrevia.auditoria.Codigo, null);
                        objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.auditoria.Codigo2]", objConsultaPrevia.auditoria.Codigo2, null);

                        //INI:CAMBIADO POR PROY-140335 RF1 

                        var LineasRepositorio = (List<BEPorttSolicitud>)(HttpContext.Current.Session["DetalleCPRepositorio"]);
                        string LineasSinCP = null;
                        string LineasConCP = null;


                        if (HttpContext.Current.Session["DetalleCPRepositorio"] != null)
                        {
                            if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Count() > 0)
                            {
                                LineasSinCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                            }
                            if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Count() > 0)
                            {
                                LineasConCP = LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                            }

                            //PROY-140223 IDEA-140462
                            //if (AppSettings.consFlagConsultaPreviaChip.Equals("1") && (AppSettings.consCPModdalidadVenta.IndexOf(hidModalidadVenta.Value) > -1
                            //    && (AppSettings.consCPCanalVenta.IndexOf(hidnCanalValue.Value) > -1) && (AppSettings.consCPPuntoVenta.IndexOf(hidOficinaUsuario.Value) == -1)))
                            if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "NO").Count() > 0)
                            {
                                objConsultaPrevia.msisdn = LineasSinCP; //PROY-140335 RF1
                                objLog.CrearArchivolog(string.Format("{0}", "[Inicio de proceso de Consulta Previa Anticipada sin CP]"), null, null);

                                objLog.CrearArchivolog(String.Format("{0} : {1}", "[PROY-140335][Actualizar_SEC_sin_CP] - [Lineas que no realizaron CP]-> ", LineasSinCP), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Actualizar_SEC_sin_CP][in objConsultaPrevia.numeroSEC: ]", objConsultaPrevia.numeroSEC), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Actualizar_SEC_sin_CP][in objConsultaPrevia.auditoria.Codigo2: ]", objConsultaPrevia.auditoria.Codigo2), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Actualizar_SEC_sin_CP][out strCodResp: ]", strCodResp), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Actualizar_SEC_sin_CP][out strMensResp: ]", strMensResp), null, null);

                                BLPortabilidad.Actualizar_SEC_sin_CP(objConsultaPrevia, ref strCodResp, ref strMensResp);

                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Actualizar_SEC_sin_CP][RESPUESTA - out strCodResp: ]", strCodResp), null, null);
                                objLog.CrearArchivolog(string.Format("{0}{1}", "[Actualizar_SEC_sin_CP][RESPUESTA - out strMensResp: ]", strMensResp), null, null);

                                objLog.CrearArchivolog(string.Format("{0}", "[Fin de proceso de Consulta Previa Anticipada sin CP]"), null, null);

                            }
                            //PROY-140223 IDEA-140462
                            if (LineasRepositorio.Where(w => w.ejecucionConsultaPrevia == "SI").Count() > 0) //PROY-140335 RF1
                            {
                                objConsultaPrevia.msisdn = LineasConCP; //PROY-140335 RF1
                                if (BLPortabilidad.ValidarConsultaPreviaSEC(objConsultaPrevia, ref strNumeroSecuencial, ref strCodResp, ref strMensResp))
                                {
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.numeroSEC]", objConsultaPrevia.numeroSEC, null);
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.numeroSecuencial]", strNumeroSecuencial, null);
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.strCodResp]", strCodResp, null);
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][objConsultaPrevia.strMensResp]", strMensResp, null);

                                    objConsultaPrevia.numeroSecuencial = strNumeroSecuencial;
                                    if (objCliente != null)
                                    {
                                        objConsultaPrevia.nombreRSAbonado = strNombreRSAbonado;
                                    }
                                    objConsultaPrevia.observaciones = Comun.AppSettings.consObservacionActualizarCP;

                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][BWRegistrarPorta().ActualizarConsultaPrevia]", "Inicio", null);
                                    //IN000000772139 INIC
                                    Int16 numIntentos = Convert.ToInt16(Comun.AppSettings.consReintentosActualizaSEC);//configurable
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][][Comun.AppSettings.consReintentosActualizaSEC]: ", Comun.AppSettings.consMensajesCPCarrito, null);
                                    Int16 intentos = 1;
                                    string strMsjActualizaCP = String.Format(Comun.AppSettings.consMensajeErrorActualizarCP, String.Format("N° {0}.", hidNroSEC.Value));
                                    while (intentos <= numIntentos)
                                    {

                                        var objWS = new BWRegistrarPorta().ActualizarConsultaPrevia(objConsultaPrevia);
                                        objLog.CrearArchivolog("[Consulta Previa Anticipada][BWRegistrarPorta().ActualizarConsultaPrevia]", String.Format("Respuesta del Servicio(Codigo|Mensaje):{0}|{1}", objWS.codigo, objWS.descripcion), null);
                                        objLog.CrearArchivolog("[Consulta Previa Anticipada][BWRegistrarPorta().consReintentosActualizaSEC][Intento]: ", intentos, null);
                                        if (objWS.codigo == "0")
                                        {
                                            strMsjActualizaCP = "";
                                            break;
                                        }
                                        intentos++;
                                    }
                                    string strMensajeSEC = hidnMensajeValue.Value;
                                    strMensajeSEC = String.Format("{0}. {1}", strMensajeSEC, strMsjActualizaCP);
                                    hidnMensajeValue.Value = strMensajeSEC;
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][Mensaje]", strMensajeSEC, null);
                                    objLog.CrearArchivolog("[Consulta Previa Anticipada][BWRegistrarPorta().ActualizarConsultaPrevia]", "Fin", null);
                                }
                                //IN000000772139 FIN
                            }
                        }
                    }
                }
            }
            //FIN:CAMBIADO POR PROY-140335 RF1 
            //PROY-26963 - IDEA-34399: Mejora Portabilidad Despacho PDV
            else
            {
                objLog.CrearArchivolog("[Sin Cambio Portabilidad]", null, null);
                //objLog.CrearArchivolog("[ERROR][PortaConsultaPreviaAutomatico]", null, ex);
            }

            objLog.CrearArchivolog("[Fin][PortaConsultaPreviaAutomatico]", null, null);
        }
        //Fin IDEA-30067

        //PROY-26963 - IDEA-34399: Mejora Portabilidad Despacho PDV
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod RealizarConsultaPrevia(string strCadenaConsultaPrevia, string strListaLineas)
        {
            string idTranssaccion = DateTime.Now.ToString("yyyyMMddhhmmssff");
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, idTranssaccion, null, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            try
            {
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][strCadenaConsultaPrevia]", strCadenaConsultaPrevia, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][strListaLineas]", strListaLineas, null);
                string[] arrParamConsultaPrevia = strCadenaConsultaPrevia.Split(';');
                string consTipoServicio = Comun.AppSettings.consTipoServicioConsultaCP;
                //PROY-140223 IDEA-140462
                string strModalidadVentaCP = Funciones.CheckStr(arrParamConsultaPrevia[5].ToString());
                string consFlagConsultaPreviaChip = AppSettings.consFlagConsultaPreviaChip;
                var strCanalVentaCP = Funciones.CheckStr(arrParamConsultaPrevia[6].ToString());
                var strPuntoVentaCP = Funciones.CheckStr(arrParamConsultaPrevia[7].ToString());
                var strFlagCP_Proa = Funciones.CheckStr(arrParamConsultaPrevia[8].ToString()); //PROY-140335 RF1

                objLog.CrearArchivolog("[VALIDA ENVIO DE CP][INICIO]", null, null);
                objLog.CrearArchivolog("[VALIDA ENVIO DE CP][strModalidadVentaCP]", strModalidadVentaCP, null);
                objLog.CrearArchivolog("[VALIDA ENVIO DE CP][consFlagConsultaPreviaChip]", consFlagConsultaPreviaChip, null);
                objLog.CrearArchivolog("[VALIDA ENVIO DE CP][strCanalVentaCP]", strCanalVentaCP, null);
                //CAMBIADO POR EL PROY-140335 RF1 INI
                //if (AppSettings.consCPCanalVenta.IndexOf(strCanalVentaCP) > -1 && AppSettings.consCPModdalidadVenta.IndexOf(strModalidadVentaCP) > -1 && AppSettings.consFlagConsultaPreviaChip == "1"
                //    && (AppSettings.consCPPuntoVenta.IndexOf(strPuntoVentaCP) == -1))
                //{
                //    objResponse.CodigoError = "-1";
                //    objResponse.DescripcionError = AppSettings.consMensajeCPApagada;
                //    objLog.CrearArchivolog("[VALIDA ENVIO DE CP][NO SE ENVIA CP]", null, null);
                //    return objResponse;
                //}
                //CAMBIADO POR EL PROY-140335 RF1 FIN
                objLog.CrearArchivolog("[VALIDA ENVIO DE CP][FIN]", null, null);
                //FIN PROY-140223 IDEA-140462

                //INICIO|PROY-31393
                HttpContext.Current.Session["strCadenaConsultaPrevia"] = Funciones.CheckStr(strCadenaConsultaPrevia);
                //FIN|PROY-31393

                var listTipoServicioPorta = consTipoServicio.Split('|')
                    .Select(a => a)
                    .Where(w => w.Split('=')[0] == arrParamConsultaPrevia[4])
                    .Select(a => a.Split('=')).ToList();

                string strTipoServicio = "1";

                if (listTipoServicioPorta != null && listTipoServicioPorta.Count > 0)
                {
                    strTipoServicio = listTipoServicioPorta[0][1].ToString();
                }

                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][Get][strTipoDocumentoABCDP]", arrParamConsultaPrevia[2], null);
                string strTipoDocumentoABCDP = Comun.WebComunes.ListaTipoDocumento().Where(w => w.Codigo == arrParamConsultaPrevia[2]).FirstOrDefault().Codigo5;

                //INI: PROY-140335
                objLog.CrearArchivolog("[INICIO][140335][VALIDACION CP]", "", null);
                var result = (List<BEPorttSolicitud>)(HttpContext.Current.Session["DetalleCPRepositorio"]);
                if (strFlagCP_Proa == "1")
                {
                    result = result.Where(w => w.numeroLinea == strListaLineas).Select(s => { s.ejecucionConsultaPrevia = "SI"; return s; }).ToList(); ;
                }
                //CAMBIAR VALOR DE flagConsultaPrevia por ejecucionConsultaPrevis
                string LineasCP = result.Where(w => w.ejecucionConsultaPrevia == "SI").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                objLog.CrearArchivolog("[VALIDACION CP][140335][LineasCP]", Funciones.CheckStr(LineasCP), null);
                objLog.CrearArchivolog("[FIN][140335][VALIDACION CP]", "", null);
                //FIN: PROY-140335

                BeConsultaPrevia oConsultaPrevia = new BeConsultaPrevia()
                {
                    auditoria = new BEItemGenerico()
                    {
                        Codigo = idTranssaccion,
                        Descripcion2 = CurrentTerminal,
                        Descripcion = ConfigurationManager.AppSettings["constNombreAplicacion"].ToString(),
                        Codigo2 = CurrentUsers
                    },
                    codigoCedente = arrParamConsultaPrevia[0],
                    modalidad = arrParamConsultaPrevia[1],
                    //CAMBIADO POR EL PROY-140335 RF1
                    //msisdn = string.Join(",", strListaLineas.Split('|').Select(a => a).Where(w => !string.IsNullOrEmpty(w)).ToArray()),
                    msisdn = LineasCP,
                    //CAMBIADO POR EL PROY-140335 RF1
                    tipoDocumento = strTipoDocumentoABCDP,
                    numeroDocumento = arrParamConsultaPrevia[3],
                    observaciones = Comun.AppSettings.consObservacionRealizarCP,
                    tipoPorta = Comun.AppSettings.consTipoPortabilidadPortIN,
                    modoEnvio = Comun.AppSettings.consTipoModalidadCPPortIN,
                    tipoServicio = strTipoServicio
                };

                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][codigoCedente]", oConsultaPrevia.codigoCedente, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][modalidad]", oConsultaPrevia.modalidad, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][msisdn]", oConsultaPrevia.msisdn, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][tipoDocumento]", oConsultaPrevia.tipoDocumento, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][numeroDocumento]", oConsultaPrevia.numeroDocumento, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][observaciones]", oConsultaPrevia.observaciones, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][tipoPorta]", oConsultaPrevia.tipoPorta, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][modoEnvio]", oConsultaPrevia.modoEnvio, null);
                objLog.CrearArchivolog("[Ininio][RealizarConsultaPrevia][tipoServicio]", oConsultaPrevia.tipoServicio, null);

                BEItemMensaje objRespuestaWS = new BWRegistrarPorta().RealizarConsultaPrevia(oConsultaPrevia);

                objLog.CrearArchivolog("[BWRegistrarPorta().RealizarConsultaPrevia].codigo ->", objRespuestaWS.codigo, null);
                objLog.CrearArchivolog("[BWRegistrarPorta().RealizarConsultaPrevia].descripcion ->", objRespuestaWS.descripcion, null);
                objLog.CrearArchivolog("[BWRegistrarPorta().RealizarConsultaPrevia].identificadorProceso ->", objRespuestaWS.cadenaValoresOut, null);
                objLog.CrearArchivolog("[BWRegistrarPorta().RealizarConsultaPrevia].mensajeSistema ->", objRespuestaWS.mensajeSistema, null);

                objResponse.CodigoError = objRespuestaWS.codigo;
                objResponse.DescripcionError = objRespuestaWS.descripcion;

                if (objResponse.CodigoError == "-4")
                {
                    objResponse.DescripcionError = Comun.AppSettings.consMensajeTimeOutRegistraPortaWS;
                }
                objResponse.Mensaje = string.Format("{0}|{1}", Comun.AppSettings.consMsgConsultaPreviaExitosa, Comun.AppSettings.consMsgConsultaPreviaPendienteABCDP);

                objResponse.Cadena = objRespuestaWS.cadenaValoresOut;
                //INICIO|PROY-26963
                HttpContext.Current.Session["SecuencialPorta"] = Funciones.CheckStr(objRespuestaWS.cadenaValoresOut);
                //FIN|PROY-26963
                objResponse.Objeto = new int[] { Comun.AppSettings.consReintentosConsultaCP, Comun.AppSettings.consFrecuenciaConsultaCP };

            }
            catch (Exception ex)
            {
                objResponse.CodigoError = "-1";
                objResponse.DescripcionError = "Ocurrió un error al ejecutar la consulta previa, Favor vuelva a intentarlo.";
                objLog.CrearArchivolog("[BWRegistrarPorta().RealizarConsultaPrevia][Error] ->", ex.Message, null);
            }

            objLog.CrearArchivolog("[Fin][RealizarConsultaPrevia]", null, null);
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod RecuperarConsultaPrevia(string strNumeroSecuencialCP)
        {
            string strCodResp = null;
            string strMensResp = null;
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strNumeroSecuencialCP, null, "WEB");
            try
            {
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][strNumeroSecuencialCP]", strNumeroSecuencialCP, null);
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][Tiempo de espera][Configuracion]", Comun.AppSettings.consFrecuenciaConsultaCP, null);
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][Tiempo de espera][Inicia]", DateTime.Now.ToString("HHmmssff"), null);
                //System.Threading.Thread.Sleep(Comun.AppSettings.consFrecuenciaConsultaCP);
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][Tiempo de espera][Fin]", DateTime.Now.ToString("HHmmssff"), null);

                //INI: PROY-140335 RF1
                var strSecuencialCP = strNumeroSecuencialCP;
                HttpContext.Current.Session["strSecuencialCP"] = strSecuencialCP;
                //FIN: PROY-140335 RF1

                List<BEPorttSolicitud> listaPortabilidad = BLPortabilidad.ValidarRespuestaWSCP(strNumeroSecuencialCP, ref strCodResp, ref strMensResp);
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][strCodResp]", strNumeroSecuencialCP, null);
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][strMensResp]", strNumeroSecuencialCP, null);
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][listaPortabilidad.Count]", listaPortabilidad.Count(), null);

                objResponse.CodigoError = listaPortabilidad.Count > 0 && listaPortabilidad.Count == listaPortabilidad.Where(w => w.numeroIntentosCP > 0).Count() ? "0" : "1";//0=OK
                objResponse.DescripcionError = objResponse.CodigoError == "1" ? Comun.AppSettings.consMsgConsultaPreviaPendienteABCDP : "OK";

                //PROY-31393 INI
                List<BEPorttSolicitud> listPortFiltro = new List<BEPorttSolicitud>();

                foreach (BEPorttSolicitud item in listaPortabilidad)
                {

                    var strCadenaCP = HttpContext.Current.Session["strCadenaConsultaPrevia"];
                    var strOperadorCedente = Funciones.CheckStr(strCadenaCP).Split(';')[0];
                    var strTipoProducto = Funciones.CheckStr(strCadenaCP).Split(';')[4];
                    var strModalidad = Funciones.CheckStr(strCadenaCP).Split(';')[1];
                    var strModalidadVenta = Funciones.CheckStr(strCadenaCP).Split(';')[5];

                    BEPorttConfiguracion BEPortConfig = new BEPorttConfiguracion();
                    BEPortConfig.PORTV_EST_PROCESO = item.codigoEstadoCP;
                    BEPortConfig.PORTV_MOTIVO = item.codigoMotivocP;
                    BEPortConfig.PORTV_FLAG_ACREDITA = item.deudaCP.Length > 0 ? 1 : 0;
                    BEPortConfig.PORTV_OPERADOR = item.operadorCedente;
                    BEPortConfig.PORTC_TIPO_PRODUCTO = strTipoProducto;
                    BEPortConfig.PORTV_TIPO_VENTA = ConfigurationManager.AppSettings["constCodTipoVentaPostPago"];
                    BEPortConfig.PORTV_APLICACION = ConfigurationManager.AppSettings["constNombreAplicacion"];//"SISACT"
                    BEPortConfig.PORTV_MOD_VENTA = strModalidadVenta == "1" ? "|C|" : "|P|";


                    objLog.CrearArchivolog("INVOCA PorttValidaABCDP", null, null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTV_EST_PROCESO : ", item.codigoEstadoCP, null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTV_MOTIVO : ", item.codigoMotivocP, null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTN_FLAG_ACREDITA : ", item.deudaCP.Length > 0 ? 1 : 0, null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTV_OPERADOR : ", item.operadorCedente, null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTC_TIPO_PRODUCTO : ", strTipoProducto, null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTV_TIPO_VENTA : ", ConfigurationManager.AppSettings["constCodTipoVentaPostPago"], null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTV_APLICACION : ", ConfigurationManager.AppSettings["constNombreAplicacion"], null);
                    objLog.CrearArchivolog(" PROY-31393 - PORTV_MOD_VENTA : ", strModalidadVenta, null);


                    objLog.CrearArchivolog("Inicio getPorttValidaABCDP()", null, null);

                    List<string> resultado = BLPortabilidad.PorttValidaABCDP(BEPortConfig);
                    item.flagCPPermitida = 0;
                    if (resultado[0] != "0")
                    {
                        item.flagCPPermitida = 1;
                    }
                    listPortFiltro.Add(item);
                }

                //INI: PROY-140335 RF1
                List<BEPorttSolicitud> listaPortabilidadSession = (List<BEPorttSolicitud>)HttpContext.Current.Session[string.Format("DetalleCPRepositorio")];
                foreach (BEPorttSolicitud p in listaPortabilidadSession)
                {
                    //bool blLineaCP = listaPortabilidad.Exists(w => w.numeroLinea == p.numeroLinea && p.flagConsultaPrevia == "SI");

                    if (listaPortabilidad.Exists(w => w.numeroLinea == p.numeroLinea && p.flagConsultaPrevia == "NO")) //== "SI")) // 1 : 
                    {
                        p.idPortabilidad = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).idPortabilidad;
                        p.flagCPPermitida = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).flagCPPermitida;
                        p.numeroSEC = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).numeroSEC;
                        p.numeroLinea = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).numeroLinea;
                        p.fechaActivacionCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).fechaActivacionCP;
                        p.fechaEnvioCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).fechaEnvioCP;
                        p.flagEnvioCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).flagEnvioCP;
                        p.codigoEstadoCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).codigoEstadoCP;
                        p.descripcionEstadoCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).descripcionEstadoCP;
                        p.codigoMotivocP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).codigoMotivocP;
                        p.descripcionMotivoCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).descripcionMotivoCP;
                        p.deudaCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).deudaCP;
                        p.numeroIntentosCP = listaPortabilidad.Find(w => w.numeroLinea == p.numeroLinea).numeroIntentosCP;
                    }
                    else
                    {
                        if (objResponse.CodigoError == "1")
                        {
                            p.numeroIntentosCP = 0;
                            p.descripcionEstadoCP = "";
                            p.fechaActivacionCP = "";
                        }
                    }
                }

                string LineasSinCP = string.Empty;

                if (listaPortabilidadSession.Where(w => w.flagConsultaPrevia == "SI").Count() > 0)
                {
                    LineasSinCP = listaPortabilidadSession.Where(w => w.flagConsultaPrevia == "SI").Select(s => s.numeroLinea).Aggregate((a, b) => a + "," + b);
                }

                objResponse.LineasSinCP = LineasSinCP;
                //FIN: PROY-140335 RF1

                objLog.CrearArchivolog("Fin getPorttValidaABCDP()", null, null);
                //PROY-3393 FIN
                objResponse.Objeto = listaPortabilidad.ToList();
                HttpContext.Current.Session[string.Format("listaPortabilidad{0}", CurrentUsers)] = listaPortabilidad;
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][Error]", ex.Message, null);
                objResponse.CodigoError = "1";
                objResponse.DescripcionError = "Ocurrio un error intento en el proceso de consulta previa";
            }

            objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][objResponse.CodigoError]", objResponse.CodigoError, null);
            objLog.CrearArchivolog("[Ininio][RecuperarConsultaPrevia][objResponse.DescripcionError]", objResponse.DescripcionError, null);

            objLog.CrearArchivolog("[Fin][RecuperarConsultaPrevia][]", "", null);
            return objResponse;
        }

        //PROY-26963 - IDEA-34399: Mejora Portabilidad Despacho PDV
        [System.Web.Services.WebMethod()] //PROY-24724-IDEA-28174 - INICIO
        public static BEResponseWebMethod ObtenerPrecioListaPrepago(string strDescOferta, string strCodTipoDoc, string strNumDoc, string strConcatEquiposConProteccionMovil,
                                                                    string strDescServProteccionMovil, string strCodListaPrecioPrepagoMes, string strPrecioPrepago,
                                                                    string strMsgErrorPrecioListaPrepagoMenor, string strMsgErrorConsultarPrecioListaPrepago)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strNumDoc, null, "WEB");
            objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}{10}{11}{12}{13}", "[Inicio][ObtenerPrecioListaPrepago][strDescOferta] ", strDescOferta,
                                                 " [strCodTipoDoc] ", strCodTipoDoc, " [strNumDoc] ", strNumDoc, " [strConcatEquiposConProteccionMovil] ", strConcatEquiposConProteccionMovil,
                                                 " [strDescServProteccionMovil] ", strDescServProteccionMovil, " [strCodListaPrecioPrepagoMes] ", strCodListaPrecioPrepagoMes,
                                                 " [strPrecioPrepago] ", strPrecioPrepago), null, null);

            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BLGeneral objBLGeneral = new BLGeneral();
            BWClienteProteccionMovil objBWClienteProteccionMovil = new BWClienteProteccionMovil();
            sisact_evaluacion_unificada objEvaluacionUnificada = new sisact_evaluacion_unificada();
            BEItemGenerico objAudit = new BEItemGenerico();
            BEItemMensaje objMensaje = new BEItemMensaje();
            string[] arrConcatEquiposConProteccionMovil = strConcatEquiposConProteccionMovil.Split('|');
            string strConcatEquipoConProteccionMovil = string.Empty;
            string strCodMaterial = string.Empty;
            double dblPrecioListaPrepago = 0.0;
            List<String> lstConcatEquiposReturn = new List<string>();
            String strConcatEquiposReturn = string.Empty;
            BEPrima objBEPrima = new BEPrima();
            string strServicio = string.Empty;
            string strMetodo = string.Empty;
            string strMensajeError = string.Empty;
            string strEstadoRespuesta = string.Empty;

            for (int i = 0; i < arrConcatEquiposConProteccionMovil.Length; i++)
            {
                try
                {
                    strConcatEquipoConProteccionMovil = arrConcatEquiposConProteccionMovil[i];
                    strCodMaterial = strConcatEquipoConProteccionMovil.Split(';')[1];
                    strMetodo = "ConsultarPrecioListaPrepago";

                    objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}", "[Inicio][ConsultarPrecioListaPrepago][strCodMaterial] ", strCodMaterial, " [strCodListaPrecioPrepagoMes] ", strCodListaPrecioPrepagoMes), null, null);
                    objBLGeneral.ConsultarPrecioListaPrepago(strCodMaterial, strCodListaPrecioPrepagoMes, ref dblPrecioListaPrepago);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Resultado OK][ConsultarPrecioListaPrepago][dblPrecioListaPrepago] ", dblPrecioListaPrepago), null, null);

                    if (dblPrecioListaPrepago >= Funciones.CheckDbl(strPrecioPrepago))
                    {
                        objAudit.Codigo2 = CurrentUsers;
                        objAudit.Descripcion = ConfigurationManager.AppSettings["ConstSistemaConsumer"].ToString();
                        objAudit.Descripcion2 = CurrentTerminal;
                        objAudit.Codigo = string.Format("{0}{1}", strNumDoc, DateTime.Now.ToString("yyyyMMddss"));

                        strServicio = "ClienteProteccionMovilWS";
                        strMetodo = "consultarPrima";

                        objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}{6}{7}", "[Inicio][ConsultarPrima][strDescOferta] ", strDescOferta, " [strCodTipoDoc] ", strCodTipoDoc, " [strNumDoc] ", strNumDoc, " [strCodMaterial] ", strCodMaterial), null, null);

                        objMensaje = objBWClienteProteccionMovil.ConsultarPrima(strDescOferta, strCodTipoDoc, strNumDoc, strCodMaterial, strDescServProteccionMovil, objAudit, ref objBEPrima);

                        if (objMensaje.exito)
                        {
                            objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}", "[Resultado OK][ConsultarPrima][Codigo] ", objMensaje.codigo, " [Descripcion] ", objMensaje.descripcion), null, null);
                            strEstadoRespuesta = "C";
                            lstConcatEquiposReturn.Add(string.Format("{0};{1};{2};{3};{4};{5};{6};{7};{8};{9}", strConcatEquipoConProteccionMovil, dblPrecioListaPrepago, strEstadoRespuesta, Funciones.CheckDbl(objBEPrima.MontoPrima),
                                                       objBEPrima.DeducibleDanio, objBEPrima.NroCertif, objBEPrima.NombreProd, objBEPrima.DescProd, objBEPrima.IncidenciaTipoDanio, objBEPrima.IncidenciaTipoRobo));
                        }
                        else
                        {
                            objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}", "[Error][ConsultarPrima][Codigo] ", objMensaje.codigo, " [Descripcion] ", objMensaje.descripcion), null, null);

                            if (objMensaje.codigo.Equals("-1"))
                                strEstadoRespuesta = "E-1";
                            else if (objMensaje.codigo.Equals("-2"))
                                strEstadoRespuesta = "E-2";
                            else if (objMensaje.codigo.Equals("-3"))
                                strEstadoRespuesta = "E-3";
                            else if (objMensaje.codigo.Equals("1"))
                                strEstadoRespuesta = "E1";
                            else if (objMensaje.codigo.Equals("2"))
                                strEstadoRespuesta = "N";
                            else if (objMensaje.codigo.Equals("3"))
                                strEstadoRespuesta = "E3";

                            strMensajeError = objMensaje.mensajeCliente;
                            objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ConsultarPrima][strMensajeError] ", strMensajeError), null, null);
                            lstConcatEquiposReturn.Add(string.Format("{0}{1}{2}{3}{4}{5}", strConcatEquipoConProteccionMovil, ";", dblPrecioListaPrepago, ";", strEstadoRespuesta, ";;;"));

                            if (!strEstadoRespuesta.Equals("N"))
                                objEvaluacionUnificada.EnviarCorreoContingencia(strServicio, strMetodo, objMensaje.codigo, objMensaje.descripcion, objAudit, strNumDoc);
                        }
                        strMetodo = string.Empty;
                    }
                    else
                    {
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ObtenerPrecioListaPrepago][Descripcion] ", string.Format(strMsgErrorPrecioListaPrepagoMenor, strConcatEquipoConProteccionMovil.Split(';')[1], strPrecioPrepago)), null, null);
                        strEstadoRespuesta = "P";
                        lstConcatEquiposReturn.Add(string.Format("{0}{1}{2}{3}{4}{5}", strConcatEquipoConProteccionMovil, ";", dblPrecioListaPrepago, ";", strEstadoRespuesta, ";;;"));
                    }
                }
                catch (Exception ex)
                {
                    if (strMetodo == "consultarPrima")
                    {
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ConsultarPrima][MensajeCliente] ", Funciones.CheckStr(ConfigurationManager.AppSettings["consClienteProteccionMovilWS_Error"])), null, null);
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ConsultarPrima][MensajeSistema] ", ex.Message), null, null);
                        objResponse.Mensaje = Funciones.CheckStr(ConfigurationManager.AppSettings["consClienteProteccionMovilWS_Error"]);
                        objEvaluacionUnificada.EnviarCorreoContingencia(strServicio, strMetodo, string.Empty, ex.Message, objAudit, strNumDoc);
                        strEstadoRespuesta = "ES";
                    }
                    else if (strMetodo == "ConsultarPrecioListaPrepago")
                    {
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ConsultarPrecioListaPrepago][MensajeCliente] ", strMsgErrorConsultarPrecioListaPrepago), null, null);
                        objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][ConsultarPrecioListaPrepago][MensajeSistema] ", ex.Message), null, null);
                        objResponse.Mensaje = strMsgErrorConsultarPrecioListaPrepago;
                        strEstadoRespuesta = "EP";
                    }
                    dblPrecioListaPrepago = 0.0;
                    lstConcatEquiposReturn.Add(string.Format("{0}{1}{2}{3}{4}{5}", arrConcatEquiposConProteccionMovil[i], ";", dblPrecioListaPrepago, ";", strEstadoRespuesta, ";;;"));
                }
                strConcatEquiposReturn = string.Join("|", lstConcatEquiposReturn);
                objResponse.Error = false;
                objResponse.DescripcionError = string.Empty;
                objResponse.Mensaje = "OK";
                objResponse.Cadena = strConcatEquiposReturn;
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Fin][ObtenerPrecioListaPrepago][strConcatEquiposReturn] ", strConcatEquiposReturn), null, null);
            }
            return objResponse;
        }

        //ECM S8 modificacion poryecto PROY-26210 
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod AveriguarSiMuestroLineasTecnologia(string TypDoc, string NumDoc)
        {
            //consulto la cantidad de lineas que tiene el documento y la linea. Devuelvo SI o NO segíun tenga o no lineas
            GeneradorLog objLog = new GeneradorLog("webmethod averiguar lineas", "12345", null, "sisact_evaluacion_unificada_aspx");
            objLog.CrearArchivolog("llamada a averiguar si muestro lineas", null, null);
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            int cantidad = 0;
            BLConsultaLineasTecnologia consultaWS = new BLConsultaLineasTecnologia();
            objLog.CrearArchivolog("obtenido llamado a servicio", null, null);
            try
            {
                String codResp = null, msgResp = null;
                objLog.CrearArchivolog("datos para servicio" + TypDoc + " " + NumDoc, null, null);
                ListaLineaTypeListaLineas[] lista = consultaWS.consultarLineasPrePost(TypDoc, NumDoc, out codResp, out msgResp);
                cantidad = (lista != null) ? lista.Length : 0;
                objLog.CrearArchivolog("lineas obtenidas " + cantidad, null, null);
                //enviar el resultado
                objResponse.Cadena = (cantidad > 0 && EsClienteMasivo(TypDoc, NumDoc, lista)) ? "SI" : "NO";
                objLog.CrearArchivolog("pasada evaluacion cordresp " + codResp, null, null);
                objResponse.Error = false;
                objResponse.CodigoError = (codResp != "0") ? codResp : String.Empty;
                objResponse.DescripcionError = (codResp != "0") ? msgResp : String.Empty;
                objLog.CrearArchivolog("resultado: " + objResponse.Cadena, null, null);
            }
            catch (Exception e)
            {
                objResponse.Error = true;
                objResponse.CodigoError = "0";
                objResponse.DescripcionError = e.Message;
                objResponse.Cadena = "NO";
                objLog.CrearArchivolog(String.Format("excepcion: {0} {1}", e.Message, e.StackTrace), null, null);
            }
            return objResponse;
        }

        private static bool EsClienteMasivo(string TypDoc, string NumDoc, ListaLineaTypeListaLineas[] lista)
        {
            GeneradorLog objLog = new GeneradorLog("es cliente masivo", "12345", null, "sisact_evaluacion_unificada_aspx");
            String strConsumer = ConfigurationManager.AppSettings["strPostTipClienteConsumer"];
            List<BETipoDocumento> objListaDocumento = (new BLGeneral()).ListarTipoDocumento();
            BETipoDocumento objDocumento = null;
            foreach (BETipoDocumento obj in objListaDocumento)
            {
                if (obj.ID_SISACT == TypDoc)
                {
                    objDocumento = new BETipoDocumento();
                    objDocumento = obj;
                    objDocumento.ID_OAC = Funciones.CheckInt(TypDoc).ToString();
                    break;
                }
            }
            objLog.CrearArchivolog("valor de cte Consumer en Web.config es: " + strConsumer, null, null);
            objLog.CrearArchivolog("obtenido equiv. tipo documentosSISACT - BSCS " + objDocumento.ID_SISACT + "" + objDocumento.ID_BSCS, null, null);
            BEItemMensaje objMensaje = null;
            string tipoCliente = String.Empty;
            try
            {
                //INI INICIATIVA-219
                int intComportamientoPago = 0;
                BLDatosCBIO objBLCbio = new BLDatosCBIO();
                intComportamientoPago = objBLCbio.ObtenerComportamientoPago(TypDoc, NumDoc);
                //FIN INICIATIVA-219

                objLog.CrearArchivolog("comportamiento de pago: " + intComportamientoPago, null, null);
                //PROY-29121-INI
                BEUsuarioSession ojbUsuario = new BEUsuarioSession();
                ojbUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                //PROY-29121-FIN
                BEClienteCuenta objCliente = (new BLDatosCliente()).ConsultarDatosCliente(CurrentTerminal, CurrentUsers, TypDoc, NumDoc, intComportamientoPago, 0, string.Empty, ojbUsuario, false);//PROY-29121// PROY-26963 - GPRD - PROMFACT //PROY-32439
                //obtenido el cliente, obtener linea para averiguar si es o no masivo
                objLog.CrearArchivolog("obtenido cliente de consultar datocliente: " + objCliente.idCliente, null, null);
                /* foreach (ListaLineaTypeListaLineas e in lista)
                 {
                    
                     //if (objCliente.lineaSISACT.Rows.Count > 0)
                     {*/
                string numero = lista[0].linea;   // e.linea;
                String MensajeError = String.Empty;

                //FVV S8 modificación proyecto PROY-26210 
                //Se valida el tipo de Documento para la consulta del [TipoCliente]                
                string CODRUC = ConfigurationManager.AppSettings["TipoDocumentoRUC"];
                if (TypDoc != CODRUC)
                {
                    if (lista[0].planLinea.ToUpper() == "POSTPAGO")
                    {
                        //Si el Tipo de Documento es DNI/CE, entonces consulta a BSCS para obtener el TipoCliente
                        BEClienteBSCS clienteBSCS = (new BLConsultaPostPago()).LeerDatosCliente(numero, "", ref MensajeError);
                        tipoCliente = (clienteBSCS != null) ? clienteBSCS.Tipo_cliente.ToUpper() : String.Empty;
                        objLog.CrearArchivolog("El Cliente " + lista[0].planLinea.ToUpper() + " de TipoDocumento: " + TypDoc + " - Numero: " + NumDoc + " - TipoCliente: " + tipoCliente, null, null);
                    }
                    else
                    {
                        tipoCliente = strConsumer;
                        objLog.CrearArchivolog("El Cliente " + lista[0].planLinea.ToUpper() + " de TipoDocumento: " + TypDoc + " - Numero: " + NumDoc + " - TipoCliente: " + tipoCliente, null, null);
                    }

                }
                else
                {
                    //Si el Tipo de Documento es RUC y empieza con 10, es MASIVO. De lo contrario es [Corporativo]
                    if (TypDoc == CODRUC && NumDoc.Substring(0, 2) == "10")
                    {
                        tipoCliente = strConsumer;
                        objLog.CrearArchivolog("El Cliente " + lista[0].planLinea.ToUpper() + " de TipoDocumento: " + TypDoc + " - Numero: " + NumDoc + " - TipoCliente: " + tipoCliente, null, null);
                    }
                    else
                    {
                        tipoCliente = "Corporativo";
                        objLog.CrearArchivolog("El Cliente " + lista[0].planLinea.ToUpper() + " de TipoDocumento: " + TypDoc + " - Numero: " + NumDoc + " - TipoCliente: " + tipoCliente, null, null);
                    }
                }
                //FIN FVV S8

            }
            catch (Exception e)
            {
                tipoCliente = String.Empty;
                objLog.CrearArchivolog("excepcion " + e.Message + ' ' + e.StackTrace, null, null);
            }
            //validar obtenido el 
            objLog.CrearArchivolog("obtenido tipo cliente -->" + tipoCliente, null, null);
            bool esMasivo = tipoCliente.ToUpper() == strConsumer.ToUpper();
            return esMasivo;
        }
        //FIN ECM s8

        public void EnviarCorreoContingencia(string strServicio, string strMetodo, string strCodError, string strMensajeError, BEItemGenerico objAudit, string strNumDoc)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strNumDoc, null, "WEB");
            try
            {
                objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}", "[Inicio][EnviarCorreoContingencia][strServicio] ", strServicio, " [strMetodo] ", strMetodo, " [strCodError] ", strCodError, " [strMensajeError] ", strMensajeError, " [strNumDoc] ", strNumDoc), null, null);

                BEItemMensaje objItemMensaje = new BEItemMensaje();
                BWEnvioCorreo objEnvioCorreo = new BWEnvioCorreo();
                string strRemitente = string.Empty;
                string strDestinatario = string.Empty;
                string strAsunto = string.Empty;
                string strMensaje = string.Empty;
                string strHtmlFlag = string.Empty;
                string strUrl = string.Empty;

                if (strServicio == "ClienteProteccionMovilWS")
                {
                    lstBEParametroProteccionMovil = (List<BEParametro>)Session["ListaParametrosPM"];
                    strRemitente = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "52").SingleOrDefault().Valor;
                    strDestinatario = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "53").SingleOrDefault().Valor;
                    strAsunto = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "54").SingleOrDefault().Valor;
                    strMensaje = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "55").SingleOrDefault().Valor;
                    strHtmlFlag = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "56").SingleOrDefault().Valor;
                    strUrl = Funciones.CheckStr(ConfigurationManager.AppSettings["consClienteProteccionMovilWS_URL"]);
                }

                strMensaje = String.Format(strMensaje, strMetodo, strUrl, strCodError, strMensajeError, objAudit.Codigo, strServicio);
                strMensaje = strMensaje.Replace("=", "<br>");
                strAsunto = String.Format(strAsunto, strServicio);

                objLog.CrearArchivolog(string.Format("{0}{1}{2}{3}{4}{5}{6}{7}{8}{9}", "[Inicio][EnviarCorreo][strRemitente] ", strRemitente, " [strDestinatario] ", strDestinatario, " [strAsunto] ", strAsunto, " [strMensaje] ", strMensaje, " [strHtmlFlag] ", strHtmlFlag), null, null);
                objItemMensaje = objEnvioCorreo.EnviarCorreo(strRemitente, strDestinatario, strAsunto, strMensaje, strHtmlFlag, objAudit);

                if (objItemMensaje.exito)
                {
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Resultado OK][EnviarCorreo][Codigo] ", objItemMensaje.codigo), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Resultado OK][EnviarCorreo][Descripcion] ", objItemMensaje.descripcion), null, null);
                }
                else
                {
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][EnviarCorreo][Codigo] ", objItemMensaje.codigo), null, null);
                    objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][EnviarCorreo][Descripcion] ", objItemMensaje.descripcion), null, null);
                }
                objLog.CrearArchivolog("[Fin][EnviarCorreo]", null, null);
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][EnviarCorreo][MensajeCliente] ", Funciones.CheckStr(ConfigurationManager.AppSettings["consEnvioCorreoWS_Error"])), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Error][EnviarCorreo][MensajeSistema] ", ex.Message), null, null);
            }
            finally
            {
                objLog.CrearArchivolog("[Fin][EnviarCorreoContingencia]", null, null);
            }
        }

        //INICIO INC000003048070 
        public void CargarParametroFC()
        {

            GeneradorLog objLog = CrearLog(hidUsuarioRed.Value.ToString());

            hidConstMsjeConBonoFC.Value = AppSettings.key_ConstMsjeConBonoFC;

            objLog.CrearArchivolog(string.Format("{0}{1}", "[Key_msjCandidatoBono][CargarParametroFC][hidConstMsjeConBonoFC] ", Funciones.CheckStr(hidConstMsjeConBonoFC.Value)), null, null);

        }

        //INICIO PROY 140736
        public void CargarComboBuyback()
        {
            GeneradorLog objLog = CrearLog(hidUsuarioRed.Value.ToString());
            try
            {
                List<BEItemGenerico> lstBuyback = new List<BEItemGenerico>();
                lstBuyback = (new BLGeneral()).ListarComboBuyback();
                ddlBuyBackIphone.DataSource = lstBuyback.ToList();
                ddlBuyBackIphone.DataValueField = "Codigo";
                ddlBuyBackIphone.DataTextField = "Descripcion";
                //Data Bind Busqueda
                ddlBuyBackIphone.DataBind();
                ddlBuyBackIphone.Items.Insert(0, new ListItem(ConfigurationManager.AppSettings["constTextoSELECCIONE"], string.Empty));
                ddlBuyBackIphone.SelectedValue = string.Empty;
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Resultado OK][ListaComboBuyback][] ", lstBuyback.Count), null, null);
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[error][ListaComboBuyback]", null, ex);
            }
        }
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod ValidarBuyback(string strIMEI, string strcupon)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strIMEI, strcupon, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            string mensajebuyback=string.Empty;
            int codigo=0;
            int sec=0;

            try
            {
                (new BLGeneral()).ValidarBuyback(strIMEI,strcupon,ref sec,ref codigo,ref mensajebuyback);

                switch (codigo)
                {
                    case 0:
                    mensajebuyback="OK";
                    break;
                    case 1:
                    mensajebuyback = String.Format(ReadKeySettings.Key_CuponSecAprobado,sec);
                    break;
                    case 2:
                    mensajebuyback = ReadKeySettings.Key_CuponExpirado;
                    break;
                    case 3:
                    mensajebuyback = ReadKeySettings.Key_CuponConSecPendPago;
                    break;
                    case 4:
                    mensajebuyback = ReadKeySettings.Key_CuponConSecPagado;
                    break;
                }


                objLog.CrearArchivolog("[PROY 140736][strIMEI]", strIMEI, null);
                objLog.CrearArchivolog("[PROY 140736][strcupon]", strcupon, null);
                objLog.CrearArchivolog("[PROY 140736][codigo]", codigo, null);
                objLog.CrearArchivolog("[PROY 140736][mensajebuyback]", mensajebuyback, null);

                objResponse.Tipo = codigo.ToString();
                objResponse.Mensaje = mensajebuyback;
                objResponse.TipoDoc = sec.ToString();
                return objResponse;
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[PROY 140736[ERROR]", ex.Message, null);
                objResponse.CodigoError = "-1";
                
            }


            return objResponse;
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod EliminarBuybackEvalAnt(string sec,string nrodoc)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, sec, nrodoc, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            string constCodEvaluadorPDV = ConfigurationManager.AppSettings["constCodEvaluadorPDV"];

            string mensajebuyback = string.Empty;
            int codigo = 0;


            try
            {
                (new BLGeneral()).EliminarBuybackEvalAnt(sec, CurrentUsers, constCodEvaluadorPDV, nrodoc, ref codigo, ref mensajebuyback);

                objLog.CrearArchivolog("[PROY 140736][sec]", sec, null);
                objLog.CrearArchivolog("[PROY 140736][CurrentUsers]", CurrentUsers, null);
                objLog.CrearArchivolog("[PROY 140736][constCodEvaluadorPDV]", constCodEvaluadorPDV, null);
                objLog.CrearArchivolog("[PROY 140736][nrodoc]", nrodoc, null);
                objLog.CrearArchivolog("[PROY 140736][codigo]", codigo, null);
                objLog.CrearArchivolog("[PROY 140736][mensajebuyback]", mensajebuyback, null);

                objResponse.Tipo = codigo.ToString();
                objResponse.Mensaje = mensajebuyback;
                return objResponse;
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[PROY 140736[ERROR]", ex.Message, null);
                objResponse.CodigoError = "-1";

            }


            return objResponse;
        }







        //FIN PROY 140736

        //FIN INC000003048070 

        //PROY-140223 IDEA-140462
        public void Cargar_flag_sin_CP()
        {
            hidConsFlagConsultaPreviaChip.Value = Comun.AppSettings.consFlagConsultaPreviaChip;
            hidConsCPModVenta.Value = Comun.AppSettings.consCPModdalidadVenta;
            hidConsCPCanalVenta.Value = Comun.AppSettings.consCPCanalVenta;
            hidConsCPPuntoVenta.Value = Comun.AppSettings.consCPPuntoVenta;
        }
        //PROY-140223 IDEA-140462
        public void CargarParametrosProteccionMovil() //PROY-24724-IDEA-28174 - INICIO
        {
            GeneradorLog objLog = CrearLog(hidUsuarioRed.Value.ToString());
            objLog.CrearArchivolog("[Inicio][CargarParametrosProteccionMovil]", null, null);
            string strCodGrupoParamProteccionMovil = Funciones.CheckStr(ConfigurationManager.AppSettings["consCodGrupoParamProteccionMovil"]);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][ListaParametrosGrupo][strCodGrupoParamProteccionMovil] ", strCodGrupoParamProteccionMovil), null, null);
            if (!string.IsNullOrEmpty(strCodGrupoParamProteccionMovil))
                lstBEParametroProteccionMovil = (new BLGeneral()).ListaParametrosGrupo(Funciones.CheckInt64(strCodGrupoParamProteccionMovil));
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Resultado OK][ListaParametrosGrupo][lstBEParametroProteccionMovil.Count] ", lstBEParametroProteccionMovil.Count), null, null);

            if (lstBEParametroProteccionMovil.Count > 0) lstBEParametroProteccionMovil = lstBEParametroProteccionMovil.OrderBy(p => p.Valor1).ToList();
            if (Session["ListaParametrosPM"] == null) Session["ListaParametrosPM"] = lstBEParametroProteccionMovil;

            strCodServProteccionMovil = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "1").SingleOrDefault().Valor;
            strDescServProteccionMovil = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "2").SingleOrDefault().Valor;
            strCodEstadoGuardarPrima = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "3").SingleOrDefault().Valor;

            hidCodServProteccionMovil.Value = strCodServProteccionMovil;
            hidDescServProteccionMovil.Value = strDescServProteccionMovil;
            hidConcatCodTipoPdvProteccionMovil.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "6").SingleOrDefault().Valor;
            hidConcatCodTipoOfertaProteccionMovil.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "7").SingleOrDefault().Valor;
            hidConcatCodTipoModalidadVentaProteccionMovil.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "8").SingleOrDefault().Valor;
            hidCodListaPrecioPrepagoMes.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "11").SingleOrDefault().Valor;
            hidMontoPrecioPrepago.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "12").SingleOrDefault().Valor;
            hidMsgEquipoSinCobertura.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "34").SingleOrDefault().Valor;
            hidMsgEquipoPrecioPrepagoMenor.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "35").SingleOrDefault().Valor;
            hidMsgErrorProcedurePrecioPrepago.Value = lstBEParametroProteccionMovil.Where(p => p.Valor1 == "36").SingleOrDefault().Valor;
        } //PROY-24724-IDEA-28174 - FIN


        public void CargarParametrosEvaluacionProactiva() //PROY-36928-IDEA-28174 - INICIO
        {
            GeneradorLog objLog = CrearLog(hidUsuarioRed.Value.ToString());
            objLog.CrearArchivolog("[Inicio][CargarParametrosEvaluacionProactiva]", null, null);
            string strCodGrupoParamEvaluacionProactiva = Funciones.CheckStr(ConfigurationManager.AppSettings["consCodGrupoParamEvaluacionProactiva"]);
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Inicio][ListaParametrosGrupo][strCodGrupoParamEvaluacionProactiva] ", strCodGrupoParamEvaluacionProactiva), null, null);
            if (!string.IsNullOrEmpty(strCodGrupoParamEvaluacionProactiva))
                lstBEEvaluacionProactiva = (new BLGeneral()).ListaParametrosGrupo(Funciones.CheckInt64(strCodGrupoParamEvaluacionProactiva));
            objLog.CrearArchivolog(string.Format("{0}{1}", "[Resultado OK][ListaParametrosGrupo][lstBEEvaluacionProactiva.Count] ", lstBEEvaluacionProactiva.Count), null, null);

            if (lstBEEvaluacionProactiva.Count > 0) lstBEEvaluacionProactiva = lstBEEvaluacionProactiva.OrderBy(p => p.Valor1).ToList();
            if (Session["ListaParametrosEP"] == null) Session["ListaParametrosEP"] = lstBEEvaluacionProactiva;

            hidFlagPlanesProactivos.Value = lstBEEvaluacionProactiva.Where(p => p.Valor1 == "ConstFlagPlanesProactivos").SingleOrDefault().Valor;
            hidMsgEquipoNoPlanesProac.Value = lstBEEvaluacionProactiva.Where(p => p.Valor1 == "constMsjEquipoNoPlanesProac").SingleOrDefault().Valor;//PROY 30748 F2 FALLA MDE
        } //PROY-36928-IDEA-28174 - FIN


        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarPromocionPortabilidad2x1(string nroDocumento, string strCadenaConsultaPrevia, string strDetalleCarrito, string modalidadVenta, string strDetalleCarritoCP)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            objLog.CrearArchivolog("[Ininio][ValidarPromocionPortabilidad2x1][strCadenaConsultaPrevia]", strCadenaConsultaPrevia, null);
            objLog.CrearArchivolog("[Ininio][ValidarPromocionPortabilidad2x1][strDetalleCarrito]", strDetalleCarrito, null);
            objLog.CrearArchivolog("[Ininio][ValidarPromocionPortabilidad2x1][modalidadVenta]", modalidadVenta, null);
            objLog.CrearArchivolog("[Ininio][ValidarPromocionPortabilidad2x1][consflagVigenciaPromo2x1]", Comun.AppSettings.consflagVigenciaPromo2x1, null);
            if ((!string.IsNullOrEmpty(Comun.AppSettings.consflagVigenciaPromo2x1) && Comun.AppSettings.consflagVigenciaPromo2x1 == "1") && ConfigurationManager.AppSettings["constCodModalidadChipSuelto"] != modalidadVenta)
            {
                objLog.CrearArchivolog("[Parametros][ValidarPromocionPortabilidad2x1][consConfiguracionPromo2x1]", Comun.AppSettings.consConfiguracionPromo2x1, null);
                objLog.CrearArchivolog("[Parametros][ValidarPromocionPortabilidad2x1_rs_02][listMaterialesPromoPorta.Count()]", Comun.AppSettings.listMaterialesPromoPorta.Count(), null);
                //INI PROY 2X1 RS_3

                string str_codigo = "";
                string str_mensaje = "";
                try
                {
                    bool rptaValidaVentaPYLC = BLPortabilidad.VigenciaPYLC_PosPago(nroDocumento, Convert.ToInt64(ConfigurationManager.AppSettings["codigoParamPromocionPorta2x1"]), out str_codigo, out str_mensaje);
                    objLog.CrearArchivolog("[PYLC][INICIO]GrabarPortabilidad:[BLPortabilidad.VigenciaPYLC_Prepago][EjecucionExitosa] rptaValidaVentaPYLC = ", rptaValidaVentaPYLC, null);
                    objLog.CrearArchivolog("[PYLC]GrabarPortabilidad:[BLPortabilidad.VigenciaPYLC_Prepago] str_codigo|str_mensaje = ", str_codigo + "|" + str_mensaje, null);
                    if (!str_codigo.Equals("0"))
                    {
                        objResponse.CodigoError = str_codigo;
                        objResponse.DescripcionError = str_mensaje;
                        return objResponse;
                    }

                }
                catch (Exception ex)
                {
                    objResponse.CodigoError = "1";
                    objResponse.DescripcionError = ex.Message.ToString();
                }
                objLog.CrearArchivolog("[PYLC]FIN]GrabarPortabilidad:[BLPortabilidad.VigenciaPYLC_Prepago]", "***************************", null);
                //FIN PROY 2X1 RS_R
                StringBuilder sblCadena = new StringBuilder();

                if (!string.IsNullOrEmpty(strDetalleCarritoCP))
                {
                    foreach (string items in strDetalleCarritoCP.Split('|').Where(w => !string.IsNullOrEmpty(w)).ToList())
                    {
                        string[] arrCadena = items.Split(';');
                        string strCadena = string.Format("{0};{1};{2};{3};{4};{5};{6}", arrCadena[15], arrCadena[1], arrCadena[36], arrCadena[9], "", arrCadena[30], arrCadena[17]);
                        if (sblCadena.Length > 0)
                        {
                            sblCadena.AppendFormat("|{0}", strCadena);
                        }
                        else
                        {
                            sblCadena.AppendFormat("{0}", strCadena);
                        }
                    }
                    strDetalleCarrito = sblCadena.ToString();
                }

                List<string> listDetalleCarrito = strDetalleCarrito.Split('|').Where(w => !string.IsNullOrEmpty(w)).ToList();
                List<string> listConsulaPrevia = strCadenaConsultaPrevia.Split(';').ToList();
                List<string> listConfiguracionPromocion = Comun.AppSettings.consConfiguracionPromo2x1.Split('|').ToList();

                if (listDetalleCarrito.Where(w => listConfiguracionPromocion.Select(s => s.Split(';')[0]).Contains(w.Split(';')[0].ToString())).Count() > 0)
                {

                    if (listConsulaPrevia[1] == ConfigurationManager.AppSettings["ConstModalidadPortaPostpago"])
                    {
                        foreach (string item in listConfiguracionPromocion)
                        {
                            var _item = item.Split(';');
                            int cantLineas = Funciones.CheckInt(_item[2]);
                            string strCampPromoPorta = _item[0];
                            string strPlanPromoPorta = _item[1];
                            string strConfiguracion = string.Format("{0}|{1}", _item[0], _item[1]);

                            //if (listDetalleCarrito.Where(w => string.Format("{0}|{1}", w.Split(';')[0], w.Split(';')[3].Split('_')[0]) == strConfiguracion).Count() == cantLineas)
                            if (listDetalleCarrito.Where(w => w.Split(';')[0] == strCampPromoPorta).Count() == cantLineas)
                            {
                                if (listDetalleCarrito.Count == cantLineas)
                                {
                                    int countPlanes = listDetalleCarrito.Select(s => s.Split(';')[3].Split('_')[0]).GroupBy(g => g.ToString()).Count();
                                    if (countPlanes == 1)
                                    {
                                        //Validar Equipos x grupo 
                                        List<string> listDetalleEquipos = listDetalleCarrito.Select(q => q.Split(';')[6]).ToList();
                                        List<BEItemGenerico> listConfigEquipos = Comun.AppSettings.listMaterialesPromoPorta.ToList();
                                        var query = (from a in listConfigEquipos
                                                     join b in listDetalleEquipos on a.Descripcion equals b.ToString()
                                                     select new { GrupoMaterial = a.Codigo, CodigoMaterial = b.ToString() }).ToList();

                                        if (query.Count == cantLineas)
                                        {
                                            int counGruposMaterial = query.ToList().GroupBy(g => g.GrupoMaterial).Select(s => new { GrupoMaterial = s.ToString() }).Count();

                                            if (counGruposMaterial == 1)
                                            {
                                                objResponse.CodigoError = "0";
                                                break;
                                            }
                                            else
                                            {
                                                //Error grupos material
                                                objResponse.CodigoError = "1";
                                                objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorGrupoMaterial;
                                            }
                                        }
                                        else
                                        {
                                            //Error grupo materiales
                                            objResponse.CodigoError = "1";
                                            objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorGrupoMaterial;
                                        }
                                    }
                                    else
                                    {
                                        //Error planes
                                        objResponse.CodigoError = "1";
                                        objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorPlanes;
                                    }
                                }
                                else
                                {
                                    //Error cantidad de lineas
                                    objResponse.CodigoError = "1";
                                    objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorCantidadLineas;
                                }
                            }
                            else
                            {
                                //Validar configuracion
                                if (listDetalleCarrito.Count != cantLineas)
                                {
                                    //Error cantidades
                                    objResponse.CodigoError = "1";
                                    objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorCantidadLineas;
                                }
                                else if (listDetalleCarrito.Where(s => s.Split(';')[0] == strCampPromoPorta).Count() != cantLineas)
                                {
                                    //Error Campañas
                                    objResponse.CodigoError = "1";
                                    objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorCampanias;
                                }
                            }
                        }
                    }
                    else
                    {
                        //Error fuera alcance
                        objResponse.CodigoError = "1";
                        objResponse.DescripcionError = Comun.AppSettings.consPromoPortaErrorFueradeAlcance;
                    }
                }
                else
                {
                    objResponse.CodigoError = "0";
                }
            }
            else
            {
                objResponse.CodigoError = "0";
            }

            objLog.CrearArchivolog("[Fin][ValidarPromocionPortabilidad2x1][codigoRespuesta]", objResponse.CodigoError, null);
            objLog.CrearArchivolog("[Fin][ValidarPromocionPortabilidad2x1][MensajeRespuesta]", objResponse.DescripcionError, null);

            return objResponse;
        }

        //Inicio PROY-25335 -  Contratación Electronica - Release 0
        [WebMethod]
        public static string MostrarCheckCartaPoder(string canal)
        {

            Int64 Key_ContratacionElectronica = 0;
            string Key_canalesPermitidosCP = string.Empty;
            string result = string.Empty;

            Key_ContratacionElectronica = Funciones.CheckInt64(ConfigurationManager.AppSettings["Key_ContratacionElectronica"].ToString());
            List<BEParametro> listParametros = (new BLGeneral()).ListaParametrosGrupo(Funciones.CheckInt64(Key_ContratacionElectronica));
            if (listParametros != null && listParametros.Count() > 0)
            {
                Key_canalesPermitidosCP = listParametros
                 .Where(w => w.Valor1.Equals("Key_canalesPermitidosCP")).ToList().Count > 0 ?
                 Funciones.CheckStr(listParametros.Where(w => w.Valor1.Equals("Key_canalesPermitidosCP")).ToList()[0].Valor) : string.Empty;
            }

            if (Key_canalesPermitidosCP.IndexOf(canal) > -1) result = "1";
            else result = "0";

            return result;
        }
        //Fin PROY-25335 -  Contratación Electronica - Release 0

        //PROY-30748-INICIO
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod ActualizarGarantiaProactiva(int fila, string nroDocumento, string strDetallesItem, string autonomia, string CFPrevio, string strTipodecobro, string strMontoGarantia, string strMontoRA)
        {
            double dblNroGarantia = 0.0;
            double dblImporte = 0.0;
            GeneradorLog objLog = new GeneradorLog(null, null, null, "WEB");
            objLog.CrearArchivolog("[Inicio][ActualizarGarantiaProactiva]", null, null);
            objLog.CrearArchivolog("[strDetallesItem]: " + strDetallesItem, null, null);
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            double montoRA = 0.0;
            if (strMontoRA != ConfigurationManager.AppSettings["constTextoNoAprobadoAutonomia"].ToString() && strMontoRA != ConfigurationManager.AppSettings["constTextoNoAplicaCondiciones"].ToString())
                montoRA = Convert.ToDouble(strMontoRA);

            string[] arrDetallesItem = strDetallesItem.Split(';');
            try
            {
                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

                objCliente.oVistaEvaluacion.oGarantia[fila].CF = Funciones.CheckDbl(arrDetallesItem[23], 2);

                if (strTipodecobro == "REFERENCIAL")
                    dblImporte = Math.Round(
               (Funciones.CheckDbl(arrDetallesItem[20]) *
                Funciones.CheckDbl(objCliente.oVistaEvaluacion.oOfrecimiento[fila].MontoDeGarantia)) + montoRA);
                else
                    dblImporte =
                        objCliente.oVistaEvaluacion.oOfrecimiento[fila].MontoDeGarantia;

                if (objCliente.oVistaEvaluacion.oGarantia[fila].CF > 0)
                {
                    dblNroGarantia = Math.Round(dblImporte / objCliente.oVistaEvaluacion.oGarantia[fila].CF, 2);
                }

                objCliente.oVistaEvaluacion.oGarantia[fila].nroGarantia = dblNroGarantia;
                objCliente.oVistaEvaluacion.oGarantia[fila].importe = Funciones.CheckDbl(dblImporte, 2);



                objCliente.oVistaEvaluacion.oGarantia[fila].plan = Funciones.CheckStr(arrDetallesItem[11]);

                objLog.CrearArchivolog("[oVistaEvaluacion.cargoFijo Antes]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.cargoFijo), null, null);
                objLog.CrearArchivolog("[CFPrevio]:  " + CFPrevio, null, null);
                //objCliente.oVistaEvaluacion.cargoFijo = objCliente.oVistaEvaluacion.cargoFijo - Funciones.CheckDbl(CFPrevio) + Funciones.CheckDbl(arrDetallesItem[20],2);
                //EMMH R. I

                objCliente.oVistaEvaluacion.oGarantia[fila].nroGarantia = Funciones.CheckDbl(strMontoGarantia, 2);
                objCliente.oVistaEvaluacion.importeGarantia = Math.Round(Funciones.CheckDbl(montoRA, 2)); //cristhian Math.Round(Funciones.CheckDbl(strMontoRA,2 ) * Funciones.CheckDbl(strMontoGarantia, 2));
                objCliente.oVistaEvaluacion.oGarantia[fila].importe = Math.Round(Funciones.CheckDbl(montoRA, 2));//cristhian Math.Round(Funciones.CheckDbl(strMontoRA, 2) * Funciones.CheckDbl(strMontoGarantia, 2)); ;

                //objCliente.oVistaEvaluacion.cargoFijo = Funciones.CheckDbl(arrDetallesItem[23], 2);

                //INICIO PRO-30748 
                double dblimportegarantia = 0.0;
                objCliente.oVistaEvaluacion.cargoFijo = 0;
                foreach (BEGarantia obj in objCliente.oVistaEvaluacion.oGarantia)
                {
                    dblimportegarantia += obj.importe;
                    objCliente.oVistaEvaluacion.cargoFijo += obj.CF;
                }
                objCliente.oVistaEvaluacion.importeGarantia = Math.Round(dblimportegarantia, 2);

                objResponse.Mensaje = objCliente.oVistaEvaluacion.importeGarantia.ToString();
                //FIN
                //EMMH R. F


                string strc = Funciones.CheckStr(fila);
                objLog.CrearArchivolog("[CF][" + strc + "]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oGarantia[fila].CF), null, null);
                objLog.CrearArchivolog("[importe][" + strc + "]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oGarantia[fila].importe), null, null);
                objLog.CrearArchivolog("[plan][" + strc + "]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oGarantia[fila].plan), null, null);
                objLog.CrearArchivolog("[MontoDeGarantia][" + strc + "]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oOfrecimiento[fila].MontoDeGarantia), null, null);
                objLog.CrearArchivolog("[producto][" + strc + "]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oGarantia[fila].producto), null, null);
                objLog.CrearArchivolog("[oVistaEvaluacion.cargoFijo Despues]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.cargoFijo), null, null);
                //INC000002464679 INICIO
                // INC000002442213 - FALLA 
                objLog.CrearArchivolog("[INC000002442213][Proactiva][Validacion Fraude][Fila]" + Funciones.CheckStr(fila + 1), null, null);
                objLog.CrearArchivolog("[INC000002442213][Proactiva][Validacion Fraude][Cargo Fijo :antes]" + HttpContext.Current.Session["cargoFijoCuota" + Funciones.CheckStr(fila + 1)], null, null);
                HttpContext.Current.Session["cargoFijoCuota" + Funciones.CheckInt(fila + 1)] = Funciones.CheckDbl(objCliente.oVistaEvaluacion.oGarantia[fila].CF);
                objLog.CrearArchivolog("[INC000002442213][Proactiva][Validacion Fraude][Cargo Fijo :despues]" + HttpContext.Current.Session["cargoFijoCuota" + Funciones.CheckStr(fila + 1)], null, null);
                // INC000002442213 - FALLA
                //      objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_plan_solicitado = Funciones.CheckStr(arrDetallesItem[11]);
                //      objCliente.oVistaEvaluacion.oOfrecimiento[fila].CargoFijo =Funciones.CheckDbl(arrDetallesItem[23],2);

                string strEquipo = String.Empty;


                BECuota objcuota = new BECuota();
                BEPlanProactivo objBEPlanProactivo = new BEPlanProactivo();
                objBEPlanProactivo = (BEPlanProactivo)HttpContext.Current.Session["BEPlanProactivo"];
                var newList = objBEPlanProactivo.PlanBSSEval.Where(item => item.descripcion.ToUpper().Contains(arrDetallesItem[11].ToString()) && item.Equipo.Contains(arrDetallesItem[18].ToString())).ToList();//PROY 30748 F2 MDE

                objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_plan_solicitado = Funciones.CheckDbl(arrDetallesItem[23], 2) + "|" + Funciones.CheckStr(arrDetallesItem[11]) + "|" + "|";
                string strcostoequipo = "";
                objLog.CrearArchivolog("[PROY-140579 NEW LIST EQUIPO][Proactiva][ANTES]", null, null);
                foreach (BEPlanBSSEval obj in newList)
                {
                    objLog.CrearArchivolog("[PROY-140579 NEW LIST EQUIPO][Proactiva][DESPUES]", null, null);
                    if (arrDetallesItem[25].ToString() == "")
                        strcostoequipo = "0";
                    else
                        strcostoequipo = arrDetallesItem[25].ToString();

                    strEquipo += strcostoequipo + "|";
                    strEquipo += obj.Cuota.cuota.ToString() + "|";
                    if (Funciones.CheckDbl(obj.Cuota.cuota) > 0)
                        strEquipo += "CUOTAS|";
                    else
                        strEquipo += "CONTADO|";

                    strEquipo += "BAJO|";

                    strEquipo += Funciones.CheckStr(arrDetallesItem[18]) + "|";
                    if (Funciones.CheckDbl(obj.Cuota.cuota) > 0)
                    {
                        double montoCuotaInicial = (Funciones.CheckDbl(obj.PrecionVenta) * Funciones.CheckDbl(Math.Round(obj.Cuota.porcenCuotaInicial, 2)) / 100);//PROY 30748 F2 MDE
                        strEquipo += Funciones.CheckStr(Math.Round((Funciones.CheckDbl(obj.PrecionVenta) - Math.Round(montoCuotaInicial, 0)) / Funciones.CheckDbl(obj.Cuota.cuota), 2)) + "|";//PROY 30748 F2 MDE
                    }
                    else
                        strEquipo += "0|";

                    //PROY 30748 F2 INI MDE
                    if (Funciones.CheckDbl(obj.Cuota.cuota) > 0)
                    {
                        strEquipo += Funciones.CheckStr(Math.Round(obj.Cuota.porcenCuotaInicial, 2)) + "|";//MDE PORTA/DNI/VENTA EN CUOTA
                    }
                    else
                    {
                        strEquipo += "100|";
                    }
                    //PROY 30748 F2 FIN MDE
                    strEquipo += Funciones.CheckStr(obj.PrecionVenta) + "|";
                    strEquipo += "||"; //PROY-140579
                    //PROY 140579 montoDeCuotaComercial montoDeCuotaInicialComercial INICIO
                    string montoDeCuotaComercial = "0";
                    string montoDeCuotaInicialComercial = "0";

                    try
                    {
                        if (Funciones.CheckDbl(obj.Cuota.cuota) > 0)
                        {
                            string acuEquiposGarantiaProa = Funciones.CheckStr((String)HttpContext.Current.Session["objEquipoGarantiaProa"]);
                            HelperLog.EscribirLog("[PROY-140579]", "[PROY-140579 EQUIPO GARANTIA PROA SESSION] - ", Funciones.CheckStr(acuEquiposGarantiaProa), false);
                            if (!(Funciones.CheckStr(acuEquiposGarantiaProa)).Equals(string.Empty))
                            {
                                string[] arrEquipos = acuEquiposGarantiaProa.Split('_');

                                for (int i = 1; i < arrEquipos.Length; i++)
                                {
                                    string[] arrEquipo = arrEquipos[i].Split('|');

                                    for (int a = 1; a < arrEquipo.Length; a++)
                                    {
                                        if (Funciones.CheckStr(arrEquipo[a][0]) == Funciones.CheckStr(arrDetallesItem[18]))
                                        {
                                            HelperLog.EscribirLog("[PROY-140579]", "PROY-140579 [EQUIPO GARANTIA PROA] - ", Funciones.CheckStr(arrEquipo[a][0]) + "|" + Funciones.CheckStr(arrEquipo[a][1]) + "|" + Funciones.CheckStr(arrEquipo[a][2]) + "_", false);
                                            montoDeCuotaComercial = Funciones.CheckStr(arrEquipo[a][1]);//PROY 140579 montoDeCuotaComercial
                                            montoDeCuotaInicialComercial = Funciones.CheckStr(arrEquipo[a][2]);//PROY 140579 montoDeCuotaInicialComercial
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        HelperLog.EscribirLog("[PROY-140579]", "[ERROR PROY-140579 EQUIPO GARANTIA PROA] - ", ex.Message.ToString(), false);
                    }

                    strEquipo += montoDeCuotaComercial + "|";//PROY 140579 montoDeCuotaComercial
                    strEquipo += montoDeCuotaInicialComercial + "_";//PROY 140579 montoDeCuotaInicialComercial
                    objLog.CrearArchivolog("[PROY-140579 - IN_EQUIPO_PROACT][strEquipo]:  " + Funciones.CheckStr(strEquipo), null, null);
                    //PROY 140579 montoDeCuotaComercial montoDeCuotaInicialComercial FIN

                    string[] arrOferta = objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_oferta.Split('|');
                    arrOferta[arrOferta.Count() - 2] = Funciones.CheckStr(objCliente.oVistaEvaluacion.cargoFijo);//PROY-140335 RF1 
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_oferta = string.Join("|", arrOferta);
                    //APOYO-PROY-30748-INICIO
                    string[] strCodServAdicionales = newList[0].ServiciosAdicionales.Split('_');
                    string strTopeConsumoNuevo = ConfigurationManager.AppSettings["ConstTextSinTopeConsumo"].ToString();

                    for (int i = 0; i < strCodServAdicionales.Count(); i++)
                    {
                        if (i % 2 == 0)
                        {
                            if (strCodServAdicionales[i] == ConfigurationManager.AppSettings["constCodTopeCeroServicio"].ToString())
                            {
                                strTopeConsumoNuevo = "TOPE DE CONSUMO CERO";
                            }
                            if (strCodServAdicionales[i] == ConfigurationManager.AppSettings["constCodTopeSinCFServicio"].ToString())
                            {
                                strTopeConsumoNuevo = "TOPE DE CONSUMO SIN CF";
                            }
                            if (strCodServAdicionales[i] == ConfigurationManager.AppSettings["constCodTopeAutomatico"].ToString())
                            {
                                strTopeConsumoNuevo = "TOPE DE CONSUMO AUTOMATICO";
                            }
                        }
                    }

                    objLog.CrearArchivolog("[LOG_PROY30748][strTopeConsumoNuevo]:  " + Funciones.CheckStr(strTopeConsumoNuevo), null, null);

                    string[] arreOfertaModificarCliente = objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_oferta.Split('|');
                    string strOfertaSetear = string.Empty;
                    arreOfertaModificarCliente[2] = strTopeConsumoNuevo;

                    for (int i = 0; i < arreOfertaModificarCliente.Count(); i++)
                    {
                        strOfertaSetear = strOfertaSetear + arreOfertaModificarCliente[i].Trim() + '|';
                    }
                    int intPosPenultima = strOfertaSetear.Length - 1;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_oferta = strOfertaSetear.Substring(0, intPosPenultima);

                    objLog.CrearArchivolog("[LOG_PROY30748][objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_oferta(ACTULIZADO)]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_oferta), null, null);
                    //APOYO-PROY-30748-FIN



                    objLog.CrearArchivolog("[LOG_PROY140579][objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_equipo(ACTULIZADO)]:  " + Funciones.CheckStr(objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_equipo), null, null);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].In_equipo = strEquipo;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].CantidadDeLineasAdicionalesRUC = Funciones.CheckInt(obj.cantidadDeLineasAdicionalesRUC);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].CantidadDeLineasMaximas = Funciones.CheckInt(obj.cantidadDeLineasMaximas);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].CapacidadDePago = obj.capacidadDePago.ToString();
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].Plan = obj.descripcion;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].FactorDeEndeudamientoCliente = Funciones.CheckDbl(obj.factorDeEndeudamientoCliente);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].FactorDeRenovacionCliente = Funciones.CheckDbl(obj.factorDeRenovacionCliente);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].MontoDeGarantia = obj.montoDeGarantia;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].PrecioDeVentaTotalEquipos = obj.precioDeVentaTotalEquipos;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].ProcesoIDValidator = obj.procesoIDValidator;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].Restriccion = obj.restriccion;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].RiesgoTotalEquipo = Funciones.CheckInt(obj.riesgoTotalEquipo);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].Tipodecobro = obj.tipodecobro;
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].CargoFijo = Funciones.CheckDbl(obj.cargoFijo, 2);
                    objCliente.oVistaEvaluacion.oOfrecimiento[fila].CostoTotalEquipos = obj.CostoEquipo;//PROY 30748 F2 MDE

                }
                //INC000002464679 FIN 
                //fin del bloque
                // Inicio INC000002428826

                string strfilacambio = strDetallesItem.Split(';')[0];

                string strAutonomia1 = "";
                objLog.CrearArchivolog("[Validacion Fraude][objCliente.oVistaEvaluacion.planAutonomia]" + objCliente.oVistaEvaluacion.planAutonomia, null, null);
                objLog.CrearArchivolog("[Validacion Fraude][autonomia]" + autonomia, null, null);
                string[] arrAutonomia = objCliente.oVistaEvaluacion.planAutonomia.Split('|');

                objLog.CrearArchivolog("[Validacion Fraude][arrAutonomia 0]" + arrAutonomia, null, null);
                for (var i = 0; i <= arrAutonomia.Length - 1; i++)
                {
                    objLog.CrearArchivolog("[Validacion Fraude][i:]" + i, null, null);
                    if (arrAutonomia[i] != "")
                    {
                        {
                            objLog.CrearArchivolog("[Validacion Fraude][strfilacambio]" + strfilacambio, null, null);
                            objLog.CrearArchivolog("[Validacion Fraude][FOR1]" + autonomia, null, null);

                            if (arrAutonomia[i].Split(';')[0] == strfilacambio)
                            {
                                objLog.CrearArchivolog("[Validacion Fraude][FOR2]" + autonomia, null, null);
                                strAutonomia1 += arrAutonomia[i].Split(';')[0] + ";" + autonomia + ";" + arrAutonomia[i].Split(';')[2] + "|";
                            }
                            else
                            {
                                objLog.CrearArchivolog("[Validacion Fraude][FOR3]" + autonomia, null, null);
                                strAutonomia1 += arrAutonomia[i].Split(';')[0] + ";" + arrAutonomia[i].Split(';')[1] + ";" + arrAutonomia[i].Split(';')[2] + "|";
                            }
                        }
                    }
                }

                if (strAutonomia1.Length > 0)
                {
                    strAutonomia1 = strAutonomia1.Substring(0, strAutonomia1.Length - 1);
                }
                objLog.CrearArchivolog("[Validacion Fraude][strAutonomia1]" + strAutonomia1, null, null);
                objCliente.oVistaEvaluacion.planAutonomia = strAutonomia1;   // INC000002428826 

                HttpContext.Current.Session["objCliente" + nroDocumento] = objCliente;

                objResponse.Boleano = true;
                objResponse.Cadena = autonomia;
                objLog.CrearArchivolog("[Fin][ActualizarGarantiaProactiva]", null, null);

            }
            // fin INC000002428826
            catch (Exception ex)
            {
                objResponse.Boleano = false;
                objLog.CrearArchivolog("[ERROR][ActualizarGarantiaProactiva]", null, ex);
            }
            return objResponse;
        }
        //PROY-30748-FIN

        //INICIO|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
        public static string ConsultarEmailBoletaElectronica(String strTipoDocumento, String strNumDocumento, out List<BEClienteSAP> lstEmailHistorico)
        {
            var strRptEmail = String.Empty;
            lstEmailHistorico = new List<BEClienteSAP>();
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strNumDocumento, null, "WEB");

            try
            {
                if (strTipoDocumento != null && strNumDocumento != null) //RGP VALIDACION PP|INI
                {
                    var strCodRpta = String.Empty;
                    var strMsgRpta = String.Empty;
                    var strRptaHist = String.Empty;

                    objLog.CrearArchivolog("INICIO|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica", "", null);

                    objLog.CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|INPUT", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|TIPO DOCUMENTO: " + Funciones.CheckStr(strTipoDocumento), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|NUMERO DOCUMENTO: " + Funciones.CheckStr(strNumDocumento), "", null);

                    var objCliente = BLSincronizaSap.ConsultaCliente(strTipoDocumento, strNumDocumento, out strCodRpta, out strMsgRpta);

                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|OUTPUT", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|CODIGO RESPUESTA: " + Funciones.CheckStr(strCodRpta), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|MENSAJE RESPUESTA: " + Funciones.CheckStr(strMsgRpta), "", null);


                    if (objCliente != null && objCliente.EmailFact != " ")
                    {
                        strRptEmail = objCliente.EmailFact;
                    }

                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente|EMAIL FACTURACION: " + Funciones.CheckStr(strRptEmail), "", null);
                    objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCliente", "", null);


                    objLog.CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCorreoHistorico", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCorreoHistorico|INPUT: ", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCorreoHistorico|TIPO DOCUMENTO: " + Funciones.CheckStr(strTipoDocumento), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCorreoHistorico|NUMERO DOCUMENTO: " + Funciones.CheckStr(strNumDocumento), "", null);

                    lstEmailHistorico = BLSolicitud.ConsultaCorreoHistorico(strTipoDocumento, strNumDocumento, out strRptaHist);

                    objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|ConsultaCorreoHistorico", "", null);
                }//RGP VALIDACION PP|FIN
            }
            catch (Exception ex)
            {
                strRptEmail = "";
                objLog.CrearArchivolog("ERROR|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|MENSAJE DE ERROR: " + Funciones.CheckStr(ex.Message) + " | " + Funciones.CheckStr(ex.StackTrace), "", null);
            }

            objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica|VALORES DE RETORNO: " + Funciones.CheckStr(strRptEmail), "", null);

            objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ConsultarEmailBoletaElectronica", "", null);

            return strRptEmail;
        }

        public static string ActualizarCorreoFacturacion(BEClienteSAP objCliente)
        {
            var strRpta = String.Empty;
            var strUsuario = String.Empty;
            var strComentario = String.Empty;
            var strEmailFacturacion = String.Empty;
            BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
            strUsuario = Funciones.CheckStr(objUsuario.idUsuarioSisact);
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strUsuario, null, "WEB");

            try
            {
                objLog.CrearArchivolog("INICIO|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion", "", null);

                var lstBEParametro = new List<BEParametro>();

                objLog.CrearArchivolog("INICIO|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|KEY ", "", null);
                string strCodGrupoParamBoletaElectronica = Funciones.CheckStr(ConfigurationManager.AppSettings["Key_ParanGrupo_BoletaElectronica"]);
                if (!string.IsNullOrEmpty(strCodGrupoParamBoletaElectronica))
                    lstBEParametro = (new BLGeneral()).ListaParametrosGrupo(Funciones.CheckInt64(strCodGrupoParamBoletaElectronica));

                strComentario = Funciones.CheckStr(lstBEParametro.Where(p => p.Valor1 == "Key_Comentario_Actualizacion").SingleOrDefault().Valor);

                strEmailFacturacion = Funciones.CheckStr(objCliente.EmailFact);

                if (strEmailFacturacion != "")
                {
                    objLog.CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|INPUT", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|COMENTARIO: " + Funciones.CheckStr(strComentario), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|TIPO DOCUMENTO: " + Funciones.CheckStr(objCliente.TipoDocCliente), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|NUMERO DOCUMENTO: " + Funciones.CheckStr(objCliente.Cliente), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|NOMBRES DEL CLIENTE: " + Funciones.CheckStr(objCliente.Nombre), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|APELLIDO PATERNO DEL CLIENTE: " + Funciones.CheckStr(objCliente.ApellidoPaterno), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|APELLIDO MATERNO DEL CLIENTE: " + Funciones.CheckStr(objCliente.ApellidoMaterno), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico|USUARIO: " + Funciones.CheckStr(objCliente.UsuarioCrea), "", null);

                    strRpta = BLSolicitud.ActualizarCorreoElectronico(objCliente, strUsuario, strComentario, out strRpta);

                    objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|ActualizarCorreoElectronico", "", null);
                }
                else
                {
                    strRpta = "0";
                }
            }
            catch (Exception ex)
            {
                strRpta = "0";
                objLog.CrearArchivolog("ERROR|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|MENSAJE DE ERROR: " + Funciones.CheckStr(ex.Message), "", null);
            }

            objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion|VALORES DE RETORNO: " + Funciones.CheckStr(strRpta), "", null);

            objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarCorreoFacturacion", "", null);

            return strRpta;
        }

        // PROY-140245 

        [System.Web.Services.WebMethod()]
        public static string ObtenerCantidadProductosPorCliente(string strCodTipoDocumento, string strNumDocumento, string strCodCasoEspecial)
        {
            GeneradorLog _objLog = new GeneradorLog(null, "Inicio metodo ObtenerCantidadProductosPorCliente", null, "log_ProyOfertaColabMovil");
            BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
            var strUsuario = Funciones.CheckStr(objUsuario.idUsuarioSisact);
            string strSession = "";
            _objLog.CrearArchivolog("[INICIO PROY 140245 ObtenerCantidadProductosPorCliente()]", "", null);

            string strResultadoTemp = string.Empty;
            if (HttpContext.Current.Session["ObtenerCantidadProductosPorCliente" + strNumDocumento] != null)
            {
                strSession = HttpContext.Current.Session["ObtenerCantidadProductosPorCliente" + strNumDocumento].ToString();
            }

            _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> INI-valor inicial  strResultadoTemp: " + strResultadoTemp.ToString(), "", null);

            if (strSession != null && strSession != string.Empty)
            {
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> INI-strResultadoTemp: " + strResultadoTemp.ToString(), "", null);

                strResultadoTemp = HttpContext.Current.Session["ObtenerCantidadProductosPorCliente" + strNumDocumento].ToString();

                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> INI-strResultadoTemp2: " + strResultadoTemp.ToString(), "", null);

                if (!string.IsNullOrEmpty(strResultadoTemp))
                {
                    return strResultadoTemp;
                }
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> FIN-valor final de : strResultadoTemp" + strResultadoTemp.ToString(), "", null);
            }

            StringBuilder cadenaResultado;
            string strResultado = "";
            ValidarCantidadCampaniasRequest objValidarCantidadCampaniasRequest = null;
            ValidarCantidadCampaniasResponse objValidarCantidadCampaniasResponse = new ValidarCantidadCampaniasResponse();
            string codigoRespuestaServidor;
            string mensajeRespuestaServidor;
            try
            {
                objValidarCantidadCampaniasRequest = new ValidarCantidadCampaniasRequest();
                cadenaResultado = new StringBuilder();
                BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();
                Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();
                ValidarCantidadCampaniaRequest objValidarCantidadCampaniaRequest = new ValidarCantidadCampaniaRequest();
                BEAuditRequest objBEAuditRequest = new BEAuditRequest();
                RestValidarCantidadCampanias objRestValidarCantidadCampanias = new RestValidarCantidadCampanias();
                //--
                List<Cursor> cursorResultado = new List<Cursor>();


                objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_consumer"]);
                objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_country"]);
                objHeaderRequest.dispositivo = CurrentTerminal;
                objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_language"]);
                objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_modulo"]);
                objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_msgType"]);
                objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["operationContarCampanias"]);
                objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["constAplicacion"]);//system
                objHeaderRequest.timestamp = DateTime.Now.ToString("ddMMyyyy");
                objHeaderRequest.userId = "";
                objHeaderRequest.wsIp = ConfigurationManager.AppSettings["DAT_ValidarCantCampania_wsIp"];
                //objHeaderRequest.VarArg = "";

                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.consumer : " + objHeaderRequest.consumer.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.country : " + objHeaderRequest.country.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.dispositivo : " + objHeaderRequest.dispositivo.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.language : " + objHeaderRequest.language.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.modulo : " + objHeaderRequest.modulo.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.msgType : " + objHeaderRequest.msgType.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.operation : " + objHeaderRequest.operation.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.pid : " + objHeaderRequest.pid.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.system : " + objHeaderRequest.system.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.timestamp : " + objHeaderRequest.timestamp.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.userId : " + objHeaderRequest.userId.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> objHeaderRequest.wsIp : " + objHeaderRequest.wsIp.ToString(), "", null);

                objValidarCantidadCampaniasRequest.MessageRequest.header.HeaderRequest = objHeaderRequest;

                objBEAuditRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditRequest.ipAplicacion = CurrentTerminal;
                objBEAuditRequest.nombreAplicacion = ConfigurationManager.AppSettings["CodigoAplicacion"];
                objBEAuditRequest.usuarioAplicacion = CurrentUsers;

                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest = objValidarCantidadCampaniaRequest;
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.auditRequest = objBEAuditRequest;
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codTipoDocumento = strCodTipoDocumento;
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.numDocumento = strNumDocumento;
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codCasoEspecial = strCodCasoEspecial;
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codTipoOperacion = "01";
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codAplicativo = "1";
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codTipoProducto = "";
                objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.descTipoProducto = "";

                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->Parametros MessageRequest-body-validarCantidadCampaniaRequest: ", "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->CodigoTipoDocumento: " + objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codTipoDocumento.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->NumeroDocumento: " + objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.numDocumento.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->CodigoCasoEspecial: " + objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest.codCasoEspecial.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->Fin Parametros objValidarCantidadCampaniasRequest.MessageRequest.body.validarCantidadCampaniaRequest : ", "", null);

                objBEAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.ipApplication = ConfigurationManager.AppSettings["DAT_ConsultaNacionalidad_wsIp"];
                objBEAuditoriaRequest.usuarioAplicacion = HttpContext.Current.Session["CurrentUser"].ToString();
                objBEAuditoriaRequest.nameRegEdit = "";
                objBEAuditoriaRequest.applicationCodeWS = Funciones.CheckStr(ConfigurationManager.AppSettings["strCodAppConsultaClavesWS"]);
                objBEAuditoriaRequest.userId = HttpContext.Current.Session["CurrentUser"].ToString();
                objBEAuditoriaRequest.idTransaccionNegocio = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.applicationCode = Funciones.CheckStr(ConfigurationManager.AppSettings["strCodigoAplicacion"]);

                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->Parametros objBEAuditoriaRequest  ", "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.idTransaccion --> " + objBEAuditoriaRequest.idTransaccion.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.ipApplication --> " + objBEAuditoriaRequest.ipApplication.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.usuarioAplicacion --> " + objBEAuditoriaRequest.usuarioAplicacion.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.nameRegEdit -->  " + "", "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.applicationCodeWS -->  " + objBEAuditoriaRequest.applicationCodeWS.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.userId -->  " + objBEAuditoriaRequest.userId.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.idTransaccionNegocio -->  " + objBEAuditoriaRequest.idTransaccionNegocio.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] ->objBEAuditoriaRequest.applicationCode -->  " + objBEAuditoriaRequest.applicationCode.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> Fin Parametros objBEAuditoriaRequest  ", "", null);

                objValidarCantidadCampaniasResponse = objRestValidarCantidadCampanias.ValidarCantidadCampanias(objValidarCantidadCampaniasRequest, objBEAuditoriaRequest);


                cursorResultado = objValidarCantidadCampaniasResponse.MessageResponse.body.validarCantidadCampaniaResponse.listarCantMaxProducto.cursor;

                foreach (Cursor cursor in cursorResultado)
                {
                    cadenaResultado.Append(cursor.codProducto);
                    cadenaResultado.Append("|");
                    cadenaResultado.Append(cursor.cantMaxProducto);

                    cadenaResultado.Append("¬");
                }
                codigoRespuestaServidor = objValidarCantidadCampaniasResponse.MessageResponse.body.validarCantidadCampaniaResponse.auditResponse.codigoRespuesta.ToString();
                mensajeRespuestaServidor = objValidarCantidadCampaniasResponse.MessageResponse.body.validarCantidadCampaniaResponse.auditResponse.mensajeRespuesta.ToString();

                cadenaResultado.Append(codigoRespuestaServidor);
                cadenaResultado.Append(",");
                cadenaResultado.Append(mensajeRespuestaServidor);

                strResultado = cadenaResultado.ToString();
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> Codigo de Respuesta del  Servidor : " + codigoRespuestaServidor.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> Mensaje de mensaje Servidor : " + mensajeRespuestaServidor.ToString(), "", null);
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> cadenaFinalDeRespuesta : " + cadenaResultado.ToString(), "", null);
                HttpContext.Current.Session["ObtenerCantidadProductosPorCliente" + strNumDocumento] = strResultado;
                return strResultado;
            }
            catch (Exception ex)
            {
                cadenaResultado = new StringBuilder();
                cadenaResultado.Append("-1");
                cadenaResultado.Append("|");
                cadenaResultado.Append(ConfigurationManager.AppSettings["consMsjErrorGeneral"]);
                strResultado = cadenaResultado.ToString();
                _objLog.CrearArchivolog("[PROY 140245 ObtenerCantidadProductosPorCliente()] -> Error de Servicio : -->", null, ex);


                return strResultado;
            }

        }
        // FIN PROY-140245

        // PROY-140245
        [System.Web.Services.WebMethod()]
        public static bool validarAutogestionVenta(string dniCliente)
        {
            GeneradorLog _objLog = null;
            string strNumDocUsuario;
            bool blnAutogestion = false;

            try
            {
                _objLog = new GeneradorLog(null, "Metodo validarAutogestionVenta", null, "log_ProyOfertaColabMovil");
                _objLog.CrearArchivolog("PROY-140245-NumeroDocumentoCliente-->" + dniCliente.ToString(), null, null);
                strNumDocUsuario = HttpContext.Current.Session["numDocUsuario"].ToString();
                if (strNumDocUsuario.Trim().Equals(dniCliente.Trim()))
                {
                    blnAutogestion = true;
                }
                _objLog.CrearArchivolog("PROY-140245-NumeroDocumentoUsuario-->" + strNumDocUsuario, null, null);
                _objLog.CrearArchivolog("PROY-140245-ResultadoAutogestion-->" + blnAutogestion.ToString(), null, null);
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog("PROY-140245-VALIDAR AUTOGESTION", null, ex);
            }

            return blnAutogestion;
        }

        //FIN PROY-140245
        [System.Web.Services.WebMethod()]
        public static string CargarParametrosBoletaElectronica()
        {   //INICIO|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
            string alertas = "";
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "30162", null, "WEB");
            _objLog.CrearArchivolog("[INICIO PROY 30162  BOLETA CargarParametrosBoletaElectronica()]", "", null);
            _objLog.CrearArchivolog("[key Key_ParanGrupo_BoletaElectronica]" + ConfigurationManager.AppSettings["Key_ParanGrupo_BoletaElectronica"], "", null);
            string strCodGrupoParamBoletaElectronica = Funciones.CheckStr(ConfigurationManager.AppSettings["Key_ParanGrupo_BoletaElectronica"]);
            var lstBEParametro = new List<BEParametro>();

            if (!string.IsNullOrEmpty(strCodGrupoParamBoletaElectronica))
                lstBEParametro = (new BLGeneral()).ListaParametrosGrupo(Funciones.CheckInt64(strCodGrupoParamBoletaElectronica));

            _objLog.CrearArchivolog("[FIN PROY 30162  BOLETA CargarParametrosBoletaElectronica()]", "", null);
            var strMensajeConfirmacionCorreoVacio = Funciones.CheckStr(lstBEParametro.Where(p => p.Valor1 == "Key_Mensaje_No_Cuenta_ConCorreo").SingleOrDefault().Valor);
            alertas += strMensajeConfirmacionCorreoVacio + "|";

            var strMensajeConfirmacionCorreoVacioValidar = Funciones.CheckStr(lstBEParametro.Where(p => p.Valor1 == "Key_Mensaje_Correo_Confirmacion_Nulo").SingleOrDefault().Valor);
            alertas += strMensajeConfirmacionCorreoVacioValidar + "|";

            var strMensajeFormatoIncorrecto = Funciones.CheckStr(lstBEParametro.Where(p => p.Valor1 == "Key_Mensaje_Formato_Incorrecto").SingleOrDefault().Valor);
            alertas += strMensajeFormatoIncorrecto + "|";

            var strMensajeCorreosNoCoinciden = Funciones.CheckStr(lstBEParametro.Where(p => p.Valor1 == "Key_Mensaje_No_Hay_Coincidencia").SingleOrDefault().Valor);
            alertas += strMensajeCorreosNoCoinciden;


            return alertas;
            //FIN|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18
        }

        public bool ActualizarDatosCliente()
        {
            var blRpta = true;
            var objCliente = new BEClienteSAP();
            var BLSolicitud = new BLSolicitud();
            var strCodRpta = String.Empty;
            var strMsgRpta = String.Empty;

            BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
            var strUsuario = Funciones.CheckStr(objUsuario.idUsuarioSisact);
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strUsuario, null, "WEB");

            try
            {
                var strCodUsuario = hidUsuarioRed.Value;
                var strNombreCliente = Funciones.CheckStr(hidNombre.Value).ToUpper();
                var strAPaternoCliente = Funciones.CheckStr(hidApePaterno.Value).ToUpper();
                var strAMaternoCliente = Funciones.CheckStr(hidApeMaterno.Value).ToUpper();
                var strCodTipoDocumento = Funciones.Right(("00" + hidTipoDocumento.Value), 2);
                var strNroDocumento = Funciones.CheckStr(hidNroDocumento.Value);
                var strEmailFacturacion = Funciones.CheckStr(hdnEmailFacturaElectronica.Value);

                objLog.CrearArchivolog("INICIO|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente", "", null);

                objCliente = BLSincronizaSap.ConsultaCliente(strCodTipoDocumento, strNroDocumento, out strCodRpta, out strMsgRpta);

                if (objCliente == null)
                {
                    objCliente = new BEClienteSAP
                    {
                        TipoDocCliente = strCodTipoDocumento,
                        Cliente = strNroDocumento,
                        Nombre = strNombreCliente,
                        ApellidoPaterno = strAPaternoCliente,
                        ApellidoMaterno = strAMaternoCliente,
                        UsuarioCrea = strCodUsuario,
                        CliCodNacion = hidCodNacionalidad.Value, //INC000003442281
                        CliDescNacion = hidDesNacionalidad.Value //INC000003442281
                    };
                }
                else //INC000003442281
                {
                    if (string.IsNullOrEmpty(objCliente.CliCodNacion) || string.IsNullOrEmpty(objCliente.CliDescNacion)) //INC000003442281
                    {
                        objCliente.CliCodNacion = hidCodNacionalidad.Value; //INC000003442281
                        objCliente.CliDescNacion = hidDesNacionalidad.Value; // INC000003442281
                    }
                }

                objLog.CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente", "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|INPUT: ", "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|TIPO DOCUMENTO: " + Funciones.CheckStr(objCliente.TipoDocCliente), "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|NUMERO DOCUMENTO: " + Funciones.CheckStr(objCliente.Cliente), "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|NOMBRES DEL CLIENTE: " + Funciones.CheckStr(objCliente.Nombre), "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|APELLIDO PATERNO DEL CLIENTE: " + Funciones.CheckStr(objCliente.ApellidoPaterno), "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|APELLIDO MATERNO DEL CLIENTE: " + Funciones.CheckStr(objCliente.ApellidoMaterno), "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|CODIGO NACIONALIDAD DEL CLIENTE: " + Funciones.CheckStr(objCliente.CliCodNacion), "", null); //INC000003442281
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|DESCRIPCION NACIONALIDAD DEL CLIENTE: " + Funciones.CheckStr(objCliente.CliDescNacion), "", null); //INC000003442281
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|USUARIO: " + Funciones.CheckStr(objCliente.UsuarioCrea), "", null);

                var blRegistroCliente = BLSolicitud.RegistrarCliente(objCliente);

                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|OUTPUT: ", "", null);
                objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente|blRegistroCliente: " + Funciones.CheckStr(blRegistroCliente), "", null);
                objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|RegistrarCliente", "", null);

                if (strEmailFacturacion != "")
                {
                    objCliente.EmailFact = strEmailFacturacion;
                    objLog.CrearArchivolog("INI|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion", "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|TIPO DOCUMENTO: " + Funciones.CheckStr(objCliente.TipoDocCliente), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|NUMERO DOCUMENTO: " + Funciones.CheckStr(objCliente.Cliente), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|EMAIL FACTURACION: " + Funciones.CheckStr(objCliente.EmailFact), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|NOMBRES DEL CLIENTE: " + Funciones.CheckStr(objCliente.Nombre), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|APELLIDO PATERNO DEL CLIENTE: " + Funciones.CheckStr(objCliente.ApellidoPaterno), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|APELLIDO MATERNO DEL CLIENTE: " + Funciones.CheckStr(objCliente.ApellidoMaterno), "", null);
                    objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion|USUARIO: " + Funciones.CheckStr(objCliente.UsuarioCrea), "", null);
                    ActualizarCorreoFacturacion(objCliente);
                    objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|ActualizarCorreoFacturacion", "", null);
                }
            }
            catch (Exception ex)
            {
                blRpta = false;
                objLog.CrearArchivolog("ERROR|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|MENSAJE DE ERROR: " + Funciones.CheckStr(ex.Message), "", null);
            }

            objLog.CrearArchivolog("PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente|VALOR DE RETORNO: " + Funciones.CheckStr(blRpta), "", null);

            objLog.CrearArchivolog("FIN|PROY-30162-IDEA-32487 Envio Boleta Electronica Prepago|Metodo: ActualizarDatosCliente", "", null);

            return blRpta;
        }
        //FIN|PROY-30162-IDEA-32487 ENVIO BOLETA ELECTRONICA PREPAGO //RGP_BOL_18

        //IDEA-42590
        [WebMethod]
        public static BEResponseWebMethod ValidarPromocionBeneficioPortaCN(string strTipo, string listaTelefono, string codTipoProductoActual, string cadenaConsultaPrevia, string cadenaDetalleCarrito)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, listaTelefono, null, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            try
            {
                List<string> lstCadenaCP = cadenaConsultaPrevia.Split(';').ToList();
                string strTipoDocumento = Funciones.CheckStr(lstCadenaCP[2]);
                string strNroDocumento = Funciones.CheckStr(lstCadenaCP[3]);
                string flagPortabilidad = Funciones.CheckStr(lstCadenaCP[5]);

                objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList]", "INICIO", null);
                objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList][strCasoEspecial]", Comun.AppSettings.consBenefPortaCasoEspecialWhiteList, null);
                objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList][strTipoDocumento]", strTipoDocumento, null);
                objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList][strNroDocumento]", strNroDocumento, null);
                objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList][flagPortabilidad]", flagPortabilidad, null);

                if (string.IsNullOrEmpty(flagPortabilidad) || Funciones.CheckStr(flagPortabilidad) != "S")
                {
                    objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][strTipo]", strTipo, null);
                    objResponse.CodigoError = "0";
                    objResponse.DescripcionError = "OK";
                    return objResponse;
                }

                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][strTipo]", strTipo, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][listaTelefono]", listaTelefono, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][codTipoProductoActual]", codTipoProductoActual, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][cadenaConsultaPrevia]", cadenaConsultaPrevia, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][cadenaDetalleCarrito]", cadenaDetalleCarrito, null);

                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaDiasAntiguedad]", Comun.AppSettings.consBenefPortaDiasAntiguedad, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaCampanas]", Comun.AppSettings.consBenefPortaCampanas, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaMinLineas]", Comun.AppSettings.consBenefPortaMinLineas, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaMaxLineas]", Comun.AppSettings.consBenefPortaMaxLineas, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaMensajeError]", Comun.AppSettings.consBenefPortaMensajeError, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaCasoEspecialWhiteList]", Comun.AppSettings.consBenefPortaCasoEspecialWhiteList, null);
                objLog.CrearArchivolog("[INICIO][IDEA-42590][ValidarPromocionBeneficioPortaCN][consBenefPortaMensajeWhiteList]", Comun.AppSettings.consBenefPortaMensajeWhiteList, null);

                var arrCampanasDetalle = cadenaDetalleCarrito.Split('|').Where(w => !string.IsNullOrEmpty(w)).Select(s => s.ToString());

                if (arrCampanasDetalle.Where(q => Comun.AppSettings.consBenefPortaCampanas.IndexOf(q.Split(';')[0]) > -1).Count() > 0)
                {

                    objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][arrCampanasDetalle]", "SI SELECCIONO  CAMPANIA", null);

                    if (arrCampanasDetalle.Where(q => Comun.AppSettings.consBenefPortaCampanas.IndexOf(q.Split(';')[0]) > -1).Count() != arrCampanasDetalle.Count())
                    {
                        objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][arrCampanasDetalle]", "CAMPANIAS DIFERENTES", null);
                        objResponse.CodigoError = "-1";
                        objResponse.DescripcionError = Comun.AppSettings.consBenefPortaMensajeError;
                        return objResponse;
                    }

                    if (!(listaTelefono.Split('|').Where(w => !string.IsNullOrEmpty(w)).Count() >= Comun.AppSettings.consBenefPortaMinLineas && listaTelefono.Split('|').Where(w => !string.IsNullOrEmpty(w)).Count() <= Comun.AppSettings.consBenefPortaMaxLineas))
                    {
                        objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][listaTelefono]", "FUERA DEL MIN Y MAX", null);
                        objResponse.CodigoError = "-1";
                        objResponse.DescripcionError = Comun.AppSettings.consBenefPortaMensajeError;
                        return objResponse;
                    }

                    //INICIO WHITELIST CE
                    double dblCFMaximo = 0;

                    string blnWhitelistOK = new BLEvaluacion().ConsultarBlackListCE(Comun.AppSettings.consBenefPortaCasoEspecialWhiteList, strTipoDocumento, strNroDocumento, ref dblCFMaximo);

                    objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList][blnWhitelistOK]", blnWhitelistOK, null);

                    if (blnWhitelistOK == "S")
                    {
                        objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][ConsultarBlackListCE] SE ENCUENTRA EN EL WL ->", Funciones.CheckStr(blnWhitelistOK), null);
                        objResponse.CodigoError = "-1";
                        objResponse.DescripcionError = Comun.AppSettings.consBenefPortaMensajeWhiteList;
                        return objResponse;
                    }

                    objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][ConsultarBlackListCE] NO SE ENCUENTRA EN EL WL ->", Funciones.CheckStr(blnWhitelistOK), null);
                    objLog.CrearArchivolog("[VALIDACION][IDEA-42590][ValidarPromocionBeneficioPortaCN][Valida WhiteList]", "FIN", null);
                    //FIN WHITELIST CE

                }

                objResponse.CodigoError = "0";
                objResponse.DescripcionError = "OK";
                return objResponse;
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("[FIN][IDEA-42590][ValidarPromocionBeneficioPortaCN][ERROR]", ex.Message, null);
                objResponse.CodigoError = "-1";
                objResponse.DescripcionError = Comun.AppSettings.consBenefPortaMensajeError;
            }
            finally
            {
                objLog.CrearArchivolog("[FIN][IDEA-42590][ValidarPromocionBeneficioPortaCN][objResponse.CodigoError]", objResponse.CodigoError, null);
                objLog.CrearArchivolog("[FIN][IDEA-42590][ValidarPromocionBeneficioPortaCN][objResponse.DescripcionError]", objResponse.CodigoError, null);
            }

            return objResponse;


        }

        //PROY-32129 :: INI
        [System.Web.Services.WebMethod()]
        public static string obtenerListaInstituciones()
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, "Campaña Especial", null, "WEB");
            objLog.CrearArchivolog("[INICIO][PROY-32129][Inicio obtenerListaInstituciones]", "", null);
            string strResultado = "";
            List<BEItemGenerico> ListItem = new BLCasoEspecial().ListarInstituciones();

            foreach (BEItemGenerico objItem in ListItem)
            {
                strResultado = strResultado + "|" + objItem.Codigo + ";" + objItem.Descripcion;
            }
            objLog.CrearArchivolog("[Instituciones: ]", strResultado, null);
            objLog.CrearArchivolog("[FIN][PROY-32129][FIN obtenerListaInstituciones]", "", null);
            return strResultado;
        }

        [System.Web.Services.WebMethod()]
        public static string GrabarDatosAlumno(string strTipoDocumento, string strNroDocumento, Int64 strCodInstitucion, string strCodAlumno)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, strTipoDocumento, null, "WEB");
            objLog.CrearArchivolog("[INICIO][PROY-32129][GrabarDatosAlumno]", "", null);
            Int64 intCodResp = 0;
            string strMensResp = "";
            bool bolEstadoEjecucion;
            objLog.CrearArchivolog("[PROY-32129][IN strTipoDocumento: ] ", strTipoDocumento, null);
            objLog.CrearArchivolog("[PROY-32129][IN strNroDocumento: ] ", strNroDocumento, null);
            objLog.CrearArchivolog("[PROY-32129][IN strCodInstitucion: ] ", strCodInstitucion, null);
            objLog.CrearArchivolog("[PROY-32129][IN strCodAlumno: ] ", strCodAlumno, null);
            objLog.CrearArchivolog("[PROY-32129][IN CurrentUsers: ] ", CurrentUsers, null);
            bolEstadoEjecucion = new BLCasoEspecial().GrabarDatosAlumno(strTipoDocumento, strNroDocumento, strCodInstitucion, strCodAlumno, CurrentUsers, ref intCodResp, ref strMensResp);
            objLog.CrearArchivolog("[PROY-32129][OUT Codigo Respuesta: ] ", intCodResp, null);
            objLog.CrearArchivolog("[PROY-32129][OUT Mensaje Rpta: ] ", strMensResp, null);
            objLog.CrearArchivolog("[PROY-32129][BolEstadoEjecucion: ] ", bolEstadoEjecucion, null);
            objLog.CrearArchivolog("[FIN][PROY-32129][ValidarListadeInstituciones]", "", null);
            return intCodResp.ToString() + "|" + strMensResp;
        }

        [System.Web.Services.WebMethod()]
        public static string ObtenerCodigosCampEspecUniv()
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, "ObtenerCodigosCampEspecUniv", null, "WEB");
            objLog.CrearArchivolog("[INICIO][PROY-32129][ObtenerCodigosCampEspecUniv]", "", null);
            string strResultado = "";
            List<BEParametro> lstParamCampUniv = (new BLGeneral()).ListaParametrosGrupo(Funciones.CheckInt64(ConfigurationManager.AppSettings["consGrupoCasoEspecial"].ToString()));
            strResultado = lstParamCampUniv.Where(p => p.Valor1 == "2").SingleOrDefault().Valor;
            objLog.CrearArchivolog("[CampEspecUniv: ]", strResultado, null);
            objLog.CrearArchivolog("[FIN][PROY-32129][FIN ObtenerCodigosCampEspecUniv]", "", null);
            return strResultado;
        }

        //PROY-32129 :: FIN

        //PROY-29121-INI
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod consultaClaroRRLL(string strCadenaRepresentanteLegal, string strOficina, string strFechaNac)
        {

            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            //PROY-32439 INI MAS
            GeneradorLog objLog = new GeneradorLog("", "consultaClaroRRLL", null, "WEB");
            objLog.CrearArchivolog("[INICIO][PROY-32439][consultaClaroRRLL]", "", null);
            //PROY-32439 INI FIN
            try
            {

                BLConsumer objConsumer = new BLConsumer();
                BEItemMensaje objMensaje = null;
                BETipoDocumento objDocumento = null;
                int intComportamientoPago = 0;
                List<BETipoDocumento> objListaDocumento = (new BLGeneral()).ListarTipoDocumento();
                int intCPValorEspecial = Convert.ToInt32(ConfigurationManager.AppSettings["consCPValorEspecial"]);
                String strCadenaRespuesta = string.Empty;
                string strCumpleReglaA = string.Empty;

                if (strCadenaRepresentanteLegal.Trim() != "")
                {
                    //PROY-32439 INI MAS
                    HttpContext.Current.Session["intFlagRRLL"] = true;
                    //PROY-32439 FIN MAS
                    String[] arregloRepresentanteLegal = strCadenaRepresentanteLegal.Split('|');
                    foreach (String representantes in arregloRepresentanteLegal)
                    {
                        String[] arregloDatos = representantes.Split(';');
                        if (arregloDatos.Length > 0)
                        {
                            string strTipoDocumento = arregloDatos[0];
                            //PROY-29121 - FALLA INICIO
                            //if (arregloDatos[0].Length==1)
                            //{
                            //    strTipoDocumento = "0" + arregloDatos[0];
                            //}
                            //PROY-29121 - FALLA FIN
                            foreach (BETipoDocumento obj in objListaDocumento)
                            {
                                if (obj.ID_DC == strTipoDocumento)//PROY-29121 FALLA
                                {
                                    strTipoDocumento = obj.ID_SISACT;//PROY-29121 FALLA
                                    objDocumento = new BETipoDocumento();
                                    objDocumento = obj;
                                    objDocumento.ID_OAC = Funciones.CheckInt(strTipoDocumento).ToString();
                                    break;
                                }

                            }

                            //INI INICIATIVA-219
                            BLDatosCBIO objBLCbio = new BLDatosCBIO();
                            intComportamientoPago = objBLCbio.ObtenerComportamientoPago(strTipoDocumento, arregloDatos[1]);
                            //FIN INICIATIVA-219

                            objResponse.Tipo = (new BLConsumer()).ConsultaBlackListComisiones(strTipoDocumento, arregloDatos[1]);

                            if (objResponse.Tipo == "S" && intComportamientoPago != intCPValorEspecial)
                            {
                                objResponse.Error = true;
                                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjBlackListComisiones"].ToString();
                                return objResponse;
                            }

                            Int64 nroSEC = (new BLSolicitud()).ObtenerSECPendienteVentaSinPago(strTipoDocumento, arregloDatos[1]);
                            if (nroSEC > 0)
                            {
                                objResponse.Error = true;
                                objResponse.Mensaje = string.Format(ConfigurationManager.AppSettings["consMsjSecConVentaSinPago"].ToString(), nroSEC.ToString());
                                return objResponse;
                            }

                            objResponse = consultaDatosRRLL(strTipoDocumento, objDocumento.ID_DC, arregloDatos[1], strOficina, intComportamientoPago);//PROY-29121 FALLA
                            string strdDeuda = objResponse.Cadena.Split('#')[0];
                            strCadenaRespuesta = strCadenaRespuesta + objResponse.Cadena.Split('#')[2] + ';' + objResponse.Cadena.Split('#')[3] + '|';
                            strCumpleReglaA = objResponse.Cadena.Split('#')[4];

                            if (strCumpleReglaA == "NO")
                            {
                                objResponse.hidMensajeRRLL = objResponse.Cadena.Split('#')[3];
                                break;
                            }
                            else
                            {
                                objResponse.hidMensajeRRLL = string.Empty;
                            }
                            //PROY-32439 INI MAS
                            string strMensajeRRLL = objResponse.Cadena.Split('#')[5];
                            #region BRMS y Whitelist de RRLL
                            Boolean blnRRLLBRMS = false;
                            Boolean blnRRWhiteList = false;
                            if (!Object.Equals(HttpContext.Current.Session["blnRRLLBRMS"], null))
                            {
                                blnRRLLBRMS = (Boolean)HttpContext.Current.Session["blnRRLLBRMS"];
                            }
                            if (!Object.Equals(HttpContext.Current.Session["blnRRWhiteList"], null))
                            {
                                blnRRWhiteList = (Boolean)HttpContext.Current.Session["blnRRWhiteList"];
                            }
                            #endregion
                            if (!blnRRLLBRMS)
                            {
                                if (!blnRRWhiteList)
                                {
                                    objResponse.Error = true;
                                    objResponse.Mensaje = strMensajeRRLL;
                                    objLog.CrearArchivolog("[PROY-32439][strMensajeRRLL]", strMensajeRRLL, null);
                                    return objResponse;
                                }
                            }
                            //PROY-32439 FIN MAS
                        }
                    }
                }
                objResponse.hidCadenaSituacionRRLL = strCadenaRespuesta;
            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString();
                CrearLogStatic("nroDocumento").CrearArchivolog("[ERROR][consultaClaro]", null, ex);
            }
            return objResponse;
        }

        public static BEResponseWebMethod consultaDatosRRLL(string tipoDocumento, string tipodocumentoDC, string nroDocumento, string strOficina, int intComportamientoPago)//PROY-29121 FALLA
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            StringBuilder sbDatosRRLL = new StringBuilder();
            try
            {
                _objLog.CrearArchivolog("[Inicio][consultaDatosRRLL]", null, null);
                string fechaHoraConsulta = (new BLEvaluacion()).ObtenerFechaHoraBD(nroDocumento);
                BEUsuarioSession ojbUsuario = new BEUsuarioSession();
                ojbUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                BEClienteCuenta objCliente = (new BLDatosCliente()).ConsultarDatosCliente(CurrentTerminal, CurrentUsers, tipoDocumento, nroDocumento, intComportamientoPago, Comun.AppSettings.consAntiguedadDeuda, Comun.AppSettings.consFlagFlexibilidad, ojbUsuario, true);//PROY-29121 // PROY-26963 - GPRD - PROMFACT //PROY-32439

                if (objCliente.isBlackList && !objCliente.isWhiteList && intComportamientoPago != intCPValorEspecial)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjBlackListCreditos"].ToString();
                    return objResponse;
                }

                sbDatosRRLL.Append(objCliente.deudaCliente);
                sbDatosRRLL.Append("#");//0
                //PROY-32439 MAS INI
                sbDatosRRLL.Append(HttpContext.Current.Session["strSoloEvaluarFijo"]);//sbDatosRRLL.Append(objCliente.soloEvaluarFijo);
                //PROY-32439 MAS FIN
                sbDatosRRLL.Append("#");//1

                //PROY-29121 - FALLA INICIO
                //    string strTipoDocCliente = string.Empty;
                //    if (objCliente.tipoDoc.Substring(0, 1) == "0")
                //    {
                //        strTipoDocCliente = objCliente.tipoDoc.Substring(1);
                //    }
                //    else
                //{
                //        strTipoDocCliente = objCliente.tipoDoc;
                //}
                //PROY-29121 - FALLA FIN
                string strCadenaCliente = tipodocumentoDC + ";" + objCliente.nroDoc;//PROY-29121 - FALLA

                if (objCliente.deudaCliente == "SI")
                {
                    strCadenaCliente = strCadenaCliente + ";" + ConfigurationManager.AppSettings["constMensajeEstatusRRLLNOOK"];
                    sbDatosRRLL.Append(strCadenaCliente);
                    sbDatosRRLL.Append("#");//2
                }
                else if (objCliente.deudaCliente == "NO")
                {
                    strCadenaCliente = strCadenaCliente + ";" + ConfigurationManager.AppSettings["constMensajeEstatusRRLLOK"];
                    sbDatosRRLL.Append(strCadenaCliente);
                    sbDatosRRLL.Append("#");//2
                }

                string strMensajeCliente = string.Empty;
                if (objCliente.deudaVencida != 0 && objCliente.nroDiasDeuda != 0)
                {
                    strMensajeCliente = ConfigurationManager.AppSettings["constMensajeDeudaRRLL1"] + nroDocumento + ConfigurationManager.AppSettings["constMensajeDeudaRRLL2"] + objCliente.deudaVencida + ConfigurationManager.AppSettings["constMensajeDeudaRRLL3"] + objCliente.nroDiasDeuda;
                }
                else
                {
                    strMensajeCliente = string.Empty;
                }

                sbDatosRRLL.Append(strMensajeCliente);//3
                sbDatosRRLL.Append("#");
                sbDatosRRLL.Append(objCliente.cumpleReglaA);//4

                //PROY-32439 INI MAS
                sbDatosRRLL.Append("#");
                sbDatosRRLL.Append(objCliente.mensajeDeudaBloqueo);//5
                //PROY-32439 FIN MAS
                objResponse.Cadena = sbDatosRRLL.ToString();

                _objLog.CrearArchivolog("[Datos Cliente]", objCliente, null);


            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjConsultarDatosCliente"].ToString();
                _objLog.CrearArchivolog("[ERROR][consultaDatosRRLL]", null, ex);
            }
            finally
            {
                _objLog.CrearArchivolog("[Fin][consultaDatosRRLL]", null, null);
            }
            return objResponse;
        }
        //PROY-29121-FIN
        //APOYO-30748-INICIO
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ObtenerNuevosServiciosAdicionales(string strModalidadVenta, string strTipoProducto, string strPlan, string strCasoEspecial, string strFlagServicioRI)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            GeneradorLog objLog = new GeneradorLog("sisact_ifr_condiciones_venta", null, null, "WEB");
            objLog.CrearArchivolog("[Inicio][ObtenerServiciosAdicionales]", string.Empty, null);
            objLog.CrearArchivolog("strModalidadVenta", strModalidadVenta, null);
            objLog.CrearArchivolog("strTipoProducto", strTipoProducto, null);
            objLog.CrearArchivolog("strPlan", strPlan, null);
            objLog.CrearArchivolog("strCasoEspecial", strCasoEspecial, null);
            objLog.CrearArchivolog("strFlagServicioRI", strFlagServicioRI, null);

            try
            {
                List<BESecServicio_AP> objLista = new BLGeneral_II().ListarServiciosXPlan(strTipoProducto, strPlan);
                objLog.CrearArchivolog("objLista", Funciones.CheckStr(objLista.Count), null);
                List<BESecServicio_AP> objListaTopeConfig = new BLGeneral_II().ListarPlanTopeConfig(strPlan, strCasoEspecial);
                objLog.CrearArchivolog("objListaTopeConfig", Funciones.CheckStr(objListaTopeConfig.Count), null);

                StringBuilder sbServicioSI = new StringBuilder();
                StringBuilder sbServicioNO = new StringBuilder();

                foreach (BESecServicio_AP obj in objLista)
                {
                    foreach (BESecServicio_AP objTope in objListaTopeConfig)
                    {
                        if (obj.SERVV_CODIGO == objTope.SERVV_CODIGO)
                        {
                            obj.SELECCIONABLE_BASE = objTope.SELECCIONABLE_BASE;
                            break;
                        }
                    }

                    if (Funciones.CheckInt(obj.SELECCIONABLE_BASE) == (int)BESecServicio_AP.TIPO_SELECCION.SELECCIONADO || Funciones.CheckInt(obj.SELECCIONABLE_BASE) == (int)BESecServicio_AP.TIPO_SELECCION.SELECCIONADO_EDITABLE)
                    {
                        sbServicioSI.Append("|");
                        sbServicioSI.Append(obj.SERVN_ORDEN);
                        sbServicioSI.Append("_");
                        sbServicioSI.Append(obj.GSRVC_CODIGO);
                        sbServicioSI.Append("_");
                        sbServicioSI.Append(obj.SELECCIONABLE_BASE);
                        sbServicioSI.Append("_");
                        sbServicioSI.Append(obj.SERVV_CODIGO);
                        sbServicioSI.Append("_");
                        sbServicioSI.Append(obj.CARGO_FIJO_BASE);
                        sbServicioSI.Append("_"); //PROY-31812 - IDEA-43340
                        sbServicioSI.Append(obj.GSRVV_DESCRIPCION); //PROY-31812 - IDEA-43340
                        sbServicioSI.Append(";");
                        sbServicioSI.Append("(*) ");
                        sbServicioSI.Append(obj.SERVV_DESCRIPCION);

                    }
                    else
                    {
                        if (obj.SERVV_CODIGO != ConfigurationManager.AppSettings["codServRoamingI"] ||
                            (obj.SERVV_CODIGO == ConfigurationManager.AppSettings["codServRoamingI"] && strFlagServicioRI == ConfigurationManager.AppSettings["constFlagRIActivo"]))
                        {
                            sbServicioNO.Append("|");
                            sbServicioNO.Append(obj.SERVN_ORDEN);
                            sbServicioNO.Append("_");
                            sbServicioNO.Append(obj.GSRVC_CODIGO);
                            sbServicioNO.Append("_");
                            sbServicioNO.Append(obj.SELECCIONABLE_BASE);
                            sbServicioNO.Append("_");
                            sbServicioNO.Append(obj.SERVV_CODIGO);
                            sbServicioNO.Append("_");
                            sbServicioNO.Append(obj.CARGO_FIJO_BASE);
                            sbServicioNO.Append("_"); //PROY-31812 - IDEA-43340
                            sbServicioNO.Append(obj.GSRVV_DESCRIPCION); //PROY-31812 - IDEA-43340                        
                            sbServicioNO.Append(";");
                            sbServicioNO.Append(obj.SERVV_DESCRIPCION);
                        }
                    }
                }

                objLog.CrearArchivolog("sbServicioNO", Funciones.CheckStr(sbServicioNO.ToString()), null);
                objLog.CrearArchivolog("sbServicioSI", Funciones.CheckStr(sbServicioSI.ToString()), null);

                objResponse.Cadena = string.Format("{0}¬{1}", sbServicioNO.ToString(), sbServicioSI.ToString());
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("ObtenerServiciosAdicionales ERROR:", Funciones.CheckStr(ex.Message), null);
                //rspta= "ERROR|"+ex.Message;
                objResponse.Error = true;
            }
            return objResponse;
        }
        //APOYO-30748-FIN

        //INI: PROY-140223 IDEA-140462
        private void GrabarEnvioMesaPortabilidadSinCP(List<BENumeroPortabilidad> lstNumeroPortabilidad, GeneradorLog objLog)
        {

            string msjEnvioMesaPortaSinCP = "";

            int i = 0;
            foreach (BENumeroPortabilidad oSPort in lstNumeroPortabilidad)
            {
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".PORT_OPERADORCEDENTE: ]", oSPort.PORT_OPERADORCEDENTE), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".PORT_TIPO_DOCUMENTO: ]", oSPort.PORT_TIPO_DOCUMENTO), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".PORT_NUM_DOC: ]", oSPort.PORT_NUM_DOC), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".PORT_CANTIDAD_NUM: ]", oSPort.PORT_CANTIDAD_NUM), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".SOLIN_CODIGO: ]", oSPort.SOLIN_CODIGO), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".INICIO_RANGO: ]", oSPort.INICIO_RANGO), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".FINAL_RANGO: ]", oSPort.FINAL_RANGO), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".NOM_RASO_ABONAD: ]", oSPort.NOM_RASO_ABONAD), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".PORT_MODALIDAD: ]", oSPort.PORT_MODALIDAD), null, null);
                objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][in lstNumeroPortabilidad" + "[" + i + "]" + ".USUARIO_CREA: ]", oSPort.USUARIO_CREA), null, null);
                i++;
            }

            objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][out msjEnvioMesaPortaSinCP: ]", msjEnvioMesaPortaSinCP), null, null);

            BLPortabilidad.Envio_mesa_portabilidad_sin_cp(lstNumeroPortabilidad, ref msjEnvioMesaPortaSinCP);

            objLog.CrearArchivolog(string.Format("{0}{1}", "[Envio_mesa_portabilidad_sin_cp][RESPUESTA - out msjEnvioMesaPortaSinCP: ]", msjEnvioMesaPortaSinCP), null, null);


        }
        //FIN: PROY-140223 IDEA-140462

        //PROY-32439 INI MAS
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod LimpiarVariablesSesionBRMS()
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            HttpContext.Current.Session["ObjNvoBRMS"] = null;
            HttpContext.Current.Session["intFlagRRLL"] = null;
            HttpContext.Current.Session["blnRRLLBRMS"] = null;
            HttpContext.Current.Session["blnRRWhiteList"] = null;
            HttpContext.Current.Session["strSoloEvaluarFijo"] = null;
            HttpContext.Current.Session["ObjTienePorta"] = null; //PROY-32439
            HttpContext.Current.Session["idBRMS_Campanas"] = null; //PROY-140439 BRMS CAMPAÑA NAVIDEÑA::INI

            HttpContext.Current.Session["ParametrosBeneficioLineasAdicionalesDtp"] = null; //IDEA-142010

            HttpContext.Current.Session["objClienteDI"] = null;//PROY-140579
            HttpContext.Current.Session["objCodigosBrmsHistorial"] = null;//PROY-140579
            HttpContext.Current.Session["objCorrelativoBrmsHistorial"] = null;//PROY-140579
            HttpContext.Current.Session["objEquipoGarantiaProa"] = null;//PROY-140579
            HttpContext.Current.Session["SessionIsWhiteList"] = null;//PROY-140579
            HttpContext.Current.Session["objIdsHistoricoProactiva"] = null;//PROY-140579 F2

            HttpContext.Current.Session["objDireccionIdFilaIFI"] = null;//PROY-140690

            //PROY-140457-DEBITO AUTOMATICO-INI
            HttpContext.Current.Session["InfDebitoAutomatico"] = null;
            HttpContext.Current.Session["ListaSoplnCodigo"] = null;
            //PROY-140457-DEBITO AUTOMATICO-FIN

            return objResponse;
        }


        //INC000004280198 INI 
        [System.Web.Services.WebMethod()]
        public static  void PintarLogs(string valor,string identificador)
        {


            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "",null, "WEB");

            _objLog.CrearArchivolog(string.Format("{0}[{1}]", "[INC000004280198][" + CurrentUsers + "][" + identificador + "]",  Funciones.CheckStr(valor)), null, null);


        }
        //INC000004280198 FIN

        //INC000004509732 INI
        [System.Web.Services.WebMethod()]
        public static void PintarLogsGenerico(string ticket, string ruta, string valor)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "WEB");

            _objLog.CrearArchivolog(string.Format("{0}: {1}", "[" + ticket + "]" + ruta, Funciones.CheckStr(valor)), null, null);
        }
        //INC000004509732 FIN


        //PROY-32439 INI MAS
        //ini proy-140245
        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod LimpiarVariablesColaborador(string numeroDocumento)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog objLog = new GeneradorLog("", "", null, "log_ProyOfertaColabMovil");
            objLog.CrearArchivolog("[Inicio][LimpiarVariablesColaborador]", null, null);
            HttpContext.Current.Session["ObtenerCantidadProductosPorCliente" + numeroDocumento] = null;
            return objResponse;
        }
        //fin proy.140245

        //INC-SMS_PORTA_INI
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarMostrarSMSPortabilidad(string strCodCanal, string strOferta, string codTipoProdActual, string tipoDocumento, string numeroDoc, bool activaPin)//PROY-140585 F2
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog objLog = new GeneradorLog(numeroDoc, string.Empty, null, "log_SMSPortabilidad");
            BERegistroSmsPorta registroSmsPorta = new BERegistroSmsPorta();
            string strflagSMS = string.Empty;
            string strcanales = String.Empty;
            string strNodoSisact = string.Empty;
            string strCodRpta = string.Empty;
            string strMsjRpta = string.Empty;
            Boolean bolSms = false;
            string codigoCorrelativo = string.Empty;
            Int64 codigoValidador = 0;

            try
            {
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIO][PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad]", string.Empty), null, null);
                string listaTelefono = Funciones.CheckStr((string)HttpContext.Current.Session["listTelefono"]);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][strCodCanal]", strCodCanal), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][strOferta]", strOferta), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][codTipoProdActual]", codTipoProdActual), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][tipoDocumento]", tipoDocumento), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][numeroDoc]", numeroDoc), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][listaTelefono]", listaTelefono), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ReadKeySettings.key_flag_smsportabilidad]", ReadKeySettings.key_flag_smsportabilidad), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ReadKeySettings.key_OfertasPermitidas]", ReadKeySettings.key_OfertasPermitidas), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ReadKeySettings.key_CanalesPermitidos]", ReadKeySettings.key_CanalesPermitidos), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ReadKeySettings.key_ProductosPermitidos]", ReadKeySettings.key_ProductosPermitidos), null, null);


                //PROY-140585 F2 INI
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2][activaPin]", Funciones.CheckStr(activaPin)), null, null);
                HttpContext.Current.Session["flagSMSPortabilidadXPDV"] = "0";
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2][flagSMSPortabilidadXPDV]", Funciones.CheckStr(HttpContext.Current.Session["flagSMSPortabilidadXPDV"])), null, null);
                if (!activaPin)
                {
                    objResponse.CodigoError = "0";
                    HttpContext.Current.Session["flagSMSPortabilidadXPDV"] = "1";
                    objLog.CrearArchivolog("[PROY-140585 F2][Punto de Venta NO realiza envio SMS PORTABILIDAD]", null, null);
                    objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2][flagSMSPortabilidadXPDV]", Funciones.CheckStr(HttpContext.Current.Session["flagSMSPortabilidadXPDV"])), null, null);
                }
                else
                {
                    //PROY-140585 F2 FIN
                    if (ReadKeySettings.key_flag_smsportabilidad == "1")
                    {
                        objLog.CrearArchivolog("[PROY-SMSPORTABILIDAD][Flag Encendido, SI valida PIN SMS de PORTABILIDAD]", null, null);

                        if (ReadKeySettings.key_OfertasPermitidas.IndexOf(strOferta) > -1 &&
                            ReadKeySettings.key_CanalesPermitidos.IndexOf(strCodCanal) > -1 &&
                            ReadKeySettings.key_ProductosPermitidos.IndexOf(codTipoProdActual) > -1)
                        {
                            objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][Solicitar PIN de Portabilidad a los numeros]", Funciones.CheckStr(listaTelefono)), null, null);

                            bolSms = RegistrarTrazabilidad(tipoDocumento, numeroDoc, listaTelefono, ref codigoCorrelativo, ref codigoValidador);
                            objResponse.CodigoError = bolSms ? "0" : "1";
                            objResponse.Mensaje = bolSms ? "OK" : ReadKeySettings.key_MsjErrorValidacionPIN;
                            objResponse.IdFila = Funciones.CheckStr(codigoCorrelativo);
                            objResponse.Cadena = listaTelefono;
                            string strCodigoValidador = Funciones.CheckStr(codigoValidador);
                            HttpContext.Current.Session["codigoValidador"] = strCodigoValidador;

                        }
                        else
                        {
                            objResponse.CodigoError = "0";
                            objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][NO Solicitar PIN de Portabilidad]", Funciones.CheckStr(listaTelefono)), null, null);
                        }
                    }
                    else
                    {
                        objResponse.CodigoError = "0";
                        objLog.CrearArchivolog("[PROY-SMSPORTABILIDAD][Flag Apagado, NO valida PIN SMS de PORTABILIDAD]", null, null);
                    }
                }//PROY-140585 F2

            }
            catch (Exception e)
            {
                objResponse.CodigoError = "1";
                objResponse.Mensaje = ReadKeySettings.key_MsjErrorValidacionPIN;
                objLog.CrearArchivolog(string.Format("{0} => ERROR[{1}|{2}]", "[PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad]", Funciones.CheckStr(e.Message), Funciones.CheckStr(e.StackTrace)), null, null);
            }

            objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad][OUT | CodigoError]", objResponse.CodigoError), null, null);
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad][OUT | Mensaje]", objResponse.Mensaje), null, null);
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad][OUT | bolSms]", Funciones.CheckStr(bolSms)), null, null);
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad][OUT | IdFila]", objResponse.IdFila), null, null);
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad][OUT | Cadena]", objResponse.Cadena), null, null);
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[FIN][PROY-SMSPORTABILIDAD][ValidarSMSPortabilidad]", string.Empty), null, null);
            objResponse.Boleano = bolSms;
            return objResponse;
        }

        public static bool RegistrarTrazabilidad(string strTipoDocumento, string strNumeroDocumento, string strNroPortabilidad, ref string codigoCorrelativo, ref Int64 codigoValidador)
        {
            GeneradorLog objLog = new GeneradorLog(null, string.Empty, null, "log_SMSPortabilidad");
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[INICIO][PROY-SMSPORTABILIDAD][RegistrarTrazabilidad]", string.Empty), null, null);
            BERegistroSmsPorta registroSmsPorta = new BERegistroSmsPorta();
            registroSmsPorta.nro_linea = strNroPortabilidad;
            string[] nrotelefonos = strNroPortabilidad.Split(';');
            int cantNroTelefono = nrotelefonos.Length;
            bool salida = false;
            string strCodRpta = string.Empty;
            string strMsjRpta = string.Empty;
            Int64 intCodigo = 0;
            string CurrentUsers = Funciones.CheckStr(Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers);
            string CurrentNodoSisact = Funciones.CheckStr(System.Net.Dns.GetHostName());

            objLog.CrearArchivolog(string.Format("{0}-->{1}", "[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad][tipoDocumento]", strTipoDocumento), null, null);
            objLog.CrearArchivolog(string.Format("{0}-->{1}", "[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad][nroDocumento]", strNumeroDocumento), null, null);
            objLog.CrearArchivolog(string.Format("{0}-->{1}", "[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad][nroPortabilidad]", strNroPortabilidad), null, null);
            objLog.CrearArchivolog(string.Format("{0}-->{1}", "[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad][cantNroTelefono]", cantNroTelefono), null, null);

            try
            {
                if (cantNroTelefono > 0)
                {
                    objLog.CrearArchivolog("[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad][Existen numero de telefonos]", null, null);
                    salida = BLEvaluacion.RegistrarTrazabilidadPinSMSPorta(strTipoDocumento, strNumeroDocumento, registroSmsPorta.nro_linea, CurrentUsers, CurrentNodoSisact, ref strCodRpta, ref strMsjRpta, ref intCodigo);

                    if (salida)
                    {
                        objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][Exito al Registrar/Actualizar las lineas : Codigo Respuesta]", strCodRpta), null, null);
                        objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][Exito al Registrar/Actualizar las lineas: Mensaje Respuesta]", strMsjRpta), null, null);
                        objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][Exito al Registrar/Actualizar las lineas: Codigo de portabilidad]", intCodigo), null, null);

                        codigoValidador = intCodigo + 1;
                        registroSmsPorta.codigo = Funciones.Encriptar(Funciones.CheckStr(intCodigo)); ;
                        codigoCorrelativo = registroSmsPorta.codigo;
                    }
                    else
                    {
                        objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][Error al Registrar/Actualizar las líneas : Codigo Respuesta]", strCodRpta), null, null);
                        objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-SMSPORTABILIDAD][Error al Registrar/Actualizar las líneas : Mensaje Respuesta]", strMsjRpta), null, null);
                    }
                }
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0}-->ERROR[{1}|{2}]", "[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad]", Funciones.CheckStr(ex.Message), Funciones.CheckStr(ex.StackTrace)), null, null);
            }
            objLog.CrearArchivolog(string.Format("{0}-->{1}", "[PROY-SMSPORTABILIDAD][RegistrarTrazabilidad][FIN]", string.Empty), null, null);

            return salida;
        }
        //INC-SMS_PORTA_FIN

        //INI INC000002628010 + 3
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarModalidadCedente(string modcedenteCa, string opecedenCa, string NumDocumento, string flagPort)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, NumDocumento, null, "WEB");
            BEResponseWebMethod objResp = new BEResponseWebMethod();

            HttpContext.Current.Session["SMSPNCodigoPorta"] = string.Empty; //PROY-140585-FASE2
            _objLog.CrearArchivolog(string.Format("{0}:{1}", "[PROY-140585 F2][ValidarModalidadCedente()] Session(SMSPNCodigoPorta)", Funciones.CheckStr(HttpContext.Current.Session["SMSPNCodigoPorta"])), null, null);

            if (flagPort == "S")
            {
                objResp.Boleano = true;
                if (modcedenteCa != HttpContext.Current.Session["SesionModalidad"].ToString() || opecedenCa != HttpContext.Current.Session["SesionOperador"].ToString() || modcedenteCa.ToUpper() == AppSettings.consValorPost || modcedenteCa.ToUpper() == AppSettings.consValorPre)
                {
                    objResp.CodigoError = "1";
                    objResp.Cadena = AppSettings.consMensValidaOpe;

                    _objLog.CrearArchivolog("[INC000002628010]La validacion del operador cedete presenta incongruencias: " + modcedenteCa + " " + opecedenCa, null, null);

                }

                else
                {

                    objResp.CodigoError = "0";

                    _objLog.CrearArchivolog("[INC000002628010]se valida el valor de la modalidad y operador cedente de forma correcta", null, null);

                }
            }
            else
            {
                objResp.Boleano = false;

            }
            return objResp;
            HttpContext.Current.Session["SesionModalidad"] = null;
            HttpContext.Current.Session["SesionOperador"] = null;
        }
        //FIN INC000002628010 + 3

        //INI PROY-CAMPANA LG 
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarComboLG(string cadenaDetalleCarrito, string strNroDocumento, string strTipoDocumento)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            string key_ParamGrupoLG = Funciones.CheckStr(ConfigurationManager.AppSettings["codComboLG"].ToString());
            string strCodResp = string.Empty;
            string strMensResp = string.Empty;
            string campana = string.Empty;
            int contAlta = 0;
            int contBaja = 0;
            bool flagValidacion = false;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, strNroDocumento, null, "WEB");
            String strLog = String.Empty;

            try
            {
                strLog += "INPUT[";
                strLog += "carritoDetalle: " + cadenaDetalleCarrito;
                strLog += "|documentoNumero: " + strNroDocumento;
                strLog += "|documentoTipo: " + strTipoDocumento;
                strLog += "] PROCESS[";

                List<string> listDetalleCarrito = cadenaDetalleCarrito.Split('|').Where(w => !string.IsNullOrEmpty(w)).ToList();
                List<string> listDetalleCampana = listDetalleCarrito.Select(q => q.Split(';')[0]).ToList();
                List<string> listDetalleCodPrecio = listDetalleCarrito.Select(q => q.Split(';')[1]).ToList();
                List<string> listReglaLG = ReadKeySettings.keyComboLG_CampanasReglas.Split('|').Where(w => !string.IsNullOrEmpty(w)).ToList();
                List<BEItemGenericoLG> listReglas = ReadKeySettings.list_CampanasReglas.ToList();

                int countCampanas = (from cam in listDetalleCampana
                                     select cam).GroupBy(g => g.ToString()).Count();

                strLog += "campanaCantidad: " + countCampanas;

                if (countCampanas == 1)
                {
                    campana = listDetalleCampana.FirstOrDefault();

                    strLog += "|campanaCodigo: " + campana;
                    strLog += "|parametricaCodigo: " + key_ParamGrupoLG;

                    BLPortabilidad.validaVentaCampanaLG(strNroDocumento, strTipoDocumento, campana, key_ParamGrupoLG, ref strCodResp, ref strMensResp);

                    strLog += "|validaVentaCampanaLG.respuestaCodigo: " + strCodResp;
                    strLog += "|validaVentaCampanaLG.respuestaMensaje: " + strMensResp;

                    if (strCodResp != "0")
                    {
                        objResponse.CodigoError = strCodResp;
                        objResponse.Cadena = ReadKeySettings.keyComboLG_CampanaMensaje_ClienteConExistencia;//error

                        strLog += "] OUTPUT[";
                        strLog += "errorCodigo: " + objResponse.CodigoError;
                        strLog += "|errorRespuesta: " + objResponse.Cadena;
                        strLog += "]";
                        _objLog.CrearArchivolog("ValidarComboLG::Error{" + strLog + "}", null, null);

                        return objResponse;
                    }

                    foreach (var item in listReglas)
                    {
                        if (campana == item.Codigo)
                        {
                            foreach (var j in listDetalleCodPrecio)
                            {
                                if (Funciones.CheckDbl(j) > Funciones.CheckDbl(item.Umbral))
                                {
                                    contAlta += 1;
                                }
                                else
                                {
                                    contBaja += 1;
                                }
                            }

                            strLog += "|campanaCodigo: " + item.Codigo;
                            strLog += "|gamaAltaCantidad: " + contAlta;
                            strLog += "|gamaBajaCantidad: " + contBaja;
                            strLog += "|umbralMonto: " + item.Umbral;
                        }

                        if (campana == item.Codigo && contAlta == Funciones.CheckInt(item.GamaAlta) && contBaja == Funciones.CheckInt(item.GamaBaja))
                        {
                            flagValidacion = true;
                            contAlta = 0;
                            contBaja = 0;
                            break;
                        }
                    }

                    strLog += "|flagValidacion: " + flagValidacion;

                    if (flagValidacion)
                    {
                        objResponse.CodigoError = "0";
                        objResponse.Cadena = "OK";//OK

                        strLog += "] OUTPUT[";
                        strLog += "exitoCodigo: " + objResponse.CodigoError;
                        strLog += "|exitoRespuesta: " + objResponse.Cadena;
                        strLog += "]";
                        _objLog.CrearArchivolog("ValidarComboLG::Exito{" + strLog + "}", null, null);

                        return objResponse;
                    }
                    else
                    {
                        objResponse.CodigoError = "1";
                        objResponse.Cadena = ReadKeySettings.keyComboLG_CampanaMensaje_ClienteNoAplica;//no cumple con los requisitos

                        strLog += "] OUTPUT[";
                        strLog += "errorCodigo: " + objResponse.CodigoError;
                        strLog += "|errorRespuesta: " + objResponse.Cadena;
                        strLog += "]";
                        _objLog.CrearArchivolog("ValidarComboLG::Error{" + strLog + "}", null, null);

                        return objResponse;
                    }
                }
                else
                {
                    objResponse.CodigoError = "1";
                    objResponse.Cadena = ReadKeySettings.keyComboLG_CampanaMensaje_ClienteNoAplica;//no cumple con los requisitos

                    strLog += "] OUTPUT[";
                    strLog += "errorCodigo: " + objResponse.CodigoError;
                    strLog += "|errorRespuesta: " + objResponse.Cadena;
                    strLog += "]";
                    _objLog.CrearArchivolog("ValidarComboLG::Error{" + strLog + "}", null, null);

                    return objResponse;
                }
            }
            catch (Exception e)
            {
                objResponse.CodigoError = "-1";
                objResponse.Cadena = "Ocurrió un error al buscar los datos del cliente";

                strLog += "] OUTPUT[";
                strLog += "errorCodigo: " + objResponse.CodigoError;
                strLog += "|errorRespuesta: " + objResponse.Cadena;
                strLog += "]";
                _objLog.CrearArchivolog("ValidarComboLG::Error{" + strLog + " ERROR[" + e.Message + "|" + e.StackTrace + "]}", null, null);

                return objResponse;
            }
        }
        //FIN PROY-CAMPANA LG 
        #region PROY-140335 IDEA-140307
        private void AnularSecLineaPendientePorta()
        {
            string strCodTipoProd = hidCodProducto.Value;
            bool flgPortabilidad = (hidNTienePortabilidadValues.Value == "S");
            try
            {
                CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[METODO VALIDACION] [AnularSecLineaPendientePorta]" + " INICIO PROY-140335 IDEA-140307", null, null);
                CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[INPUT][strCodTipoProd][CODIGO DE PRODUCTO] => " + strCodTipoProd, null, null);
                CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[INPUT][flgPortabilidad][Portabildiad] => " + flgPortabilidad, null, null);

                if (flgPortabilidad && (strCodTipoProd.Equals("01") || strCodTipoProd.Equals("04")))
                {
                    List<BEValidalineaPorta> ListLineaPorta = (List<BEValidalineaPorta>)Session["validarNroTelefonoPorta"];
                    if (ListLineaPorta.Count() > 0)
                    {
                        foreach (BEValidalineaPorta dto in ListLineaPorta)
                        {
                            string valor = new BLPortabilidad().AnularSecPortabilidad(dto.SolinCodigo);
                            CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[SALIDA][PROY-140335 IDEA-140307] [ dto.SolinCodigo] => " + dto.SolinCodigo, null, null);
                            CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[SALIDA][PROY-140335 IDEA-140307] [ dto.StrLinea] => " + dto.StrLinea, null, null);
                            CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[SALIDA][PROY-140335 IDEA-140307] [valor] => " + valor, null, null);
                        }
                    }
                }
                CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[METODO VALIDACION][AnularSecLineaPendientePorta] => " + "FIN PROY-140335 IDEA-140307", null, null);
            }
            catch (Exception ex)
            {
                CrearLogStatic(hidNroDocumento.Value).CrearArchivolog("[ERROR][AnularSecLineaPendientePorta] [PROY-140335 IDEA-140307] => ", null, ex);
            }

        }

        private static bool ValidacionCodigos(string CodigoSinergia)
        {
            bool respuesta = false;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "[PROY-140335][ValidacionCodigos]", null, "WEB");
            try
            {
                if (!string.IsNullOrEmpty(Funciones.CheckStr(ReadKeySettings.Key_CodigoCanales)))
                {
                    string[] Codigos = ReadKeySettings.Key_CodigoCanales.Split('|');
                    for (int i = 0; i < Codigos.Count(); i++)
                    {
                        if (Codigos[i] == CodigoSinergia)
                        {
                            respuesta = true;
                            break;
                        }
                    }
                }
                else
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140335][ValidacionCodigos]", "NO HAY CANALES A VALIDAR"), null, null);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140335][ValidacionCodigos]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140335][ValidacionCodigos]", respuesta), null, null);
            return respuesta;
        }
        #endregion
        //PROY-FULLCLARO.v2 :: INI
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarFullClaro(string tipoDocumento, string strNroDoc, string strcodCanal, string strCodigoProducto, string strtipoOferta, string strTipoOperacion, string chkPortabilidad)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, strNroDoc, null, "WEB");
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            Boolean resp = false;

            _objLog.CrearArchivolog("[Inicio][FULL_CLARO - ValidarFullClaro]", null, null);

            try
            {
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][PARAMETRICA][OUT | strcanales]", ReadKeySettings.key_TipoCanal), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][PARAMETRICA][OUT | strTOperaciones]", ReadKeySettings.key_TipoOperacion), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][PARAMETRICA][OUT | strTOferta]", ReadKeySettings.key_TipoOferta), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][PARAMETRICA][OUT | strFlagPorta]", ReadKeySettings.key_FlagPorta), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][PARAMETRICA][OUT | strTProductos]", ReadKeySettings.key_TipoProducto), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][PARAMETRICA][OUT | strTDocumentos]", ReadKeySettings.key_TipoDocumento), null, null);
                _objLog.CrearArchivolog("[FULL_CLARO - ValidarFullClaro][PARAMETRICA][FIN]", null, null);

                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][strcodCanal]", strcodCanal), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][strtipoOperacion]", strTipoOperacion), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][strTOferta]", strtipoOferta), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][strFlagPorta]", chkPortabilidad), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][strtipoProducto]", strCodigoProducto), null, null);
                _objLog.CrearArchivolog(string.Format("{0} --> {1}", "[FULL_CLARO - ValidarFullClaro][strtipoDocumento]", tipoDocumento), null, null);

                if (ReadKeySettings.key_FlagGeneralBeneficio == "1")
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - ValidarFullClaro] LLAVE GENERAL PRENDIDA", null, null);

                    if (ReadKeySettings.key_TipoOferta.IndexOf(strtipoOferta) > -1 &&
                        ReadKeySettings.key_TipoCanal.IndexOf(strcodCanal) > -1 &&
                        ReadKeySettings.key_TipoOperacion.IndexOf(strTipoOperacion) > -1 &&
                        ReadKeySettings.key_TipoProducto.IndexOf(strCodigoProducto) > -1 &&
                        ReadKeySettings.key_TipoDocumento.IndexOf(tipoDocumento) > -1)
                    {
                        _objLog.CrearArchivolog("[FULL_CLARO - ValidarFullClaro] Cumple condiciones de tabla parametros", null, null);
                        resp = chkPortabilidad != "S" ? true : ReadKeySettings.key_FlagPorta == "S" ? true : false;
                    }

                    if (resp)
                    {
                        objResponse.CodigoError = "0";
                        _objLog.CrearArchivolog("[FULL_CLARO - ValidarFullClaro] Muestra botón FullClaro", null, null);
                    }
                    else
                    {
                        objResponse.CodigoError = "1";
                        _objLog.CrearArchivolog("[FULL_CLARO - ValidarFullClaro] NO Muestra botón FullClaro", null, null);
                    }
                }

                else
                {
                    _objLog.CrearArchivolog("[FULL_CLARO - ValidarFullClaro] LLAVE GENERAL APAGADA NO Muestra botón FullClaro", null, null);
                }


            }
            catch (Exception ex)
            {
                objResponse.CodigoError = "-1";
                objResponse.Mensaje = String.Format("{0} --> {1} | {2}", "[ERROR][FULL_CLARO - ValidarFullClaro]", Funciones.CheckStr(ex.Message), Funciones.CheckStr(ex.StackTrace));
                _objLog.CrearArchivolog(objResponse.Mensaje, null, null);
            }
            _objLog.CrearArchivolog("[Fin][FULL_CLARO - ValidarFullClaro]", null, null);
            objResponse.Boleano = resp;
            return objResponse;
        }

        private static string convTipoServicio(string numero)
        {
            string tipoServ = string.Empty;

            if (numero.Length == 8)
            {
                tipoServ = "F";
            }
            else
            {
                tipoServ = "M";
            }

            return tipoServ;
        }


        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod MensajeBonoFullClaro(string tipoDocumento, string strNroDoc)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, strNroDoc, null, "WEB");
            DataTable dtBSCS = new DataTable();
            DataTable dtSGA = new DataTable();
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEClienteCuenta objCliente = new BEClienteCuenta();
            string strCadena = string.Empty;
            _objLog.CrearArchivolog("[Inicio][FULL_CLARO - MensajeBonoFullClaro]", null, null);

            try
            {
                int intC_Movil = 0;
                int intC_Fija = 0;
                string tipoServ = string.Empty;
                string strMoviles = string.Empty;
                string strFijas = string.Empty;

                objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + strNroDoc];

                if (objCliente != null)
                {
                    dtBSCS = objCliente.lineaBSCS;
                    dtSGA = objCliente.lineaSGA;

                    string strCuenta = string.Empty;

                    if (dtBSCS != null)
                    {
                        _objLog.CrearArchivolog("[MensajeBonoFullClaro] Lineas BSCS", null, null);
                        foreach (DataRow drBscs in dtBSCS.Rows)
                        {
                            if (Funciones.CheckStr(drBscs["CUENTA"]) != strCuenta)
                            {
                                strCuenta = Funciones.CheckStr(drBscs["CUENTA"]);

                                if (Funciones.CheckStr(drBscs["ESTADO"]).ToUpper().Equals("ACTIVO"))
                                {
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - MensajeBonoFullClaro][Cuenta]", strCuenta), null, null);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - MensajeBonoFullClaro][Estado]", Funciones.CheckStr(drBscs["ESTADO"])), null, null);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - MensajeBonoFullClaro][Co_id]", Funciones.CheckStr(drBscs["CO_ID"])), null, null);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - MensajeBonoFullClaro][Plan]", Funciones.CheckStr(drBscs["PLAN"])), null, null);

                                    tipoServ = convTipoServicio(Funciones.CheckStr(drBscs["NUMERO"]));
                                    if (tipoServ == "M")
                                    {
                                        strMoviles += String.Format("{0}|{1},", Funciones.CheckStr(drBscs["NUMERO"]), Funciones.CheckStr(drBscs["PLAN"]));
                                        intC_Movil++;
                                    }
                                    else
                                    {
                                        strFijas += String.Format("{0}|{1},", Funciones.CheckStr(drBscs["NUMERO"]), Funciones.CheckStr(drBscs["PLAN"]));
                                        intC_Fija++;
                                    }
                                }
                            }
                        }
                    }

                    strCuenta = string.Empty;
                    if (dtSGA != null)
                    {
                        _objLog.CrearArchivolog("[ValidarMovilFijaActivas] Lineas SGA", null, null);

                        foreach (DataRow drSGA in dtSGA.Rows)
                        {
                            if (Funciones.CheckStr(drSGA["CODCLI"]) != strCuenta)
                            {
                                strCuenta = Funciones.CheckStr(drSGA["CODCLI"]);

                                if (Funciones.CheckStr(drSGA["ESTADO"]).ToUpper().Equals("ACTIVO"))
                                {
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[ValidarMovilFijaActivas] Cuenta", strCuenta), null, null);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[ValidarMovilFijaActivas] Estado", Funciones.CheckStr(drSGA["ESTADO"])), null, null);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[ValidarMovilFijaActivas] Co_id", Funciones.CheckStr(drSGA["CO_ID"])), null, null);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[ValidarMovilFijaActivas] Plan", Funciones.CheckStr(drSGA["PLAN"])), null, null);
                                    strFijas += String.Format("{0}|{1},", Funciones.CheckStr(drSGA["NUMERO"]), Funciones.CheckStr(drSGA["PLAN"]));
                                    intC_Fija++;
                                }
                            }
                        }
                    }

                    if (!(intC_Movil > 0) && !(intC_Fija > 0))
                    {
                        strCadena = ReadKeySettings.key_msjSinServicios;
                        strFijas = "Nueva Línea|Nuevo Plan,";
                        strMoviles = "Nueva Línea|Nuevo Plan,";
                    }

                    if (intC_Movil > 0 && intC_Fija > 0)
                        strCadena = ReadKeySettings.key_msjConServicios;

                    if (intC_Movil > 0 && !(intC_Fija > 0))
                        strCadena = ReadKeySettings.key_msjServicioMovil;

                    if (intC_Fija > 0 && !(intC_Movil > 0))
                        strCadena = ReadKeySettings.key_msjServicioFijo;

                    objResponse.Cadena = String.Format("{0}&{1}", strMoviles, strFijas);
                }
                else
                {
                    strCadena = ReadKeySettings.key_msjSinServicios;
                }
                objResponse.CodigoError = "0";
                objResponse.Mensaje = strCadena;
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - MensajeBonoFullClaro][objResponse.CodigoError]", Funciones.CheckStr(objResponse.CodigoError)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - MensajeBonoFullClaro][objResponse.Cadena]", Funciones.CheckStr(objResponse.Cadena)), null, null);
            }
            catch (Exception ex)
            {
                objResponse.CodigoError = "-1";
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString();
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[ERROR][FULL_CLARO - MensajeBonoFullClaro][objResponse.CodigoError]", Funciones.CheckStr(objResponse.CodigoError)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1} | {2}", "[ERROR][FULL_CLARO - MensajeBonoFullClaro][objResponse.Cadena]", Funciones.CheckStr(ex.Message)), null, null);
            }

            _objLog.CrearArchivolog("[Fin][FULL_CLARO - MensajeBonoFullClaro]", null, null);
            return objResponse;
        }

        private static void GrabarBono_FullClaro(Int64 nroSec, bool flgPortabilidad, string beneficio, string usuario, string numDoc, BESolicitudPersona objSolPersona, BESolicitudEmpresa objSolEmpresa, ArrayList listaPlanDetalle)
        {
            string tipoDocumento = string.Empty;
            string nroDocumento = string.Empty;
            string flagPortabilidad = string.Empty;
            ArrayList listPlanDetalle = null;
            listPlanDetalle = listaPlanDetalle;
            Int32 consecutivo = 0;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, numDoc, null, "WEB");
            _objLog.CrearArchivolog("[FULL_CLARO][INICIO]", null, null);

            try
            {
                var strNroSECV = String.Empty;
                var strFlagCondicion = "M";
                var lstFullClaro = new List<BEFullClaroBeneficio>();
                var lstPedido = new List<BEAcuerdoDetalle>();
                var codigo_rpta = "";
                var mensaje_rpta = "";
                var strTipoDocumentoBSCS = ConvierteTipoDocumento(objSolPersona.TDOCC_CODIGO);
                var strNroDoc = "";

                if (objSolPersona.TDOCC_CODIGO == "01")
                {

                    strNroDoc = objSolPersona.CLIEC_NUM_DOC.Substring(8, 8);//INC000003802012 

                }
                else
                {
                    strNroDoc = Funciones.NroDocumentoIdentidad(objSolPersona.TDOCC_CODIGO, objSolPersona.CLIEC_NUM_DOC);//INC000003802012

                }
                _objLog.CrearArchivolog("strFlagCondicion: " + Funciones.CheckStr(strFlagCondicion), null, null);
                _objLog.CrearArchivolog("strTipoDocumentoBSCS: " + Funciones.CheckStr(strTipoDocumentoBSCS), null, null);
                _objLog.CrearArchivolog("INC000003802012 - strNroDoc: " + Funciones.CheckStr(strNroDoc), null, null);//INC000003802012

                BLGeneral.consultaBeneficioFullClaro(strTipoDocumentoBSCS, strNroDoc, strFlagCondicion, out lstFullClaro, out lstPedido, ref codigo_rpta, ref mensaje_rpta);

                _objLog.CrearArchivolog("codigo_rpta: " + Funciones.CheckStr(codigo_rpta), null, null);
                _objLog.CrearArchivolog("mensaje_rpta: " + Funciones.CheckStr(mensaje_rpta), null, null);


                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][nroSec]", Funciones.CheckStr(nroSec)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][flagPortabilidad]", Funciones.CheckStr(flagPortabilidad)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][beneficio]", Funciones.CheckStr(beneficio)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][usuario]", Funciones.CheckStr(usuario)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][numDoc]", Funciones.CheckStr(numDoc)), null, null);

                tipoDocumento = ConvierteTipoDocumento(objSolPersona.TDOCC_CODIGO);

                if (objSolPersona.TDOCC_CODIGO == "01")
                {
                    nroDocumento = objSolPersona.CLIEC_NUM_DOC.Substring(8, 8); //INC000003802012
                }
                else
                {

                    nroDocumento = Funciones.NroDocumentoIdentidad(objSolPersona.TDOCC_CODIGO, objSolPersona.CLIEC_NUM_DOC);//INC000003802012

                }





                _objLog.CrearArchivolog("INC000003802012 - nroDocumento: " + Funciones.CheckStr(nroDocumento), null, null);//INC000003802012


                flagPortabilidad = flgPortabilidad == true ? "P" : string.Empty;
                beneficio = beneficio.ToUpper() == "MOVIL" ? "M" : "F";
                List<BEDatosClienteFC> objListaBeneficioElegido = (List<BEDatosClienteFC>)HttpContext.Current.Session["ListaBeneficioElegidoFC"];
                List<BEDetalleFC> listDetalleFC = new List<BEDetalleFC>();
                RegistraCandidatosFullClaroRequest objRegistraCandidatosFullClaroRequest = null;
                RegistraCandidatosFullClaroResponse objRegistraCandidatosFullClaroResponse = null;
                string codigoRespuestaServidor;
                string mensajeRespuestaServidor;
                objRegistraCandidatosFullClaroRequest = new RegistraCandidatosFullClaroRequest();
                BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();
                BECabeceraFC objCabeceraFC = new BECabeceraFC();
                Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();
                RegistraCandidatoFullClaroRequest objRegistraCandidatoFullClaroRequest = new RegistraCandidatoFullClaroRequest();
                RestRegistraCandidatoFC objRestRegistraCandidatoFC = new RestRegistraCandidatoFC();

                foreach (BEPlanDetalleVenta producto in listPlanDetalle)
                {
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][producto.PLANC_CODIGO]", Funciones.CheckStr(producto.PLANC_CODIGO)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][producto.SOPLN_ORDEN]", Funciones.CheckStr(producto.SOPLN_ORDEN)), null, null);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - GrabarBono_FullClaro][producto.SOPLN_CODIGO]", Funciones.CheckStr(producto.SOPLN_CODIGO)), null, null);
                    if (beneficio == "M")
                    {
                        objListaBeneficioElegido
                                .Where(p => p.soplnOrden == "0" && p.planPvudb == producto.PLANC_CODIGO && string.IsNullOrEmpty(p.coId))
                                .Select(p => p.soplnOrden = Funciones.CheckStr(producto.SOPLN_ORDEN))
                                .FirstOrDefault();
                    }
                    objListaBeneficioElegido
                                .Where(p => p.soplnOrden == Funciones.CheckStr(producto.SOPLN_ORDEN))
                                .Select(p => p.soplnCodigo = Funciones.CheckStr(producto.SOPLN_CODIGO))
                                .ToList();
                }

                #region Header
                objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_consumer"]);
                objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_country"]);
                objHeaderRequest.dispositivo = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal;
                objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_language"]);
                objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_modulo"]);
                objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_msgType"]);
                objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_Operation"]);
                objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["DAT_FullClaro_codSystem"]);
                objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                objHeaderRequest.userId = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                objHeaderRequest.wsIp = ConfigurationManager.AppSettings["DAT_FullClaro_wsIp"];

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.consumer]", Funciones.CheckStr(objHeaderRequest.consumer)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.country]", Funciones.CheckStr(objHeaderRequest.country)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.dispositivo]", Funciones.CheckStr(objHeaderRequest.dispositivo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.modulo]", Funciones.CheckStr(objHeaderRequest.modulo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.msgType]", Funciones.CheckStr(objHeaderRequest.msgType)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.operation]", Funciones.CheckStr(objHeaderRequest.operation)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.pid]", Funciones.CheckStr(objHeaderRequest.pid)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.system]", Funciones.CheckStr(objHeaderRequest.system)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.timestamp]", Funciones.CheckStr(objHeaderRequest.timestamp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.userId]", Funciones.CheckStr(objHeaderRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objHeaderRequest.wsIp]", Funciones.CheckStr(objHeaderRequest.wsIp)), null, null);
                objRegistraCandidatosFullClaroRequest.MessageRequest.header.HeaderRequest = objHeaderRequest;
                #endregion

                #region Body

                objCabeceraFC.nroSec = Funciones.CheckStr(nroSec);
                objCabeceraFC.tipoDoc = tipoDocumento;
                objCabeceraFC.numDoc = nroDocumento;
                objCabeceraFC.codProducto = objSolPersona.PRDC_CODIGO;
                objCabeceraFC.beneficio = beneficio;
                objCabeceraFC.tipoOperacion = objSolPersona.TOPEN_CODIGO;
                objCabeceraFC.flagPorta = flagPortabilidad;
                objCabeceraFC.usuario = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.NroSec]", Funciones.CheckStr(objCabeceraFC.nroSec)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.TipoDocumento]", Funciones.CheckStr(objCabeceraFC.tipoDoc)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.NroDocumento]", Funciones.CheckStr(objCabeceraFC.numDoc)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.Beneficio]", Funciones.CheckStr(objCabeceraFC.codProducto)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.CodProducto]", Funciones.CheckStr(objCabeceraFC.beneficio)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.TipoOperacion]", Funciones.CheckStr(objCabeceraFC.tipoOperacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.FlagPorta]", Funciones.CheckStr(objCabeceraFC.flagPorta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.usuario]", Funciones.CheckStr(objCabeceraFC.usuario)), null, null);

                foreach (var producto in objListaBeneficioElegido)
                {
                    BEDetalleFC objtempDetalleFC = new BEDetalleFC();
                    consecutivo++;
                    objtempDetalleFC.consecutivo = Funciones.CheckStr(consecutivo);
                    objtempDetalleFC.planPvuDb = producto.planPvudb;
                    objtempDetalleFC.planBSCS = producto.tmCode;
                    objtempDetalleFC.descripcionPlan = producto.desTmcode;
                    objtempDetalleFC.linea = producto.linea;
                    objtempDetalleFC.tipoServicio = producto.tipoServicio;
                    objtempDetalleFC.numeroContrato = "";
                    objtempDetalleFC.coId = producto.coId;
                    objtempDetalleFC.customerId = producto.customerId;
                    objtempDetalleFC.soplnOrden = producto.soplnOrden;
                    objtempDetalleFC.soplnCodigo = producto.soplnCodigo;
                    listDetalleFC.Add(objtempDetalleFC);
                }
                objCabeceraFC.datosDetalleFC = listDetalleFC;
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB][objBodyRequest.datosCabeceraFC.datosDetalleFC]", Funciones.CheckStr(objCabeceraFC.datosDetalleFC)), null, null);
                objRegistraCandidatoFullClaroRequest.registrarCandidatoRequest = objCabeceraFC;
                objRegistraCandidatosFullClaroRequest.MessageRequest.body = objRegistraCandidatoFullClaroRequest;
                #endregion

                #region Auditoria
                objBEAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                objBEAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                objBEAuditoriaRequest.accept = "application/json";
                objBEAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                #endregion

                #region Response
                objRegistraCandidatosFullClaroResponse = objRestRegistraCandidatoFC.registraCandidatoFC(objRegistraCandidatosFullClaroRequest, objBEAuditoriaRequest);
                codigoRespuestaServidor = objRegistraCandidatosFullClaroResponse.MessageResponse.body.codigoRespuesta;
                mensajeRespuestaServidor = objRegistraCandidatosFullClaroResponse.MessageResponse.body.mensajeRespuesta;
                _objLog.CrearArchivolog("[PROY-FULLCLARO][Servicio Registra Candidato Fullclaro en PVUDB] -> objBodyResponse.codigoRespuestaServidor : " + codigoRespuestaServidor, null, null);
                _objLog.CrearArchivolog("[PROY-FULLCLARO][Servicio Registra Candidato Fullclaro en PVUDB] -> objBodyResponse.mensajeRespuestaServidor : " + mensajeRespuestaServidor, null, null);
                #endregion

                //INICIATIVA-805 - INICIO - Campana Descuento Cargo Fijo
                if (codigoRespuestaServidor == "0")
                {
                    HttpContext.Current.Session["CandidatoFC"] = 1; //INICIATIVA-805 Campana Descuento Cargo Fijo
                }
                else
                {
                    HttpContext.Current.Session["CandidatoFC"] = 0; //INICIATIVA-805 Campana Descuento Cargo Fijo
                }
                //INICIATIVA-805 - FIN - Campana Descuento Cargo Fijo
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog("[ERROR][FULL_CLARO - Servicio Registra Candidato Fullclaro en PVUDB]", null, ex);
            }
            _objLog.CrearArchivolog("[FULL_CLARO][FIN]", null, null);
        }
        //PROY-FULLCLARO.v2 ::FIN

        //INI PROY-REC
        public bool validarDatosEvaluacion()
        {

            GeneradorLog _objLog = CrearLog(hidNroDocumento.Value);  //INC000002628010 + 3
            _objLog.CrearArchivolog(string.Format("{0}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION]"), null, null);

            string strTipoDocRUC = ConfigurationManager.AppSettings["TipoDocumentoRUC"].ToString();
            string strTipoDocDNI = ConfigurationManager.AppSettings["constCodTipoDocumentoDNI"].ToString();
            string nroDocumento = (String)HttpContext.Current.Session["docCliente"].ToString();

            string strCodRiesgo = string.Empty;
            string strSessCuotasBRMS = string.Empty;
            BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

            BEDataCreditoOUT objDataCredito = new BEDataCreditoOUT();
            BEEmpresaExperto objDataCreditoCorp = new BEEmpresaExperto();


            //INI VALIDACION ANTIFRAUDE  INC000002547199
            //fdq1
            string[] arrvalidacion = Funciones.CheckStr(HttpContext.Current.Session["SesionValidacion"]).Split('|');
            string strOferta = arrvalidacion[0];
            string CasoEspecialstr = arrvalidacion[1];
            string TipoOperacionstr = arrvalidacion[2];
            string ssCasoEspecialstr = hidCasoEspecial.Value;
            string ssstrOferta = hidOferta.Value;
            string sstrTipoOperacion = hidTipoOperacion.Value;
            _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "oferta evaluada", strOferta), null);
            _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "casoespecial evaluado", CasoEspecialstr), null);
            _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "oferta a guardar", ssstrOferta), null);
            _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "casoespecial a guardar", ssCasoEspecialstr), null);
            if (strOferta != ssstrOferta || CasoEspecialstr != ssCasoEspecialstr || TipoOperacionstr != sstrTipoOperacion)
            {
                HttpContext.Current.Session["SesionValidacion"] = null;
                return false;
            }
            //fdq1
            if (hidNTienePortabilidadValues.Value == "S")
            {
                string strCodigoCedente = hidOperadorCedente.Value + ";" + hidOperText.Value;//INC000002628010 + 3
                string strModalidad = hidModalidad.Value + "_" + hiModalidadPortTex.Value; //INC000002628010 - (INC000002547199) - fdq1
                string ssModalidad = Funciones.CheckStr(HttpContext.Current.Session["SesionModalidad"]);
                string ssCedente = Funciones.CheckStr(HttpContext.Current.Session["SesionOperador"]);
                _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "Modalidad a guardar", strModalidad), null);
                _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "Operador cedente a guardar", strCodigoCedente), null);
                _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "Modalidad evaluada", ssModalidad), null);
                _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "Operador evaluado", ssCedente), null);

                if (ssModalidad != strModalidad || ssCedente != strCodigoCedente || ssModalidad.ToUpper() == AppSettings.consValorPost || ssModalidad.ToUpper() == AppSettings.consValorPre) //INC000002628010 + 3
                {
                    _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "Modalidad presenta incongruencias, formatos permitidos: 02_Postpago, 01_Prepago ==>", strModalidad), null); //INC000002628010 + 3
                    HttpContext.Current.Session["SesionModalidad"] = null;
                    HttpContext.Current.Session["SesionOperador"] = null;
                    return false;
                }

                string[] arrOperador = HttpContext.Current.Session["OperadorCedente"].ToString().Split('|'); //INC000002628010 + 3
                int cont = 0;
                for (int i = 0; i < arrOperador.Count(); i++)
                {
                    if (ssCedente == arrOperador[i].ToString())
                    {
                        cont = cont + 1;
                    }
                }
                if (cont != 1)
                {
                    _objLog.CrearArchivolog("[Validacion Antifraude]", string.Format("{0}:{1}", "el operador presenta incongruencias: ", ssCedente), null); //INC000002628010 + 3
                    HttpContext.Current.Session["SesionModalidad"] = null;
                    HttpContext.Current.Session["SesionOperador"] = null;
                    return false;
                }
                //INC000002628010 + 3

            }
            //FIN VALIDACION ANTIFRAUDE INC000002547199


            if (objCliente.tipoDoc == strTipoDocRUC)
            {
                objDataCreditoCorp = (BEEmpresaExperto)HttpContext.Current.Session["objClienteDC" + nroDocumento];
                strCodRiesgo = objDataCreditoCorp.strRiesgo;
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][objDataCreditoCorp.strRiesgo]", strCodRiesgo), null, null);
            }
            else
            {
                objDataCredito = (BEDataCreditoOUT)HttpContext.Current.Session["objClienteDC" + nroDocumento];
                strCodRiesgo = objDataCredito.ACCION;
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][objDataCredito.ACCION]", strCodRiesgo), null, null);

            }

            string strModalidadVenta = hidModalidadVenta.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][strModalidadVenta]", strModalidadVenta), null, null);
            string strCodCuotas = ConfigurationManager.AppSettings["constCodModalidadCuota"].ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][ConfigurationManager.AppSettings[constCodModalidadCuota]]", strCodCuotas), null, null);
            bool bValida = true;

            //validar AUTONOMIA

            string strTipoDocCliente = hidTipoDocumento.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][hidTipoDocumento]", strTipoDocCliente), null, null);
            string strAutonoHid = hidnAutonomia.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][hidnAutonomia]", strAutonoHid), null, null);
            string strRespuestaDC = hidNRespuestaDCValue.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][hidNRespuestaDCValue]", strRespuestaDC), null, null);
            string strAutonSs = objCliente.oVistaEvaluacion.planAutonomia;
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][objCliente.oVistaEvaluacion.planAutonomia]", strAutonSs), null, null);
            string strExoneracionRA = objCliente.oVistaEvaluacion.exoneraRA;
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][objCliente.oVistaEvaluacion.exoneraRA]", strExoneracionRA), null, null);

            string strHidExoneracionRA = hidnExoneracionRAValues.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][hidnExoneracionRAValues]", strHidExoneracionRA), null, null);

            string strRiesgoClaro = objCliente.oVistaEvaluacion.riesgoClaro;
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][objCliente.oVistaEvaluacion.riesgoClaro]", strRiesgoClaro), null, null);
            string strHidRiesgoClaro = hidnRiesgoClaroValue.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][strHidRiesgoClaro]", strHidRiesgoClaro), null, null);

            string strComportamiento = objCliente.oVistaEvaluacion.comportamientoPago;
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][objCliente.oVistaEvaluacion.comportamientoPago]", strComportamiento), null, null);
            string strHidComportamiento = hidnComportamiento.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][hidnComportamiento]", strHidComportamiento), null, null);

            string strHidPortabilidad = hidNTienePortabilidadValues.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][strHidPortabilidad]", strHidPortabilidad), null, null);
            string strhidnRiesgoDCValue = hidnRiesgoDCValue.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][strhidnRiesgoDCValue]", strhidnRiesgoDCValue), null, null);
            string strAdjuntarDoc = string.Empty;

            string strAutonomia = validarAutonomia(strAutonSs);
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][strAutonomia]", strAutonomia), null, null);

            string strCreditosxDC7 = "";
            string strHidCreditosxDC7 = hidCreditosxDC7.Value.ToString();

            string strCuotasBRMS = hdnCuotasBRMS.Value.ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][hdnCuotasBRMS]", strCuotasBRMS), null, null);

            if (HttpContext.Current.Session["strCuotaBRMS"] != null)
            {
                strSessCuotasBRMS = HttpContext.Current.Session["strCuotaBRMS"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[LOG_PROY_MEJORA_VALIDACIONES_EVALUACION][HttpContext.Current.Session[strCuotaBRMS]]", strSessCuotasBRMS), null, null);
            }

            // [INC000002442213][VALIDACION FRAUDE - HIDDEN INI]
            if (HttpContext.Current.Session["sessionVal_deudacliente"] != null)
            {
                string hiddenVal_deudacliente = hidDeudaCliente.Value.ToString();
                string sessionVal_deudacliente = HttpContext.Current.Session["sessionVal_deudacliente"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_deudacliente]", hiddenVal_deudacliente), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_deudacliente]", sessionVal_deudacliente), null, null);

                if (sessionVal_deudacliente != hiddenVal_deudacliente)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_deudacliente"), null, null);
            }

            if (HttpContext.Current.Session["sessionVal_BuroConsultado"] != null)
            {
                string hiddenVal_BuroConsultado = hidBuroConsultado.Value.ToString();
                string sessionVal_BuroConsultado = HttpContext.Current.Session["sessionVal_BuroConsultado"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_BuroConsultado]", hiddenVal_BuroConsultado), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_BuroConsultado]", sessionVal_BuroConsultado), null, null);
                if (sessionVal_BuroConsultado != hiddenVal_BuroConsultado)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_BuroConsultado"), null, null);
            }

            if (HttpContext.Current.Session["sessionVal_hidNroOperacionDC"] != null)
            {
                string hiddenVal_hidNroOperacionDC = hidNroOperacionDC.Value.ToString();
                string sessionVal_hidNroOperacionDC = HttpContext.Current.Session["sessionVal_hidNroOperacionDC"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_hidNroOperacionDC]", hiddenVal_hidNroOperacionDC), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidNroOperacionDC]", sessionVal_hidNroOperacionDC), null, null);
                if (sessionVal_hidNroOperacionDC != hiddenVal_hidNroOperacionDC)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_hidNroOperacionDC"), null, null);
            }

            if (HttpContext.Current.Session["sessionVal_hidListaBlackList"] != null)
            {
                string hiddenVal_hidListaBlackList = hidListaBlackList.Value.ToString();
                string sessionVal_hidListaBlackList = HttpContext.Current.Session["sessionVal_hidListaBlackList"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_hidListaBlackList]", hiddenVal_hidListaBlackList), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidListaBlackList]", sessionVal_hidListaBlackList), null, null);
                if (sessionVal_hidListaBlackList != hiddenVal_hidListaBlackList)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_hidListaBlackList"), null, null);
            }

            if (HttpContext.Current.Session["sessionVal_hidPlazoReno"] != null)
            {
                string hiddenVal_hidPlazoReno = hidPlazoReno.Value.ToString();
                string sessionVal_hidPlazoReno = HttpContext.Current.Session["sessionVal_hidPlazoReno"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_hidPlazoReno]", hiddenVal_hidPlazoReno), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidPlazoReno]", sessionVal_hidPlazoReno), null, null);
                if (sessionVal_hidPlazoReno != hiddenVal_hidPlazoReno)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_hidPlazoReno"), null, null);
            }

            if (HttpContext.Current.Session["sessionVal_hidPlanReno"] != null)
            {
                string hiddenVal_hidPlanReno = hidPlanReno.Value.ToString();
                string sessionVal_hidPlanReno = HttpContext.Current.Session["sessionVal_hidPlanReno"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_hidPlanReno]", hiddenVal_hidPlanReno), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidPlanReno]", sessionVal_hidPlanReno), null, null);
                if (sessionVal_hidPlanReno != hiddenVal_hidPlanReno)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_hidPlanReno"), null, null);
            }

            if (HttpContext.Current.Session["sessionVal_hidCantidadMotivoBloqueo"] != null)
            {
                string hiddenVal_hidCantidadMotivoBloqueo = hidCantidadMotivoBloqueo.Value.ToString();
                string sessionVal_hidCantidadMotivoBloqueo = HttpContext.Current.Session["sessionVal_hidCantidadMotivoBloqueo"].ToString();
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][hiddenVal_hidCantidadMotivoBloqueo]", hiddenVal_hidCantidadMotivoBloqueo), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][sessionVal_hidCantidadMotivoBloqueo]", sessionVal_hidCantidadMotivoBloqueo), null, null);
                if (sessionVal_hidCantidadMotivoBloqueo != hiddenVal_hidCantidadMotivoBloqueo)
                    return false;
            }
            else
            {
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002442213][LOG_VALIDACIONES_HIDDEN][No existe Session]", "sessionVal_hidCantidadMotivoBloqueo"), null, null);
            }
            // [VALIDACION FRAUDE - HIDDEN FIN]


            if (strModalidadVenta == strCodCuotas)
            {

                if (strSessCuotasBRMS.IndexOf(strCuotasBRMS) < 0)
                {
                    bValida = false;
                }
            }

            if (strCodRiesgo != strhidnRiesgoDCValue)
            {
                bValida = false;
            }

            //INC000003168568 - G.G.A - INICIO 
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000003168568][LOG_VALIDACIONES_HIDDEN][hidnCreditosxNombresV]", hidnCreditosxNombresV.Value), null, null);
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000003168568][LOG_VALIDACIONES_HIDDEN][bValida (Antes)]", bValida.ToString()), null, null);

            if (Funciones.CheckStr(hidnCreditosxNombresV.Value) != "S")
            {
                if (strAutonoHid.CompareTo(strAutonomia) != 0)
                {
                    bValida = false;
                }
            }
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000003168568][LOG_VALIDACIONES_HIDDEN][bValida (Despues)]", bValida.ToString()), null, null);

            //INC000003168568 - G.G.A - FIN 


            if (strHidExoneracionRA.CompareTo(strExoneracionRA) != 0)
            {
                bValida = false;
            }
            if (strComportamiento.CompareTo(strHidComportamiento) != 0)
            {
                bValida = false;
            }
            if (strHidRiesgoClaro.CompareTo(strRiesgoClaro) != 0)
            {
                bValida = false;
            }
            if (objCliente.tipoDoc == strTipoDocDNI)
            {
                if (strRespuestaDC.CompareTo(objDataCredito.RESPUESTA) != 0)
                {
                    bValida = false;
                }


                bool blnRespuestaDC7 = (strRespuestaDC == ConfigurationManager.AppSettings["constRespDataCredTipo7"].ToString());
                bool blnAutonomiaDC7 = (!blnRespuestaDC7 || (consultaExcepcionDC7() && blnRespuestaDC7));
                if (!blnAutonomiaDC7)
                {
                    strCreditosxDC7 = "S";
                }

                if (strCreditosxDC7 != strHidCreditosxDC7)
                {

                    bValida = false;
                }

            }


            return bValida;

        }


        private bool consultaExcepcionDC7()
        {

            var strCanal = hidnCanalValue.Value.ToString();
            var codParametroCanal = ConfigurationManager.AppSettings["COD_GRUPO_CANAL_NO_ERROR_TIPO_7"].ToString();
            var strCanalExcepcionDC7 = ObtenerParametroGeneral(codParametroCanal);

            var blnExcepcionDC7 = (strCanalExcepcionDC7.IndexOf(strCanal) > -1);

            var codParametroDoc = ConfigurationManager.AppSettings["COD_GRUPO_DOC_NO_ERROR_TIPO_7"].ToString();
            var strTipoDocExcepcionDC7 = ObtenerParametroGeneral(codParametroDoc);
            var strTipoDocClie = hidTipoDocumento.Value.ToString();

            if (blnExcepcionDC7 && (strTipoDocExcepcionDC7.IndexOf(strTipoDocClie) == -1))
                blnExcepcionDC7 = false;

            return blnExcepcionDC7;
        }
        private bool validarSoloPlanesFijo()
        {
            string strCadenaDetalle = Funciones.CheckStr(hidCadenaDetalle.Value);
            string[] arrCadenaDetalle = strCadenaDetalle.Split('|');

            string idFila = "";
            string idProducto = "";
            string[] arrDetalle;
            string plan;
            string codTipoProductoFijo = ConfigurationManager.AppSettings["constTipoProductoFijo"].ToString();
            string constTipoBilleteraFijo = ConfigurationManager.AppSettings["constClaseProductoFijo"].ToString();
            string claseProducto = "";
            for (var i = 0; i < arrCadenaDetalle.Length; i++)
            {
                if (arrCadenaDetalle[i] != "")
                {
                    idFila = arrCadenaDetalle[i].Split(';')[0];
                    idProducto = arrCadenaDetalle[i].Split(';')[1];

                    if (idProducto != codTipoProductoFijo)
                        return false;

                    arrDetalle = arrCadenaDetalle[i].Split(';');
                    plan = arrDetalle[9];

                    //  string claseProducto = getValor(plan, 7).replace(',', "");


                    if (plan.IndexOf('_') > -1)
                    {
                        string[] arrCodigo = plan.Split('_');
                        claseProducto = arrCodigo[7].Replace(",", "");
                    }

                    if (claseProducto != constTipoBilleteraFijo)
                        return false;
                }
            }

            return true;
        }

        private string validarAutonomia(string strPlanAutonomia)
        {

            string strAutonomia = "S";
            string[] arrAutonomia = strPlanAutonomia.Split('|');
            for (var i = 0; i < arrAutonomia.Length; i++)
            {
                if (arrAutonomia[i] != "")
                {
                    if (arrAutonomia[i].Split(';')[1] == "NO_CONDICION")
                    {

                        strAutonomia = "NO_CONDICION";
                    }
                    else if ((arrAutonomia[i].Split(';')[1] == "SIN_REGLAS"))
                    {
                        //setValue('hidCreditosxReglas', 'S'); // NO CUMPLE AUTONOMIA: MOTIVO --> No Existe Reglas Configuradas
                        strAutonomia = "N";
                    }
                    else if ((arrAutonomia[i].Split(';')[1] == "N"))
                        strAutonomia = "N";
                }
            }
            return strAutonomia;
        }
        //FIN PROY-REC

        //INC000002407392:INI

        private bool validarLineasSMS()
        {
            bool bValidaSMS = true;
            GeneradorLog _objLog = CrearLog(hidUsuarioRed.Value.ToString());
            _objLog.CrearArchivolog(string.Format("{0}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][validarLineasSMS][INICIO]"), null, null);
            string lineasSMS = HttpContext.Current.Session["listTelefono"].ToString();
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][HttpContext.Current.Session['listTelefono']", lineasSMS), null, null);
            string strCadenaEvaluacion = Funciones.CheckStr(hidCadenaDetalle.Value);
            _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][strCadenaEvaluacion]", strCadenaEvaluacion), null, null);
            string[] arrPlanes = strCadenaEvaluacion.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

            foreach (string strPlanes in arrPlanes)
            {
                string[] strPlanFila = strPlanes.Split(';');
                string strTelefonoPorta = strPlanFila[30];
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][strPlanFila]", strPlanFila), null, null);
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][strPlanFila[30]]", strTelefonoPorta), null, null);
                if (lineasSMS.IndexOf(strTelefonoPorta) < 0)
                {
                    _objLog.CrearArchivolog(string.Format("{0}=>{1}|{2}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][lineasSMS][strTelefonoPorta]", lineasSMS, strTelefonoPorta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][validarLineasSMS][FIN]"), null, null);
                    return bValidaSMS = false;
                }
            }

            _objLog.CrearArchivolog(string.Format("{0}", "[INC000002407392][LOG_PROY_MEJORA_VALIDACIONEN_PIN_SMS][validarLineasSMS][FIN]"), null, null);
            return bValidaSMS;
        }

        //INC000002407392:FIN

        /*INICIO PROY140542 - IDEA141640 Mejora en Proceso de Omision de PIN SMS de portabilidad*/
        private static void GrabarOmisionPIN(Int64 nroSec, string tipoDoc, string nroDoc, string puntoVenta, List<BEPlanDetalleVenta> listaPlanDetalle)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDoc, null, "WEB");
            _objLog.CrearArchivolog("INICIO PROY-140542 - IDEA141640 Mejora en Proceso de Omisión de PIN SMS de portabilidad", null, null);

            try
            {
                Int32 consecutivo = 0;
                string idCausalOmision = string.Empty;
                string descCausalOmision = string.Empty;
                string strCodigoPDV = Funciones.CheckStr(puntoVenta.Split(',')[0]);
                string strDescripcionPDV = Funciones.CheckStr(puntoVenta.Split(',')[1]);
                string strCanalPDV = Funciones.CheckStr(puntoVenta.Split(',')[2]);
                string strtipoventa = "01";
                string usuarioValidador = (string)HttpContext.Current.Session["UsuarioSupervisor"];
                string CurrentNodoSisact = Funciones.CheckStr(System.Net.Dns.GetHostName());
                string ArraycausalOmision = (string)HttpContext.Current.Session["CausalOmision"];
                if (!string.IsNullOrEmpty(ArraycausalOmision))
                {
                    idCausalOmision = ArraycausalOmision.Split('_')[0];
                    descCausalOmision = ArraycausalOmision.Split('_')[1];
                }

                string idTransaccion = string.Empty;
                string codigoRespuestaServidor = string.Empty;
                string mensajeRespuestaServidor = string.Empty;

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][nroSec]", Funciones.CheckStr(nroSec)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][tipoDoc]", Funciones.CheckStr(tipoDoc)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][nroDoc]", Funciones.CheckStr(nroDoc)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][strCodigoPDV]", strCodigoPDV), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][strDescripcionPDV]", strDescripcionPDV), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][strCanalPDV]", strCanalPDV), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][idCausalOmision]", idCausalOmision), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - GrabarOmisionPIN][descCausalOmision]", descCausalOmision), null, null);

                RestRegistrarOmisionPIN objRestRegistrarOmisionPIN = new RestRegistrarOmisionPIN();
                BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();
                RequestRegistrarOmisionPIN objRequestRegistrarOmisionPIN = new RequestRegistrarOmisionPIN();
                ResponseRegistrarOmisionPIN objResponseRegistrarOmisionPIN = new ResponseRegistrarOmisionPIN();
                BECabeceraOmisionPIN objCabeceraOmisionPIN = new BECabeceraOmisionPIN();
                BodyRequestRegistrarOmisionPIN objBodyRequestRegistrarOmisionPIN = new BodyRequestRegistrarOmisionPIN();
                List<BEDetalleOmisionPIN> listDetalleOmisionPIN = new List<BEDetalleOmisionPIN>();
                Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();


                #region Header
                objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_consumer"]);
                objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_country"]);
                objHeaderRequest.dispositivo = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal;
                objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_language"]);
                objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_modulo"]);
                objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_msgtype"]);
                objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_operation"]);
                objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["OmisionPINService_system"]);
                objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                objHeaderRequest.userId = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                objHeaderRequest.wsIp = ConfigurationManager.AppSettings["OmisionPINService_wsip"];

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.consumer]", Funciones.CheckStr(objHeaderRequest.consumer)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.country]", Funciones.CheckStr(objHeaderRequest.country)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.dispositivo]", Funciones.CheckStr(objHeaderRequest.dispositivo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.modulo]", Funciones.CheckStr(objHeaderRequest.modulo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.msgType]", Funciones.CheckStr(objHeaderRequest.msgType)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.operation]", Funciones.CheckStr(objHeaderRequest.operation)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.pid]", Funciones.CheckStr(objHeaderRequest.pid)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.system]", Funciones.CheckStr(objHeaderRequest.system)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.timestamp]", Funciones.CheckStr(objHeaderRequest.timestamp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.userId]", Funciones.CheckStr(objHeaderRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objHeaderRequest.wsIp]", Funciones.CheckStr(objHeaderRequest.wsIp)), null, null);
                objRequestRegistrarOmisionPIN.MessageRequest.header.HeaderRequest = objHeaderRequest;
                #endregion


                #region Body

                objCabeceraOmisionPIN.nroSec = Funciones.CheckStr(nroSec);
                objCabeceraOmisionPIN.tipoDoc = tipoDoc;
                objCabeceraOmisionPIN.numDoc = nroDoc;
                objCabeceraOmisionPIN.usuAutorizador = usuarioValidador;
                objCabeceraOmisionPIN.codPDV = strCodigoPDV;
                objCabeceraOmisionPIN.descPDV = strDescripcionPDV;
                objCabeceraOmisionPIN.canalPDV = strCanalPDV;
                objCabeceraOmisionPIN.tipoVenta = strtipoventa;
                objCabeceraOmisionPIN.nodo = CurrentNodoSisact;
                objCabeceraOmisionPIN.usuRegistro = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                objCabeceraOmisionPIN.idCausal = idCausalOmision;
                objCabeceraOmisionPIN.desCausal = descCausalOmision;

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.NroSec]", Funciones.CheckStr(objCabeceraOmisionPIN.nroSec)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.TipoDocumento]", Funciones.CheckStr(objCabeceraOmisionPIN.tipoDoc)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.NroDocumento]", Funciones.CheckStr(objCabeceraOmisionPIN.numDoc)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.usuAutorizador]", Funciones.CheckStr(objCabeceraOmisionPIN.usuAutorizador)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.codPDV]", Funciones.CheckStr(objCabeceraOmisionPIN.codPDV)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.descPDV]", Funciones.CheckStr(objCabeceraOmisionPIN.descPDV)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.canalPDV]", Funciones.CheckStr(objCabeceraOmisionPIN.canalPDV)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.tipoVenta]", Funciones.CheckStr(objCabeceraOmisionPIN.tipoVenta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.nodo]", Funciones.CheckStr(objCabeceraOmisionPIN.nodo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.usuRegistro]", Funciones.CheckStr(objCabeceraOmisionPIN.usuRegistro)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.idCausal]", Funciones.CheckStr(objCabeceraOmisionPIN.idCausal)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objBodyRequest.datosCabeceraFC.desCausal]", Funciones.CheckStr(objCabeceraOmisionPIN.desCausal)), null, null);


                foreach (var producto in listaPlanDetalle)
                {
                    BEDetalleOmisionPIN objDetalleOmisionPIN = new BEDetalleOmisionPIN();
                    consecutivo++;
                    objDetalleOmisionPIN.linea = producto.TELEFONO;
                    objDetalleOmisionPIN.consecutivo = Funciones.CheckStr(consecutivo);
                    _objLog.CrearArchivolog(String.Format("{0} --> {1} || {2} --> {3}", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][objDetalleOmisionPIN.consecutivo]", Funciones.CheckStr(objDetalleOmisionPIN.consecutivo), "[objDetalleOmisionPIN.linea]", Funciones.CheckStr(objDetalleOmisionPIN.linea)), null, null);

                    listDetalleOmisionPIN.Add(objDetalleOmisionPIN);
                }
                objCabeceraOmisionPIN.detalleOmision = listDetalleOmisionPIN;

                objBodyRequestRegistrarOmisionPIN.registrarOmisionPinRequest = objCabeceraOmisionPIN;
                objRequestRegistrarOmisionPIN.MessageRequest.body = objBodyRequestRegistrarOmisionPIN;
                #endregion


                #region Auditoria
                objBEAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBEAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                objBEAuditoriaRequest.accept = "application/json";
                objBEAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                #endregion

                #region Response
                objResponseRegistrarOmisionPIN = objRestRegistrarOmisionPIN.registrarOmisionPIN(objRequestRegistrarOmisionPIN, objBEAuditoriaRequest);

                idTransaccion = objResponseRegistrarOmisionPIN.MessageResponse.body.responseAudit.idTransaccion;
                codigoRespuestaServidor = objResponseRegistrarOmisionPIN.MessageResponse.body.responseAudit.codigoRespuesta;
                mensajeRespuestaServidor = objResponseRegistrarOmisionPIN.MessageResponse.body.responseAudit.mensajeRespuesta;

                _objLog.CrearArchivolog("[PROY-140542 - Servicio Registra Omision PIN en PVUDB] -> objResponseRegistrarOmisionPIN.idTransaccion : " + idTransaccion, null, null);
                _objLog.CrearArchivolog("[PROY-140542 - Servicio Registra Omision PIN en PVUDB] -> objResponseRegistrarOmisionPIN.codigoRespuestaServidor : " + codigoRespuestaServidor, null, null);
                _objLog.CrearArchivolog("[PROY-140542 - Servicio Registra Omision PIN en PVUDB] -> objResponseRegistrarOmisionPIN.mensajeRespuestaServidor : " + mensajeRespuestaServidor, null, null);
                #endregion

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[PROY-140542 - Servicio Registra Omision PIN en PVUDB][Error]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("INICIO PROY-140542 - IDEA141640 Mejora en Proceso de Omision de PIN SMS de portabilidad", null, null);

        }
        /*FIN PROY140542 - IDEA141640 Mejora en Proceso de Omision de PIN SMS de portabilidad*/

        //PROY-140439 BRMS CAMPAÑA NAVIDEÑA::INI
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarParametrosCampanaBRMS(string nroDocumento, string tDocumento, string canal, string mVenta, string tOferta, string tOperacion, string tProducto, string flagPorta, string modcedente, string opeceden)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            Boolean resp = false;

            try
            {
                objLog.CrearArchivolog("[INICIO][ValidarParametrosCampanaBRMS]", null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_canalesBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_canalesBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_mventaBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_mventaBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_tofertaBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_tofertaBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_tdocumentoBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_tdocumentoBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_toperacionBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_toperacionBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_tproductoBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_tproductoBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_fportabilidaBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_fportabilidaBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_flagBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_flagBRMSCamp)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][OUT | Key_vtaCuo_tipoOpeBRMSCamp]", Funciones.CheckStr(ReadKeySettings.Key_vtaCuo_tipoOpeBRMSCamp)), null, null);//PROY-140743
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | tDocumento]", Funciones.CheckStr(tDocumento)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | canal]", Funciones.CheckStr(canal)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | mVenta]", Funciones.CheckStr(mVenta)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | tOferta]", Funciones.CheckStr(tOferta)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | tOperacion]", Funciones.CheckStr(tOperacion)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | tProducto]", Funciones.CheckStr(tProducto)), null, null);
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][PARAMETRICA][IN | flagPorta]", Funciones.CheckStr(flagPorta)), null, null);

                /////////////////////////////////INC000002628010 + 3////////////////////////////////////////////
                if (flagPorta == "S")
                {
                    HttpContext.Current.Session["SesionModalidad"] = modcedente;
                    HttpContext.Current.Session["SesionOperador"] = opeceden;
                    objLog.CrearArchivolog("[CapturaParametrosaEnviarBRMS] se captura la modalidad y el operador cedente", null, null);
                    objLog.CrearArchivolog("[CapturaParametrosaEnviarBRMS] modalidad cedente: " + HttpContext.Current.Session["SesionModalidad"].ToString(), null, null);
                    objLog.CrearArchivolog("[CapturaParametrosaEnviarBRMS] operador cedente: " + HttpContext.Current.Session["SesionOperador"].ToString(), null, null);
                }
                /////////////////////////////////INC000002628010 + 3////////////////////////////////////////////

                if (Funciones.CheckStr(ReadKeySettings.Key_flagBRMSCamp).Equals("1"))
                {
                    objLog.CrearArchivolog("[ValidarParametrosCampanaBRMS] Flag encendido", null, null);
                    if (ReadKeySettings.Key_canalesBRMSCamp.IndexOf(canal) > -1 && ReadKeySettings.Key_mventaBRMSCamp.IndexOf(mVenta) > -1 &&
                        ReadKeySettings.Key_tofertaBRMSCamp.IndexOf(tOferta) > -1 && ReadKeySettings.Key_tdocumentoBRMSCamp.IndexOf(tDocumento) > -1 &&
                        (ReadKeySettings.Key_toperacionBRMSCamp.IndexOf(tOperacion) > -1 || ReadKeySettings.Key_vtaCuo_tipoOpeBRMSCamp.IndexOf(tOperacion) > -1) && ReadKeySettings.Key_tproductoBRMSCamp.IndexOf(tProducto) > -1)//PROY-140743
                    {
                        objLog.CrearArchivolog("[ValidarParametrosCampanaBRMS] Cumple condiciones de tabla parametros", null, null);
                        if (flagPorta == "S")
                        {
                            resp = ReadKeySettings.Key_fportabilidaBRMSCamp == "S" ? true : false;
                            objLog.CrearArchivolog("[ValidarParametrosCampanaBRMS] Tipo de operacion porta y Key_fportabilidaBRMSCamp encendido", null, null);
                        }
                        else
                        {
                            resp = true;
                            objLog.CrearArchivolog("[ValidarParametrosCampanaBRMS] Tipo de operacion no es porta.", null, null);
                        }

                    }
                }
                else
                {
                    objLog.CrearArchivolog("[ValidarParametrosCampanaBRMS] Flag apagado", null, null);
                }
                objLog.CrearArchivolog(string.Format("{0} --> {1}", "[ValidarParametrosCampanaBRMS][Validacion| resp]", Funciones.CheckStr(resp)), null, null);
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[ERROR][ValidarParametrosCampanaBRMS]", ex.Message, ex.StackTrace), null, null);
            }

            objResponse.Boleano = resp;
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[ValidarParametrosCampanaBRMS] - Boleano", "", Funciones.CheckStr(objResponse.Boleano)), null, null);
            objLog.CrearArchivolog("[FIN][ValidarParametrosCampanaBRMS]", null, null);
            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validacionCampanaBRMS(string nroDocumento, string nroOperacionBuro, string strCadenaDatos, string strTieneProteccionMovil, string strBuroConsultado, string CodTipoProductoActual, string prodFacturar)//PROY-140743
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            Boolean Boolrespuesta = false;
            try
            {
                objLog.CrearArchivolog("[INICIO][validacionCampanaBRMS]", null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[validacionCampanaBRMS][nroDocumento]", nroDocumento), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[validacionCampanaBRMS][nroOperacionBuro]", nroOperacionBuro), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[validacionCampanaBRMS][strCadenaDatos]", strCadenaDatos), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[validacionCampanaBRMS][strTieneProteccionMovil]", strTieneProteccionMovil), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[validacionCampanaBRMS][strBuroConsultado]", strBuroConsultado), null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[validacionCampanaBRMS][CodTipoProductoActual]", CodTipoProductoActual), null, null);

                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];

                if (objCliente == null || objCliente.oLCDisponiblexBilletera == null)
                {
                    objResponse.Error = true;
                    objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjPerdidaSesion"];
                    objResponse.Boleano = false;
                    objLog.CrearArchivolog("[ERROR][validacionCampanaBRMS]", objResponse.Mensaje, null);
                    objLog.CrearArchivolog("[FIN][validacionCampanaBRMS]", null, null);
                    return objResponse;
                }

                List<BEDireccionCliente> objDireccion = (List<BEDireccionCliente>)HttpContext.Current.Session["objDireccion" + nroDocumento];
                objCliente.nroOperacionBuro = nroOperacionBuro;
                objCliente.buroConsultado = strBuroConsultado;
                objCliente.totalplanes = 1;

                string strTipoDocumento = objCliente.tipoDoc;
                string strNroDocumento = objCliente.nroDoc;
                string strNroLinea = string.Empty;

                BECuota objCuotaOAC = new BECuota();
                BECuota objCuotaPVU = new BECuota();
                objCuotaOAC = (BECuota)HttpContext.Current.Session["objCuotaOAC"];
                objCuotaPVU = (BECuota)HttpContext.Current.Session["objCuotaPVU"];

                if (objCuotaOAC == null && objCuotaPVU == null)
                {
                    WebComunes.ConsultarCuotasPendientes(strTipoDocumento, strNroDocumento, strNroLinea, ref objCuotaOAC, ref objCuotaPVU);
                }

                //PROY-140579 INICIO
                HttpContext.Current.Session["objClienteDI"] = null;
                string objClienteDI = strTipoDocumento + "|" + strNroDocumento + "|" + "Validacion Campana";
                HttpContext.Current.Session["objClienteDI"] = objClienteDI;
                //PROY-140579 FIN

                WS.WSReglasCrediticia.ClaroEvalClientesReglasRequest oRequestReglasCrediticia = new WS.WSReglasCrediticia.ClaroEvalClientesReglasRequest();
                BEVistaEvaluacion obj = (new BLReglaCrediticia()).ValidacionCampana(objCliente, objDireccion, strCadenaDatos, strTieneProteccionMovil, CodTipoProductoActual, objCuotaOAC, objCuotaPVU, Funciones.CheckStr(prodFacturar));
                objCliente.oVistaEvaluacion = obj;
                //PROY-140585 INI
                StringBuilder sbReglasCreditos = new StringBuilder();

                sbReglasCreditos.Append(obj.oOfrecimiento[0].MaximoCuotas);
                sbReglasCreditos.Append('#');
                sbReglasCreditos.Append(obj.oOfrecimiento[0].PrecioEquipoMaximo);
                sbReglasCreditos.Append('#');
                sbReglasCreditos.Append(obj.oOfrecimiento[0].MostrarMensaje);

                objResponse.Cadena = sbReglasCreditos.ToString();
                //PROY-140585

                HttpContext.Current.Session["CampanasNavidad"] = obj.oOfrecimiento[0].CampanasNavidad;
                HttpContext.Current.Session["objCliente" + nroDocumento] = objCliente;

                Boolrespuesta = GrabarBRMS_ValidacionCampanas(nroDocumento);
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[ERROR][validacionCampanaBRMS]", ex.Message, ex.StackTrace), null, null);
            }
            objLog.CrearArchivolog("[FIN][validacionCampanaBRMS]", null, null);
            objResponse.Boleano = Boolrespuesta;
            return objResponse;
        }

        private static Boolean GrabarBRMS_ValidacionCampanas(string nroDocumento)
        {
            Boolean bolResp = false;
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            try
            {
                objLog.CrearArchivolog("[INICIO][GrabarBRMS_ValidacionCampanas]", null, null);
                objLog.CrearArchivolog(string.Format("{0} => {1}", "[GrabarBRMS_ValidacionCampanas][nroDocumento]", nroDocumento), null, null);

                BEClienteCuenta objCliente = (BEClienteCuenta)HttpContext.Current.Session["objCliente" + nroDocumento];
                List<BEOfrecimiento> oListOfrecimiento = (List<BEOfrecimiento>)objCliente.oVistaEvaluacion.oOfrecimiento;
              

                Int32 IdSol = 0;

                foreach (var obj in oListOfrecimiento)
                {
                    BEOfrecimiento oOfrecimiento = new BEOfrecimiento();
                    IdSol++;
                    oOfrecimiento.IdProducto = obj.IdProducto;
                    oOfrecimiento.TipoDocCli = obj.TipoDocCli;
                    oOfrecimiento.NumDocCli = obj.NumDocCli;
                    oOfrecimiento.In_solicitud = obj.In_solicitud;
                    oOfrecimiento.In_cliente = obj.In_cliente;
                    oOfrecimiento.In_direccion_cliente = obj.In_direccion_cliente;
                    oOfrecimiento.In_doc_cliente = obj.In_doc_cliente;
                    oOfrecimiento.In_rrll_cliente = obj.In_rrll_cliente;
                    oOfrecimiento.In_equipo = obj.In_equipo;
                    oOfrecimiento.In_oferta = obj.In_oferta;
                    oOfrecimiento.In_campana = obj.In_campana;
                    oOfrecimiento.In_plan_actual = obj.In_plan_actual;
                    oOfrecimiento.In_plan_solicitado = obj.In_plan_solicitado;
                    oOfrecimiento.In_servicio = obj.In_servicio;
                    oOfrecimiento.In_pdv = obj.In_pdv;
                    oOfrecimiento.In_direccion_pdv = obj.In_direccion_pdv;
                    oOfrecimiento.CantidadDeAplicacionesRenta = obj.CantidadDeAplicacionesRenta;
                    oOfrecimiento.CantidadDeLineasAdicionalesRUC = obj.CantidadDeLineasAdicionalesRUC;
                    oOfrecimiento.CantidadDeLineasMaximas = obj.CantidadDeLineasMaximas;
                    oOfrecimiento.AutonomiaRenovacion = obj.AutonomiaRenovacion;
                    oOfrecimiento.CapacidadDePago = obj.CapacidadDePago;
                    oOfrecimiento.ComportamientoConsolidado = obj.ComportamientoConsolidado;
                    oOfrecimiento.ComportamientoDePagoC1 = obj.ComportamientoDePagoC1;
                    oOfrecimiento.ControlDeConsumo = obj.ControlDeConsumo;
                    oOfrecimiento.CostoDeInstalacion = obj.CostoDeInstalacion;
                    oOfrecimiento.CostoTotalEquipos = obj.CostoTotalEquipos;
                    oOfrecimiento.FactorDeEndeudamientoCliente = obj.FactorDeEndeudamientoCliente;
                    oOfrecimiento.FactorDeRenovacionCliente = obj.FactorDeRenovacionCliente;
                    oOfrecimiento.FrecuenciaDeAplicacionMensual = obj.FrecuenciaDeAplicacionMensual;
                    oOfrecimiento.LimiteDeCreditoCobranza = obj.LimiteDeCreditoCobranza;
                    oOfrecimiento.MesInicioRentas = obj.MesInicioRentas;
                    oOfrecimiento.MontoCFParaRUC = obj.MontoCFParaRUC;
                    oOfrecimiento.MontoDeGarantia = obj.MontoDeGarantia;
                    oOfrecimiento.MontoTopeAutomatico = obj.MontoTopeAutomatico;
                    oOfrecimiento.PrecioDeVentaTotalEquipos = obj.PrecioDeVentaTotalEquipos;
                    oOfrecimiento.PrioridadPublicar = obj.PrioridadPublicar;
                    oOfrecimiento.ProcesoDeExoneracionDeRentas = obj.ProcesoDeExoneracionDeRentas;
                    oOfrecimiento.ProcesoIDValidator = obj.ProcesoIDValidator;
                    oOfrecimiento.ProcesoValidacionInternaClaro = obj.ProcesoValidacionInternaClaro;
                    oOfrecimiento.Publicar = obj.Publicar;
                    oOfrecimiento.Restriccion = obj.Restriccion;
                    oOfrecimiento.RiesgoEnClaro = obj.RiesgoEnClaro;
                    oOfrecimiento.RiesgoOferta = obj.RiesgoOferta;
                    oOfrecimiento.RiesgoTotalEquipo = obj.RiesgoTotalEquipo;
                    oOfrecimiento.RiesgoTotalRepLegales = obj.RiesgoTotalRepLegales;
                    oOfrecimiento.TipoDeAutonomiaCargoFijo = obj.TipoDeAutonomiaCargoFijo;
                    oOfrecimiento.Tipodecobro = obj.Tipodecobro;
                    oOfrecimiento.TipoDeGarantia = obj.TipoDeGarantia;
                    oOfrecimiento.Mensaje = obj.Mensaje;
                    oOfrecimiento.FormaPago = obj.FormaPago;
                    oOfrecimiento.NroCuota = obj.NroCuota;
                    oOfrecimiento.Lista_ofrecimientocampanas = obj.Lista_ofrecimientocampanas;
                    oOfrecimiento.MaximoCuotas = obj.MaximoCuotas; //PROY-140585
                    oOfrecimiento.PrecioEquipoMaximo = obj.PrecioEquipoMaximo; //PROY_140585
                    oOfrecimiento.MostrarMensaje = obj.MostrarMensaje; //PROY-140585
                    oOfrecimiento.MotivoDeRestriccion = obj.MotivoDeRestriccion; //PROY-140579
                    oOfrecimiento.MostrarMotivoDeRestriccion = obj.MostrarMotivoDeRestriccion; //PROY-140579

                    objLog.CrearArchivolog("[INC000004091065][sisact_evaluacion_unificada.aspx.cs][GrabarBRMS_ValidacionCampanas]", string.Format("{0}:{1}", "oOfrecimiento", Funciones.CheckStr(new JavaScriptSerializer().Serialize(oOfrecimiento))), null);

                    Int64 idBRMS = BLEvaluacion.InsertarDatosBRMSValidacionCampanas(oOfrecimiento);
                    StringBuilder stridBRMSCampanas = new StringBuilder();
                    stridBRMSCampanas.Append(Funciones.CheckStr(HttpContext.Current.Session["idBRMS_Campanas"]));
                    stridBRMSCampanas.Append(idBRMS);
                    stridBRMSCampanas.Append(",");
                    HttpContext.Current.Session["idBRMS_Campanas"] = Funciones.CheckStr(stridBRMSCampanas);

                    objLog.CrearArchivolog(string.Format("{0} => {1}", "[GrabarBRMS_ValidacionCampanas][idBRMS]", Funciones.CheckStr(idBRMS)), null, null);


                }
                bolResp = true;
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[ERROR][GrabarBRMS_ValidacionCampanas]", ex.Message, ex.StackTrace), null, null);
            }
            objLog.CrearArchivolog(string.Format("{0} => {1}", "[GrabarBRMS_ValidacionCampanas][Respuesta]", bolResp), null, null);
            objLog.CrearArchivolog("[FIN][GrabarBRMS_ValidacionCampanas]", null, null);

            return bolResp;
        }
        //PROY-140439 BRMS CAMPAÑA NAVIDEÑA::FIN

        //PROY-140457-DEBITO AUTOMATICO-INI
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validarComboRetail(string strOficina, string strProducto, string strOperacion, string strFlagPorta, string strModalidad, string strCadenaDetalle)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail]", "[INICIO]"), null, null);
            bool boleano = true;
            BEResponseWebMethod response = new BEResponseWebMethod();
            try
            {
                string strCanal = Funciones.CheckStr(strOficina.Split(',')[2]);
                string campanas = Funciones.CheckStr(ReadKeySettings.Key_campanasRestriccion);

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strOficina]", Funciones.CheckStr(strOficina)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strCanal]", Funciones.CheckStr(strCanal)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strProducto]", Funciones.CheckStr(strProducto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strOperacion]", Funciones.CheckStr(strOperacion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strFlagPorta]", Funciones.CheckStr(strFlagPorta)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strModalidad]", Funciones.CheckStr(strModalidad)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strCadenaDetalle]", Funciones.CheckStr(strCadenaDetalle)), null, null);

                //Validamos que haya campañas combo Retail
                bool valor = ValidarCampDebitoAutomatico(strCanal, strProducto, strOperacion, strFlagPorta, strModalidad, campanas, strCadenaDetalle);

                //Validamos que todas las campañas sean combo Retail
                if (valor)
                    boleano = CampanasComboRetail(strCadenaDetalle, campanas);
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][ERROR]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][Resultado de validacion]", boleano), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail]", "[FIN]"), null, null);
            response.Boleano = boleano;
            response.Cadena = "Todas las campañas deben ser combo retail.";
            return response;
        }

        private static bool CampanasComboRetail(string strCadenaDetalle, string campanas)
        {
            bool boleanoCamp = false;
            string[] ArrayCampana = null;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][CampanasComboRetail]", "[INICIO]"), null, null);
            try
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][strCadenaDetalle]", Funciones.CheckStr(strCadenaDetalle)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][validarComboRetail][campanas]", Funciones.CheckStr(campanas)), null, null);

                List<BEPlanDetalleVenta> arrDetalle = ObtenerCampana(strCadenaDetalle);
                foreach (var item in arrDetalle)
                {
                    if (!string.IsNullOrEmpty(campanas))
                    {
                        ArrayCampana = campanas.Split('|');
                        if (ArrayCampana != null)
                        {
                            for (int i = 0; i < ArrayCampana.Length; i++)
                            {
                                if (ArrayCampana[i] == item.CAMPANA)
                                {
                                    boleanoCamp = true;
                                    break;
                                }
                                else
                                {
                                    boleanoCamp = false;
                                }
                            }
                            if (boleanoCamp == false)
                                break;
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140457-DEBITO AUTOMATICO][CampanasComboRetail][ERROR]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][CampanasComboRetail][Campañas combo retail iguales]", boleanoCamp), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][CampanasComboRetail]", "[FIN]"), null, null);
            return boleanoCamp;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarDebitoAutomatico(string strOficina, string strProducto, string strDocumento, string strOperacion, string strFlagPorta, string strOferta, string strModalidad, string strCadenaDetalle)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico]", "[INICIO]"), null, null);
            bool principal = false;
            bool alterno = false;
            string cadena = string.Empty;
            BEResponseWebMethod response = new BEResponseWebMethod();
            double montoMax = 0;
            try
            {
                string strCanal = Funciones.CheckStr(strOficina.Split(',')[2]);
                string campanas = Funciones.CheckStr(ReadKeySettings.Key_campanasRestriccion);

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strOficina]", Funciones.CheckStr(strOficina)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strCanal]", Funciones.CheckStr(strCanal)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strProducto]", Funciones.CheckStr(strProducto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strDocumento]", Funciones.CheckStr(strDocumento)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strOperacion]", Funciones.CheckStr(strOperacion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strFlagPorta]", Funciones.CheckStr(strFlagPorta)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strOferta]", Funciones.CheckStr(strOferta)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strModalidad]", Funciones.CheckStr(strModalidad)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][strCadenaDetalle]", Funciones.CheckStr(strCadenaDetalle)), null, null);

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Key_canalesDebitoAuto]", Funciones.CheckStr(ReadKeySettings.Key_canalesDebitoAuto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Key_tdocumentoDebitoAuto]", Funciones.CheckStr(ReadKeySettings.Key_tdocumentoDebitoAuto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Key_tproductoDebitoAuto]", Funciones.CheckStr(ReadKeySettings.Key_tproductoDebitoAuto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Key_toperacionDebitoAuto]", Funciones.CheckStr(ReadKeySettings.Key_toperacionDebitoAuto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Key_flagPortaDebitoAuto]", Funciones.CheckStr(ReadKeySettings.Key_flagPortaDebitoAuto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Key_OfertaDebitoAuto]", Funciones.CheckStr(ReadKeySettings.Key_OfertaDebitoAuto)), null, null);

                if (ReadKeySettings.Key_canalesDebitoAuto.IndexOf(strCanal) > -1 && ReadKeySettings.Key_tproductoDebitoAuto.IndexOf(strProducto) > -1 &&
                ReadKeySettings.Key_tdocumentoDebitoAuto.IndexOf(strDocumento) > -1 && ReadKeySettings.Key_OfertaDebitoAuto.IndexOf(strOferta) > -1)
                {
                    if (strFlagPorta == "S")
                    {
                        principal = Funciones.CheckStr(ReadKeySettings.Key_flagPortaDebitoAuto) == "S" ? true : false;
                    }
                    else
                    {
                        if (ReadKeySettings.Key_toperacionDebitoAuto.IndexOf(strOperacion) > -1)
                        {
                            principal = true;
                        }
                    }
                }

                if (principal)
                {
                    alterno = ValidarCampDebitoAutomatico(strCanal, strProducto, strOperacion, strFlagPorta, strModalidad, campanas, strCadenaDetalle);
                    montoMax = ObtenerMontoMaximo(strModalidad, strCadenaDetalle, strProducto);
                }

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][ERROR]", ex.Message, ex.StackTrace), null, null);
            }
            response.Boleano = principal;
            response.Obligatorio = alterno;
            response.MontoMaximo = montoMax;

            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Mostrar PopPup de Afiliación al débito automatico]", principal), null, null);
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico][Restricción de campañas]", alterno), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarDebitoAutomatico]", "[FIN]"), null, null);

            return response;

        }

        private static bool ValidarCampDebitoAutomatico(string strCanal, string strProducto, string strOperacion, string strFlagPorta, string strModalidad, string strCampanas, string strCadenaDetalle)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico]", "[INICIO]"), null, null);
            bool boleano = false;
            try
            {
                string[] ArrayCamp = null;
                string strvalorRes = string.Empty;

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strCanal]", Funciones.CheckStr(strCanal)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strProducto]", Funciones.CheckStr(strProducto)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strOperacion]", Funciones.CheckStr(strOperacion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strFlagPorta]", Funciones.CheckStr(strFlagPorta)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strModalidad]", Funciones.CheckStr(strModalidad)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strCampanas]", Funciones.CheckStr(strCampanas)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][strCadenaDetalle]", Funciones.CheckStr(strCadenaDetalle)), null, null);

                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Key_tOperacionRestriccion]", Funciones.CheckStr(ReadKeySettings.Key_tOperacionRestriccion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Key_canalesRestriccion]", Funciones.CheckStr(ReadKeySettings.Key_canalesRestriccion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Key_productoRestriccion]", Funciones.CheckStr(ReadKeySettings.Key_productoRestriccion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Key_mVentaRestriccion]", Funciones.CheckStr(ReadKeySettings.Key_mVentaRestriccion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Key_campanasRestriccion]", Funciones.CheckStr(ReadKeySettings.Key_campanasRestriccion)), null, null);
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Key_flagPortaRestriccion]", Funciones.CheckStr(ReadKeySettings.Key_flagPortaRestriccion)), null, null);

                List<BEPlanDetalleVenta> arrDetalle = ObtenerCampana(strCadenaDetalle);

                if (ReadKeySettings.Key_canalesRestriccion.IndexOf(strCanal) > -1 && ReadKeySettings.Key_productoRestriccion.IndexOf(strProducto) > -1 &&
                            ReadKeySettings.Key_mVentaRestriccion.IndexOf(strModalidad) > -1)
                {
                    if (strFlagPorta == "S")
                    {
                        if (Funciones.CheckStr(ReadKeySettings.Key_flagPortaRestriccion) == "S")
                        {
                            if (!string.IsNullOrEmpty(strCampanas))
                            {
                                ArrayCamp = strCampanas.Split('|');
                                if (ArrayCamp != null)
                                {
                                    for (int i = 0; i < ArrayCamp.Length; i++)
                                    {
                                        strvalorRes = arrDetalle.Where(w => w.CAMPANA.Equals(ArrayCamp[i])).ToList().Count > 0 ?
                                            Funciones.CheckStr(arrDetalle.Where(w => w.CAMPANA.Equals(ArrayCamp[i])).ToList()[0].CAMPANA) : string.Empty;
                                        if (!string.IsNullOrEmpty(strvalorRes))
                                            break;
                                    }
                                    if (!string.IsNullOrEmpty(strvalorRes))
                                        boleano = true;
                                }
                            }
                        }
                    }
                    else
                    {
                        if (ReadKeySettings.Key_tOperacionRestriccion.IndexOf(strOperacion) > -1)
                        {
                            if (!string.IsNullOrEmpty(strCampanas))
                            {
                                ArrayCamp = strCampanas.Split('|');
                                if (ArrayCamp != null)
                                {
                                    for (int i = 0; i < ArrayCamp.Length; i++)
                                    {
                                        strvalorRes = arrDetalle.Where(w => w.CAMPANA.Equals(ArrayCamp[i])).ToList().Count > 0 ?
                                            Funciones.CheckStr(arrDetalle.Where(w => w.CAMPANA.Equals(ArrayCamp[i])).ToList()[0].CAMPANA) : string.Empty;
                                        if (!string.IsNullOrEmpty(strvalorRes))
                                            break;
                                    }
                                    if (!string.IsNullOrEmpty(strvalorRes))
                                        boleano = true;
                                }
                            }
                        }
                    }
                }

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][ERROR]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico][Resultado de validacion]", boleano), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ValidarCampDebitoAutomatico]", "[FIN]"), null, null);
            return boleano;
        }

        private static List<BEPlanDetalleVenta> ObtenerCampana(string cadenaDetalle)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerCampana]", "[INICIO]"), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerCampana][detallePlan]", Funciones.CheckStr(cadenaDetalle)), null, null);
            List<BEPlanDetalleVenta> planDetalleVenta = new List<BEPlanDetalleVenta>();
            try
            {
                string[] arrPlanes = cadenaDetalle.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                foreach (string strPlanes in arrPlanes)
                {
                    string[] strPlanFila = strPlanes.Split(';');
                    BEPlanDetalleVenta objPlanDetalle = new BEPlanDetalleVenta();
                    objPlanDetalle.CAMPANA = Funciones.CheckStr(strPlanFila[15]);
                    _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerCampana][Campaña]", Funciones.CheckStr(objPlanDetalle.CAMPANA)), null, null);
                    planDetalleVenta.Add(objPlanDetalle);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerCampana][ERROR]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerCampana]", "[FIN]"), null, null);
            return planDetalleVenta;
        }

        private static double ObtenerMontoMaximo(string strModalidad, string strCadenaDetalle, string strTipoProducto)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo]", "[INICIO]"), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][strModalidad]", Funciones.CheckStr(strModalidad)), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][strCadenaDetalle]", Funciones.CheckStr(strCadenaDetalle)), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][strTipoProducto]", Funciones.CheckStr(strTipoProducto)), null, null);

            double monto = 0;
            try
            {
                string[] arrPlanes = strCadenaDetalle.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
                if (strModalidad == "3")
                {
                    foreach (string strPlanes in arrPlanes)
                    {
                        double cargoFijo = 0;
                        double cuota = 0;
                        string[] strPlanFila = strPlanes.Split(';');
                        if (strTipoProducto == "01" || strTipoProducto == "04")
                        {
                            cargoFijo = Funciones.CheckDbl(strPlanFila[20]);
                            cuota = Funciones.CheckDbl(strPlanFila[31]);
                        }
                        else
                        {
                            cargoFijo = Funciones.CheckDbl(strPlanFila[23]);
                            cuota = Funciones.CheckDbl(strPlanFila[31]);
                        }
                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][cargoFijo]", Funciones.CheckDbl(cargoFijo)), null, null);
                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][cuota]", Funciones.CheckDbl(cuota)), null, null);
                        monto = monto + cargoFijo + cuota;
                    }
                }
                else
                {
                    foreach (string strPlanes in arrPlanes)
                    {
                        double cargoFijo = 0;
                        string[] strPlanFila = strPlanes.Split(';');
                        if (strTipoProducto == "01" || strTipoProducto == "04")
                        {
                            cargoFijo = Funciones.CheckDbl(strPlanFila[20]);
                        }
                        else
                        {
                            cargoFijo = Funciones.CheckDbl(strPlanFila[23]);
                        }
                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][cargoFijo]", Funciones.CheckDbl(cargoFijo)), null, null);
                        monto = monto + cargoFijo;
                    }
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}|{2}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][ERROR]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo][monto]", Funciones.CheckDbl(monto)), null, null);
            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][ObtenerMontoMaximo]", "[FIN]"), null, null);
            return monto;
        }

        private static void GrabarAfiliacionDebitoAutomatico(Int64 nroSec, string puntoVenta, string flagPortabilidad, string tipoOperacion, string tipoCliente, string strCadenaDetalle, string tipoProducto, string modalidadVenta)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, Funciones.CheckStr(nroSec), null, "WEB");
            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][GrabarAfiliacionDebitoAutomatico]", "[INICIO]"), null, null);
            try
            {
                string codigoRespuesta = string.Empty;
                string mensajeRespuesta = string.Empty;
                bool salida = false;
                string cadenaDetalle = string.Empty;
                StringBuilder detalle = new StringBuilder();
                int consecutivo = 0;
                string estado = "ACTIVO";
                string usuarioReg = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                List<BEPlanDetalleVenta> listaPlanDetalleVenta = new List<BEPlanDetalleVenta>();
                ArrayList listPlanDetalle = null;
                listPlanDetalle = (ArrayList)HttpContext.Current.Session["ListaSoplnCodigo"];
                var obj = (BEDebitoAutomatico)HttpContext.Current.Session["InfDebitoAutomatico"];
                bool validacionCombo = false;

                string flagP = flagPortabilidad == "S" ? "P" : "";

                if (obj != null)
                {
                    BEDebitoAutomatico objdebito = new BEDebitoAutomatico()
                    {
                        Solin_Codigo = nroSec,
                        Descripcion_TipoDoc = obj.Descripcion_TipoDoc.ToUpper(),
                        Tipo_Documento = obj.Tipo_Documento,
                        Numero_Documento = obj.Numero_Documento,
                        Nombre_Cliente = obj.Nombre_Cliente.ToUpper(),
                        Cod_Solicitud = obj.Cod_Solicitud,
                        Desc_Solicitud = obj.Desc_Solicitud.ToUpper(),
                        Codigo_Entidad = obj.Codigo_Entidad,
                        Descripcion_Entidad = obj.Descripcion_Entidad.ToUpper(),
                        Tipo_Cuenta = obj.Tipo_Cuenta,
                        Descripcion_Cuenta = obj.Descripcion_Cuenta.ToUpper(),
                        Numero_Cuenta = obj.Numero_Cuenta,
                        Fecha_Vencimiento = obj.Fecha_Vencimiento,
                        Flag_MontoTope = obj.Flag_MontoTope,
                        MontoTope = obj.MontoTope,
                        Tipo_Cliente = tipoCliente,
                        Telefono_Contacto = obj.Telefono_Contacto,
                        Correo_Contacto = obj.Correo_Contacto.ToUpper(),
                        Codigo_Cliente = string.Empty,
                        Tipo_Operacion = tipoOperacion,
                        Flag_Portabilidad = flagP,
                        Canal = Funciones.CheckStr(puntoVenta.Split(',')[2]),
                        Codigo_PuntoVenta = Funciones.CheckStr(puntoVenta.Split(',')[0]),
                        Punto_Venta = Funciones.CheckStr(puntoVenta.Split(',')[1].ToUpper()),
                        Usuario = usuarioReg
                    };

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Solin_Codigo]", objdebito.Solin_Codigo), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Descripcion_TipoDoc]", objdebito.Descripcion_TipoDoc), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Tipo_Documento]", objdebito.Tipo_Documento), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Numero_Documento]", objdebito.Numero_Documento), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Nombre_Cliente]", objdebito.Nombre_Cliente), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Cod_Solicitud]", objdebito.Cod_Solicitud), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Desc_Solicitud]", objdebito.Desc_Solicitud), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Codigo_Entidad]", objdebito.Codigo_Entidad), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Descripcion_Entidad]", objdebito.Descripcion_Entidad), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Tipo_Cuenta]", objdebito.Tipo_Cuenta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Descripcion_Cuenta]", objdebito.Descripcion_Cuenta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Numero_Cuenta]", objdebito.Numero_Cuenta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Fecha_Vencimiento]", objdebito.Fecha_Vencimiento), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Flag_MontoTope]", objdebito.Flag_MontoTope), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.MontoTope]", objdebito.MontoTope), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Tipo_Cliente]", objdebito.Tipo_Cliente), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Telefono_Contacto]", objdebito.Telefono_Contacto), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Correo_Contacto]", objdebito.Correo_Contacto), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Codigo_Cliente]", objdebito.Codigo_Cliente), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Tipo_Operacion]", objdebito.Tipo_Operacion), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Flag_Portabilidad]", objdebito.Flag_Portabilidad), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Canal]", objdebito.Canal), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Codigo_PuntoVenta]", objdebito.Codigo_PuntoVenta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Punto_Venta]", objdebito.Punto_Venta), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|objdebito.Usuario]", objdebito.Usuario), null, null);

                    string campanas = Funciones.CheckStr(ReadKeySettings.Key_campanasRestriccion);
                    validacionCombo = ValidarCampDebitoAutomatico(Funciones.CheckStr(puntoVenta.Split(',')[2]), tipoProducto, tipoOperacion, flagPortabilidad, modalidadVenta, campanas, strCadenaDetalle);
                    if (validacionCombo)
                    {
                        string[] arrPlanes = strCadenaDetalle.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

                        foreach (string strPlanes in arrPlanes)
                        {
                            string[] strPlanFila = strPlanes.Split(';');
                            BEPlanDetalleVenta producto = new BEPlanDetalleVenta();
                            producto.SOPLN_ORDEN = Funciones.CheckInt(strPlanFila[0]);
                            producto.TELEFONO = Funciones.CheckStr(strPlanFila[30]);
                            listaPlanDetalleVenta.Add(producto);
                        }

                        foreach (BEPlanDetalleVenta producto in listPlanDetalle)
                        {
                            listaPlanDetalleVenta
                                    .Where(p => p.SOPLN_ORDEN == Funciones.CheckInt(producto.SOPLN_ORDEN))
                                    .Select(p => p.SOPLN_CODIGO = Funciones.CheckInt64(producto.SOPLN_CODIGO))
                                    .ToList();
                        }

                        foreach (var lista in listaPlanDetalleVenta)
                        {
                            consecutivo++;
                            detalle.AppendFormat("{0}{1}", consecutivo, ";");
                            detalle.AppendFormat("{0}{1}", lista.SOPLN_CODIGO, ";");
                            detalle.AppendFormat("{0}{1}", lista.TELEFONO, ";");
                            detalle.AppendFormat("{0}{1}", estado, ";");
                            detalle.AppendFormat("{0}{1}{2}", usuarioReg, ";", "|");
                        }

                        cadenaDetalle = detalle.ToString();
                        cadenaDetalle = cadenaDetalle.Substring(0, cadenaDetalle.Length - 1);
                    }

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][IN|cadenaDetalle]", cadenaDetalle), null, null);

                    salida = BLEvaluacion.GrabarAfiliacionDebitoAutomatico(objdebito, cadenaDetalle, ref codigoRespuesta, ref mensajeRespuesta);

                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][OUT|salida]", Funciones.CheckStr(salida)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][OUT|codigoRespuesta]", Funciones.CheckStr(codigoRespuesta)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][OUT|mensajeRespuesta]", Funciones.CheckStr(mensajeRespuesta)), null, null);
                }
                else
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][GrabarAfiliacionDebitoAutomatico]", "El objeto sesion [InfDebitoAutomatico] se encuentra vacio, cliente no desea afiliacion"), null, null);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[PROY-140457-DEBITO AUTOMATICO][Error]", ex.Message, ex.StackTrace), null, null);
            }

            HttpContext.Current.Session["InfDebitoAutomatico"] = null;
            HttpContext.Current.Session["ListaSoplnCodigo"] = null;

            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140457-DEBITO AUTOMATICO][GrabarAfiliacionDebitoAutomatico]", "[FIN]"), null, null);
        }

        //PROY-140457-DEBITO AUTOMATICO-FIN

        //INICIO - IDEA-141897
        private static Boolean validarPedidosAsociados(List<BEAcuerdoDetalle> lstPedido, String strTipoDocumento, String strNroDocumento)
        {
            var blRespuesta = false;
            var tipoProducto = "M";
            string codigoRespuestaServidor;
            string mensajeRespuestaServidor;
            List<BEDatosClienteFC> listOnHoldClienteFC = null;
            List<BEDatosClienteFC> listTempProductosFC = new List<BEDatosClienteFC>();
            List<BEDatosClienteFC> listNuevosProductoFC = new List<BEDatosClienteFC>();
            ValidarProductosFCRequest objValidarProductosFCRequest = new ValidarProductosFCRequest();
            ValidarProductosFCResponse objValidarProductosFCResponse = null;
            BEAuditoriaRequest objBeAuditoriaRequest = new BEAuditoriaRequest();
            ProductosFCRestRequest objProductosFCRestRequest = new ProductosFCRestRequest();
            RestValidarProductosFC objRestValidarProductosFC = new RestValidarProductosFC();
            List<BENuevosProductosFC> planesEvaluadosFC = null;

            GeneradorLog _objLog = new GeneradorLog(Funciones.CheckStr(CurrentUsers), "validarPedidosAsociados", null, "log_validarPedidosAsociados");
            _objLog.CrearArchivolog("INICIO validarPedidosAsociados", null, null);

            if (lstPedido != null)
            {
                if (lstPedido.Count > 0)
                {
                    foreach (BEAcuerdoDetalle obj in lstPedido)
                    {
                        #region Body
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.tipoProducto]", Funciones.CheckStr(tipoProducto)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.strPlanesServicios]", Funciones.CheckStr(obj.Plan_tarifar)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.tipoDocumento]", Funciones.CheckStr(strTipoDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyRequest.NroDocumento]", Funciones.CheckStr(strNroDocumento)), null, null);
                        objValidarProductosFCRequest.MessageRequest.body = objProductosFCRestRequest;
                        objValidarProductosFCRequest.MessageRequest.body.strTipoProducto = Funciones.CheckStr(tipoProducto);
                        objValidarProductosFCRequest.MessageRequest.body.strPlanes = Funciones.CheckStr(obj.Plan_tarifar);
                        objValidarProductosFCRequest.MessageRequest.body.strTipoDocumento = Funciones.CheckStr(strTipoDocumento);
                        objValidarProductosFCRequest.MessageRequest.body.strNroDocumento = Funciones.CheckStr(strNroDocumento);
                        #endregion

                        #region Auditoria
                        objBeAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBeAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                        objBeAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBeAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.idTransaccion]", Funciones.CheckStr(objBeAuditoriaRequest.idTransaccion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.timestamp]", Funciones.CheckStr(objBeAuditoriaRequest.timestamp)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.userId]", Funciones.CheckStr(objBeAuditoriaRequest.userId)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBeAuditoriaRequest.ipApplication]", Funciones.CheckStr(objBeAuditoriaRequest.ipApplication)), null, null);
                        #endregion

                        objValidarProductosFCResponse = objRestValidarProductosFC.ValidarProductosFC(objValidarProductosFCRequest, objBeAuditoriaRequest);

                        codigoRespuestaServidor = objValidarProductosFCResponse.MessageResponse.body.codigoRespuesta;
                        mensajeRespuestaServidor = objValidarProductosFCResponse.MessageResponse.body.mensajeRespuesta;
                        listOnHoldClienteFC = objValidarProductosFCResponse.MessageResponse.body.datosOnHoldClienteFC;
                        planesEvaluadosFC = objValidarProductosFCResponse.MessageResponse.body.nuevosProductosFC;

                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyResponse.codigoRespuestaServidor]", Funciones.CheckStr(codigoRespuestaServidor)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0}-->{1}", "[FULL_CLARO - Servicio Valida Producto FullClaro][objBodyResponse.mensajeRespuestaServidor]", Funciones.CheckStr(mensajeRespuestaServidor)), null, null);

                        if (planesEvaluadosFC != null && planesEvaluadosFC.Any())
                        {
                            blRespuesta = true;
                            break;
                        }
                    }
                }
            }

            return blRespuesta;
        }
        //FIN - IDEA-141897
        //PROY-140585 F2 INI
        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidaPDVSMSPortabilidad(string strCodCanal, string strOferta, string codTipoProdActual, string tipoDocumento, string numeroDoc)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            GeneradorLog objLog = new GeneradorLog(numeroDoc, string.Empty, null, "log_SMSPortabilidad");

            BLGeneral objConsulta = new BLGeneral();

            HttpContext.Current.Session["flagSMSPortabilidadXPDV"] = "0";
            string strFlagValidacionPDV = string.Empty;
            string strCadenaCanalPDV = string.Empty;
            string strCadenaTipoDocPDV = string.Empty;
            string strCadenaTipoProdPDV = string.Empty;
            string strCadenaTipoOferPDV = string.Empty;
            string strCadenaPDV = string.Empty;
            string strOficina = string.Empty;
            string mensajeDac = string.Empty;
            Int64 cantidadPDV = 0;

            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[strCodCanal] ", Funciones.CheckStr(strCodCanal)), null, null);
            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[strOferta] ", Funciones.CheckStr(strOferta)), null, null);
            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[codTipoProdActual] ", Funciones.CheckStr(codTipoProdActual)), null, null);
            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[tipoDocumento] ", Funciones.CheckStr(tipoDocumento)), null, null);
            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[numeroDoc] ", Funciones.CheckStr(numeroDoc)), null, null);

            HttpContext.Current.Session["SMSPNCodigoPorta"] = string.Empty; //PROY-140585-FASE2

            try
            {
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[key_FlagSMSxPDVEvaluacionPrePost] ", Funciones.CheckStr(ReadKeySettings.key_FlagSMSxPDVEvaluacionPrePost)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[key_flag_validacionPDV] ", Funciones.CheckStr(ReadKeySettings.key_flag_validacionPDV)), null, null);

                if (ReadKeySettings.key_FlagSMSxPDVEvaluacionPrePost == "1" && ReadKeySettings.key_flag_validacionPDV == "1")
                {
                    if (HttpContext.Current.Session["Usuario"] != null)
                    {
                        BEUsuarioSession objUsuario = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];
                        strOficina = objUsuario.OficinaVenta;
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[strOficina] ", Funciones.CheckStr(strOficina)), null, null);
                    }

                    int consParametrosSMSPortaXPDV = Funciones.CheckInt(ConfigurationManager.AppSettings["Key_MejorasSisact"]);
                    objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[] ", Funciones.CheckStr(consParametrosSMSPortaXPDV)), null, null);
                    List<BEParametro> lstParametroPDV = objConsulta.ListaParametrosGrupo(consParametrosSMSPortaXPDV);

                    if (lstParametroPDV != null && lstParametroPDV.Count() > 0)
                    {
                        strCadenaCanalPDV = lstParametroPDV.Where(w => w.Valor1.Equals("key_canalesPDV")).ToList().Count > 0 ?
                        Funciones.CheckStr(lstParametroPDV.Where(w => w.Valor1.Equals("key_canalesPDV")).ToList()[0].Valor) : string.Empty;
                        objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140585 F2][strCadenaCanalPDV] ", strCadenaCanalPDV), null, null);

                        strCadenaTipoDocPDV = lstParametroPDV.Where(w => w.Valor1.Equals("key_tipo_docuPDV")).ToList().Count > 0 ?
                        Funciones.CheckStr(lstParametroPDV.Where(w => w.Valor1.Equals("key_tipo_docuPDV")).ToList()[0].Valor) : string.Empty;
                        objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140585 F2][strCadenaTipoDocPDV] ", strCadenaTipoDocPDV), null, null);

                        strCadenaTipoProdPDV = lstParametroPDV.Where(w => w.Valor1.Equals("key_tipo_productoPDV")).ToList().Count > 0 ?
                        Funciones.CheckStr(lstParametroPDV.Where(w => w.Valor1.Equals("key_tipo_productoPDV")).ToList()[0].Valor) : string.Empty;
                        objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140585 F2][strCadenaTipoProdPDV] ", strCadenaTipoProdPDV), null, null);

                        strCadenaTipoOferPDV = lstParametroPDV.Where(w => w.Valor1.Equals("key_tipo_ofertaPDV")).ToList().Count > 0 ?
                        Funciones.CheckStr(lstParametroPDV.Where(w => w.Valor1.Equals("key_tipo_ofertaPDV")).ToList()[0].Valor) : string.Empty;
                        objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140585 F2][strCadenaTipoOferPDV] ", strCadenaTipoOferPDV), null, null);

                        mensajeDac = lstParametroPDV.Where(w => w.Valor1.Equals("key_MensajeDAC")).ToList().Count > 0 ?
                        Funciones.CheckStr(lstParametroPDV.Where(w => w.Valor1.Equals("key_MensajeDAC")).ToList()[0].Valor) : string.Empty;
                        objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140585 F2][strCadenaTipoOferPDV] ", strCadenaTipoOferPDV), null, null);

                        cantidadPDV = lstParametroPDV.Where(w => w.Valor1.Equals("key_PDV_permitido")).ToList().Count;
                        for (int i = 0; i < cantidadPDV; i++)
                        {
                            strCadenaPDV = strCadenaPDV + Funciones.CheckStr(lstParametroPDV.Where(w => w.Valor1.Equals("key_PDV_permitido")).ToList()[i].Valor) + "|";
                        }
                        objLog.CrearArchivolog(string.Format("{0} => {1}", "[PROY-140585 F2][strCadenaPDV] ", strCadenaPDV), null, null);
                    }


                    if (strCadenaCanalPDV.IndexOf(strCodCanal) > -1 &&
                        strCadenaTipoDocPDV.IndexOf(tipoDocumento) > -1 && strCadenaTipoProdPDV.IndexOf(codTipoProdActual) > -1 &&
                        strCadenaTipoOferPDV.IndexOf(strOferta) > -1 && strCadenaPDV.IndexOf(strOficina) > -1)
                    {
                        objResponse.Boleano = false;
                        if (strCodCanal == "02")
                        {
                            objResponse.Mensaje = mensajeDac;
                        }
                        else
                        {
                            objResponse.Mensaje = string.Empty;
                        }
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV NO ACTIVA PIN [strCodCanal] ", Funciones.CheckStr(strCodCanal)), null, null);
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV NO ACTIVA PIN [objResponse.Boleano] ", Funciones.CheckStr(objResponse.Boleano)), null, null);
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV NO ACTIVA PIN [objResponse.Mensaje] ", Funciones.CheckStr(objResponse.Mensaje)), null, null);
                    }
                    else
                    {
                        objResponse.Boleano = true;
                        objResponse.Mensaje = string.Empty;
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV ACTIVA PIN [strCodCanal] ", Funciones.CheckStr(strCodCanal)), null, null);
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV ACTIVA PIN [objResponse.Boleano] ", Funciones.CheckStr(objResponse.Boleano)), null, null);

                    }
                }
                else
                {

                    objResponse.Boleano = true;
                    objResponse.Mensaje = string.Empty;
                    HttpContext.Current.Session["flagSMSPortabilidadXPDV"] = "0";

                    objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV ACTIVA PIN [strCodCanal] ", Funciones.CheckStr(strCodCanal)), null, null);
                    objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV ACTIVA PIN [objResponse.Boleano] ", Funciones.CheckStr(objResponse.Boleano)), null, null);
                    objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad- PDV ACTIVA PIN [flagSMSPortabilidadXPDV] ", Funciones.CheckStr(HttpContext.Current.Session["flagSMSPortabilidadXPDV"])), null, null);
                }

                objResponse.Canal = strCodCanal;
                objResponse.Oferta = strOferta;
                objResponse.codTipoProd = codTipoProdActual;
                objResponse.TipoDoc = tipoDocumento;
                objResponse.NumeroDoc = numeroDoc;

                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[objResponse.Canal] ", Funciones.CheckStr(objResponse.Canal)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[objResponse.Oferta] ", Funciones.CheckStr(objResponse.Oferta)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[objResponse.codTipoProd] ", Funciones.CheckStr(objResponse.codTipoProd)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[objResponse.TipoDoc] ", Funciones.CheckStr(objResponse.TipoDoc)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad[objResponse.NumeroDoc] ", Funciones.CheckStr(objResponse.NumeroDoc)), null, null);
            }
            catch (Exception e)
            {
                objResponse.CodigoError = "1";
                objResponse.Mensaje = ReadKeySettings.key_MsjErrorValidacionPIN;
                objLog.CrearArchivolog(string.Format("{0} => ERROR[{1}|{2}]", "[PROY-140585 F2][ValidarSMSPortabilidad]", Funciones.CheckStr(e.Message), Funciones.CheckStr(e.StackTrace)), null, null);
            }

            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad-RETORNO[objResponse.Boleano] ", Funciones.CheckStr(objResponse.Boleano)), null, null);
            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140585 F2]ValidaPDVSMSPortabilidad-RETORNO[objResponse.Mensaje] ", Funciones.CheckStr(objResponse.Mensaje)), null, null);
            return objResponse;
        }
        //PROY-140585 F2 FIN

        //INICIO INC000003048070
        //[System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ConsultarCandidatoBono(string strTipoDocumento, string nroDocumento)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            objResponse.EstadoBonoBSCSFC = "";
            string estadoBonoBSCSFullClaro = "";
            string tipoDocumBSCS = "";
            try
            {

                GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ConsultarCandidatoBono][strTipoDocumento PVUDB]", strTipoDocumento), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ConsultarCandidatoBono][nroDocumento]", Funciones.CheckStr(nroDocumento)), null, null);

             var lstTipoDocumentos = (new BLGeneral()).ListarTipoDocumento();

                if (strTipoDocumento != "")
                {
                       foreach (BETipoDocumento obj in lstTipoDocumentos)
               {
                   if (obj.ID_SISACT == strTipoDocumento)
                   {
                       if (strTipoDocumento == "06" || strTipoDocumento == "10" || strTipoDocumento == "20")
                       {
                           tipoDocumBSCS = "2";
                           break;
                       }
                       else {

                           tipoDocumBSCS =Funciones.CheckStr( obj.ID_BSCS);
                           break;
                       }

                      
                   }
               }

               _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ConsultarCandidatoBono][strTipoDocumento BSCS]", tipoDocumBSCS), null, null);


                }

                if (tipoDocumBSCS !=""){

                    BLGeneral_II.ConsultarCandidatoBono(tipoDocumBSCS, nroDocumento, ref estadoBonoBSCSFullClaro);
                objResponse.EstadoBonoBSCSFC = estadoBonoBSCSFullClaro;
                }


                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ConsultarCandidatoBono][estadoBonoBSCSFullClaro]", Funciones.CheckStr(objResponse.EstadoBonoBSCSFC)), null, null);


            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ConfigurationManager.AppSettings["consMsjErrorGeneral"].ToString();
                CrearLogStatic(string.Empty).CrearArchivolog("[ERROR][ConsultarCandidatoBono]", null, ex);
            }
            return objResponse;
        }

        //FIN INC000003048070



        //INICIO INC000004280198
        //[System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ObtenerSecPagadas_con_BonoPendienteEnvioBCSC(string strTipoDocumento, string nroDocumento)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            objResponse.Obligatorio = false;
            var lstFullClaro = new List<BEFullClaroBeneficio>();
            var lstPedido = new List<BEAcuerdoDetalle>();
            var codigo_rpta = "";
            var mensaje_rpta = "";
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            var strNroDoc = "";

            try
            {

                
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ObtenerSecPagadas_con_BonoPendienteEnvioBCSC][strTipoDocumento]", strTipoDocumento), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ObtenerSecPagadas_con_BonoPendienteEnvioBCSC][nroDocumento]", Funciones.CheckStr(nroDocumento)), null, null);

              

                if (strTipoDocumento != "")
                {
                    var strTipoDocumentoBSCS = ConvierteTipoDocumento(strTipoDocumento);

                    if (strTipoDocumento == "01")
                    {

                        strNroDoc = nroDocumento.Substring(nroDocumento.Length - 8);

                    }
                    else
                    {
                        strNroDoc = Funciones.NroDocumentoIdentidad(strTipoDocumento, nroDocumento);

                    }

                    BLGeneral.consultaBeneficioFullClaro(strTipoDocumentoBSCS, strNroDoc, "SEC-PAGADA", out lstFullClaro, out lstPedido, ref codigo_rpta, ref mensaje_rpta);


                      
                }

                _objLog.CrearArchivolog(String.Format("{0} - {1} => {2}", nroDocumento, "[ObtenerSecPagadas_con_BonoPendienteEnvioBCSC][lstFullClaro.Count]", Funciones.CheckStr(lstFullClaro.Count)), null, null);


                if (lstFullClaro.Count > 0)
                {

                    objResponse.Obligatorio = true;
                
                }


                _objLog.CrearArchivolog(String.Format("{0} - {1} => {2}", nroDocumento, "[ObtenerSecPagadas_con_BonoPendienteEnvioBCSC][objResponse.Obligatorio]", Funciones.CheckStr(objResponse.Obligatorio)), null, null);


            }
            catch (Exception ex)
            {
                objResponse.Error = true;
                objResponse.Mensaje = ex.Message;

                _objLog.CrearArchivolog(String.Format("{0} - {1} => {2}", nroDocumento, "[ObtenerSecPagadas_con_BonoPendienteEnvioBCSC][Error]", Funciones.CheckStr(ex.Message)), null, null);

             
            }
            return objResponse;
        }

        //fin INC000004280198

        //PROY-140579
        [System.Web.Services.WebMethod()]
        public static bool ActualizarSessionesProactiva(string porCuotaIni)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            try
            {
                string strSessCuotasBRMSAnterior = Funciones.CheckStr(HttpContext.Current.Session["strCuotaBRMS"]);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ActualizarSessionesProactiva][strSessCuotasBRMSAnterior]", strSessCuotasBRMSAnterior), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ActualizarSessionesProactiva][porCuotaIni]", porCuotaIni), null, null);
                string[] arrayCuota = strSessCuotasBRMSAnterior.Split(';');
                string[] arrayCuotaPorc = arrayCuota[0].Split('_');
                string strSessCuotasBRMSNueva = strSessCuotasBRMSAnterior.Replace(arrayCuotaPorc[1], porCuotaIni);
                HttpContext.Current.Session["strCuotaBRMS"] = strSessCuotasBRMSNueva;
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[ActualizarSessionesProactiva][Nueva Session][strCuotaBRMS]", strSessCuotasBRMSNueva), null, null);
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[ERROR][PROY-140579-ActualizarSessionesProactiva]", Funciones.CheckStr(ex.Message)), null, null);
            }
            return true;
        }

        //IDEA-142010 INICIO
        public static void MensajeCasoEspecial(string nroDocumento, string strWhitelist, string dllCasoEspecialSeleccionado, ref string msgCasoEspecial)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            _objLog.CrearArchivolog(string.Format("{0} - {1}", "[INICIO - MensajeCasoEspecial()]", "[IDEA-142010][Mensajes Parametros Beneficio]"), null, null);
            msgCasoEspecial = "";

            try
            {
                List<BEParametro> lstMsgsBeneficio = (List<BEParametro>)HttpContext.Current.Session["ParametrosBeneficioLineasAdicionales"];
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Mensajes Parametros Beneficio]", Funciones.CheckStr(lstMsgsBeneficio.Count)), null, null);

                int validarVigenciaCampana = Funciones.CheckInt(lstMsgsBeneficio.Where(w => w.Valor.Equals(Constantes.KeyCantidadCampanasVigentes)).ToList()[0].Valor1); ;
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Validacion campañas vigentes]", Funciones.CheckStr(validarVigenciaCampana)), null, null);

                if (validarVigenciaCampana > 0)
                {
                    string codBeneficioAdicionalPerm = Funciones.CheckStr(lstMsgsBeneficio.Where(w => w.Valor.Equals(Constantes.keyCasoEspecialPermitido)).ToList()[0].Valor1);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Beneficio adicional Permitido Parametro:]", codBeneficioAdicionalPerm), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Caso Especial seleccionado:]", dllCasoEspecialSeleccionado), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Whitelist]", Funciones.CheckStr(strWhitelist)), null, null);

                    string rptaDtpBeneficioLineasAdicionales = Funciones.CheckStr(HttpContext.Current.Session["ParametrosBeneficioLineasAdicionalesDtp"]);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Respuesta Datapower Beneficio Lineas Adicionales:]", rptaDtpBeneficioLineasAdicionales), null, null);

                    if (rptaDtpBeneficioLineasAdicionales.Equals("SI") || rptaDtpBeneficioLineasAdicionales.Equals("NO"))
                    {
                        if (rptaDtpBeneficioLineasAdicionales.Equals("NO"))
                        {
                            if (codBeneficioAdicionalPerm == dllCasoEspecialSeleccionado)
                            {
                                msgCasoEspecial = (strWhitelist == "S") ? Funciones.CheckStr(lstMsgsBeneficio.Where(w => w.Valor.Equals(Constantes.KeyMsgWhitelistSi)).ToList()[0].Valor1) : Funciones.CheckStr(lstMsgsBeneficio.Where(w => w.Valor.Equals(Constantes.KeyMsgWhitelistNo)).ToList()[0].Valor1);
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Mensaje Beneficio Lineas adicionales NO]", Funciones.CheckStr(msgCasoEspecial)), null, null);
                            }
                        }

                        if (rptaDtpBeneficioLineasAdicionales.Equals("SI"))
                        {
                            if (codBeneficioAdicionalPerm == dllCasoEspecialSeleccionado)
                            {
                                msgCasoEspecial = Funciones.CheckStr(lstMsgsBeneficio.Where(w => w.Valor.Equals(Constantes.KeyMsgDtpSi)).ToList()[0].Valor1);
                                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Mensaje Beneficio Lineas adicionales SI]", Funciones.CheckStr(msgCasoEspecial)), null, null);
                            }

                            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][MensajeCasoEspecial()][Mensajes Beneficio Lineas Adicionales]", Funciones.CheckStr(msgCasoEspecial)), null, null);
                        }
                    }
                }
                else
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Flujo No existen Campanas vigentes]", ""), null, null);
                }

            }
            catch (Exception ex)
            {
                msgCasoEspecial = "";
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[ERROR][MensajeCasoEspecial()][IDEA-142010]", ex.Message), null, null);
            }

            _objLog.CrearArchivolog(string.Format("{0} => {1}", "[FIN - MensajeCasoEspecial()][IDEA-142010][Respuesta Label Caso Especial]", Funciones.CheckStr(msgCasoEspecial)), null, null);
        }

        [System.Web.Services.WebMethod(EnableSession = true)]
        public static BEResponseWebMethod ConsultarCantidadCampanasVigentes(string strCodigoCampana, string nroDocumento, string tipoOperacion)
        {
            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            objResponse.Boleano = true;
            List<BECuota> objListaCuota = new List<BECuota>();
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");

            try
            {
                _objLog.CrearArchivolog("[Inicio][ConsultarCampanasVigentes]", null, null);
                _objLog.CrearArchivolog("[Codigos Campanas Seleccionados] ", strCodigoCampana, null);
                _objLog.CrearArchivolog("[nroDocumento]", nroDocumento, null);

                #region [Consultar las campañas Vigentes - INICIO]
                List<BEParametro> objBeneficioLineasAdicionales = (List<BEParametro>)HttpContext.Current.Session["ParametrosBeneficioLineasAdicionales"];
                _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][Mensajes Parametros Beneficio]", Funciones.CheckStr(objBeneficioLineasAdicionales.Count)), null, null);

                string FlagCampanasBeneficio = Funciones.CheckStr(objBeneficioLineasAdicionales.Where(w => w.Valor.Equals(Constantes.KeyFlagCampanasBeneficio)).ToList()[0].Valor1);
                string isPortabilidad = Funciones.CheckStr(HttpContext.Current.Session["ObjTienePorta"]);//SI -> S // NO -> VACIO
                string tipoOperacionMigracion = Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoOperacionMIG"]);
                string tipoOperacionAlta = Funciones.CheckStr(ConfigurationManager.AppSettings["constTipoOperacionVNA"]);

                if (FlagCampanasBeneficio.Equals("1") && (isPortabilidad == "S" || tipoOperacion == tipoOperacionMigracion || tipoOperacion == tipoOperacionAlta))//constTipoOperacionMIG
                {
                    //CODIGOS DE CAMPAÑAS PARAMETRICA
                    string strKeyVigenciaCampana = Funciones.CheckStr(objBeneficioLineasAdicionales.Where(w => w.Descripcion.Equals(Constantes.KeyVigenciaCampanas_Cantidad)).ToList()[0].Valor);
                    //CANTIDAD DE VECES QUE SE PEUDE REPETIR LA CAMPAÑA - CODIGOS DE CAMPAÑAS PARAMETRICA
                    int cntKeyCampanasPermitidas = Funciones.CheckInt(objBeneficioLineasAdicionales.Where(w => w.Descripcion.Equals(Constantes.KeyVigenciaCampanas_Cantidad)).ToList()[0].Valor1);

                    string[] arrCampanasSeleccionadas = strCodigoCampana.Split('|');
                    strKeyVigenciaCampana = strKeyVigenciaCampana.Replace("'", ""); //'0131','1051' ---  0131,1051
                    string[] arrKeyVigenciaCampana = strKeyVigenciaCampana.Split(',');

                    int cntCampanasPermitidas = 0;

                    foreach (string itemCampParam in arrKeyVigenciaCampana)
                    {
                        if (!string.IsNullOrEmpty(itemCampParam))
                        {
                            cntCampanasPermitidas = 0;
                            foreach (string itemCampanasSeleccionadas in arrCampanasSeleccionadas)
                            {
                                if (!string.IsNullOrEmpty(itemCampanasSeleccionadas))
                                {
                                    string[] arrCampana = itemCampanasSeleccionadas.Split(';');

                                    if (Funciones.CheckStr(arrCampana[0]) == itemCampParam)
                                    {
                                        cntCampanasPermitidas = cntCampanasPermitidas + 1;
                                    }

                                    if (cntCampanasPermitidas > cntKeyCampanasPermitidas)
                                    {
                                        objResponse.Boleano = false;
                                        objResponse.Mensaje = string.Format("{0} {1} {2} {3}.", "No puede evaluar más de", Funciones.CheckStr(cntKeyCampanasPermitidas), "líneas con la campaña", Funciones.CheckStr(arrCampana[1]));
                                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Mensaje respuesta]", objResponse.Mensaje), null, null);
                                        _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Booleano respuesta]", "False"), null, null);
                                        return objResponse;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Flag validacion campanas carrito]", Funciones.CheckStr(FlagCampanasBeneficio)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Flag validacion campanas carrito]", "1 (Activado restriccion campanas configuradas), 0 (Desactivado restriccion campanas configuradas)"), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Es Portabilidad]", Funciones.CheckStr(isPortabilidad)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Tipo de operacion seleccionada", Funciones.CheckStr(tipoOperacion)), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Llave config Migracion", tipoOperacionMigracion), null, null);
                    _objLog.CrearArchivolog(string.Format("{0} => {1}", "[IDEA-142010][ConsultarCantidadCampanasVigentes()][Llave config Alta", tipoOperacionAlta), null, null);
                    objResponse.Boleano = true;
                }

                #endregion [Consultar las campañas Vigentes - FIN]
            }
            catch (Exception ex)
            {
                objResponse.Boleano = true;
                objResponse.DescripcionError = ex.Message;
                objResponse.Mensaje = "Error en el proceso de validacion campañas vigentess, favor intentar nuevamente.";
                _objLog.CrearArchivolog(string.Format("{0}=>{1}", "[Validacion de campanas vigentes][ConsultarCampanasVigentes][Exception]", ex.Message), null, null);
            }

            return objResponse;
        }
        //IDEA-142010 FIN

        #region INICIATIVA - 803 | METODO REGISTRAR PEDIDO TIENDA VIRTUAL

        public bool RegistrarEvaluacionTiendaVirtual(string SEC_SOLICITUD, BEAprobacionExcepcionPrecios objAprobacion)
        {
            SolicitudExcepcionPrecioResponse response = new SolicitudExcepcionPrecioResponse();
            RestConsultarPedidosTienda obj = new RestConsultarPedidosTienda();

            Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();
            string Solin_SEC = Funciones.CheckStr(SEC_SOLICITUD);
            GeneradorLog objLog = new GeneradorLog(Solin_SEC, string.Empty, null, "RegistrarEvaluacionTiendaVirtual");

            string strIdTransaccion = string.Empty;
            string strCodigoRespuesta = string.Empty;
            string strMensajeRespuesta = string.Empty;
            string strCurrentTerminal = string.Empty;
            bool blRespuesta = false;
            try
            {
                Dictionary<string, string> dcParameters = new Dictionary<string, string>();

                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][SOLIN_CODIGO] ", Funciones.CheckStr(Solin_SEC)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][PEDIDO_TV] ", Funciones.CheckStr(objAprobacion.PEDIDO_TV)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][PEDIDO_SINERGIA] ", Funciones.CheckStr(objAprobacion.PEDIDO_SINERGIA)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][PRECIO_TV] ", Funciones.CheckStr(objAprobacion.PRECIO_TV)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][PRECIO_SISACT] ", Funciones.CheckStr(objAprobacion.PRECIO_SISACT)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][COD_OFICINA] ", Funciones.CheckStr(objAprobacion.COD_OFICINA)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][USUARIO_REGISTRO] ", Funciones.CheckStr(objAprobacion.USUARIO_REGISTRO)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][NODO_REGISTRO] ", Funciones.CheckStr(objAprobacion.NODO_REGISTRO)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][ESTADO] ", Funciones.CheckStr(objAprobacion.ESTADO)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][ESTADO_POS] ", Funciones.CheckStr(objAprobacion.ESTADO_POS)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][ID_FLUJO] ", Funciones.CheckStr(objAprobacion.ID_FLUJO)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][cuotaInicialSisact] ", Funciones.CheckStr(objAprobacion.cuotaInicialSisact)), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][Request][cuotaInicialTienda] ", Funciones.CheckStr(objAprobacion.cuotaInicialTienda)), null, null);

                BESolicitudExcepPrecio objBEExcepcionPrecio = new BESolicitudExcepPrecio()
                {
                    solinCodigo = Funciones.CheckStr(Solin_SEC),
                    pedidoTienda = Funciones.CheckStr(objAprobacion.PEDIDO_TV),
                    pedidoSinergia = string.Empty,
                    precioTienda = Funciones.CheckStr(objAprobacion.PRECIO_TV),
                    precioSisact = Funciones.CheckStr(objAprobacion.PRECIO_SISACT),
                    codigoOficina = Funciones.CheckStr(objAprobacion.COD_OFICINA),
                    usuarioRegistro = Funciones.CheckStr(objAprobacion.USUARIO_REGISTRO),
                    nodoRegistro = Funciones.CheckStr(objAprobacion.NODO_REGISTRO),
                    estado = Funciones.CheckStr(objAprobacion.ESTADO),
                    estadoPosterior = Funciones.CheckStr(objAprobacion.ESTADO_POS),
                    idFlujo = Funciones.CheckStr(objAprobacion.ID_FLUJO),
                    cuotaInicialTienda = objAprobacion.cuotaInicialTienda,
                    cuotaInicialSisact = objAprobacion.cuotaInicialSisact
                };

                RegistrarSolicitudRequest objRequest = new RegistrarSolicitudRequest(objBEExcepcionPrecio);
                Claro.SISACT.Entity.DataPowerRest.Generic.HeaderRequest headersRequest = obj.GetHeader_v2();
                headersRequest.dispositivo = Sisact_Webbase.CurrentTerminal;
                headersRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                headersRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["DP_consModulo_Generico"]);
                headersRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["DP_consOperacion_Generico"]);
                headersRequest.wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["conswsipPedidosTienda"]);
                objRequest.getMessageRequest().getHeader().setHeader(headersRequest);

                //AUDITORIA
                BEAuditoriaRequest objBEAuditoriaRequest = WebComunes.obtenerAuditoriaDataPower("Time_Out_PedidosTV", CurrentUser);
                objBEAuditoriaRequest.urlRest = "constUrlRegistrarPedidosTV";
                response = obj.registrarPedidosTienda(dcParameters, objRequest, objBEAuditoriaRequest);

                SolicitudExcepcionPrecioResponseBody objResponse = (SolicitudExcepcionPrecioResponseBody)response.getMessageResponse().getBody();
                strIdTransaccion = Funciones.CheckStr(objResponse.auditResponse.idTransaccion);
                strCodigoRespuesta = Funciones.CheckStr(objResponse.auditResponse.codigoRespuesta);
                strMensajeRespuesta = Funciones.CheckStr(objResponse.auditResponse.mensajeRespuesta);

                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][response][strIdTransaccion] ", strIdTransaccion), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][response][strCodigoRespuesta] ", strCodigoRespuesta), null, null);
                objLog.CrearArchivolog(string.Format("{0}-->{1}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][response][strMensajeRespuesta] ", strMensajeRespuesta), null, null);

                if (strCodigoRespuesta.Equals("0"))
                {
                    blRespuesta = true;
                }
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0} {1} | {2}", "[INICIATIVA-803][RegistrarEvaluacionTiendaVirtual][ERROR]", Funciones.CheckStr(ex.Message), Funciones.CheckStr(ex.StackTrace)), null, null);
                blRespuesta = false;
            }

            return blRespuesta;
        }
        #endregion
        #region  "INICIATIVA-803|CONSULTA FLAG DELIVERY"
        public BEItemGenerico consultaFlagPicking()
        {
            BEUsuarioSession oPuntoVenta = new BEUsuarioSession();
            oPuntoVenta = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];

            GeneradorLog objLog = new GeneradorLog(CurrentUsers, "INICIO consultaFlagPicking()", null, "WEB");
            var oListConsultaDatosOficina = BLSincronizaSap.ConsultaDatosOficina(Funciones.CheckStr(oPuntoVenta.OficinaVenta), null);

            var strCanal = String.Empty;
            strCanal = Funciones.CheckStr(oListConsultaDatosOficina.TipoOficina);
            BEItemGenerico listPicking = null;
            try
            {
                if (strCanal.Equals(Funciones.CheckStr(ConfigurationManager.AppSettings["constCodTipoOficinaCAC"])))
                {

                    string codigo_rptaPDK = string.Empty;
                    string mensaje_rptaPDK = string.Empty;
                    string descripcion_oficinaPDK = string.Empty;

                    objLog.CrearArchivolog("[INPUT][oPuntoVenta.OficinaVenta]: ", Funciones.CheckStr(oPuntoVenta.OficinaVenta), null);
                    listPicking = BLGeneral.ConsultarFlagsPicking(Funciones.CheckStr(oPuntoVenta.OficinaVenta), ref codigo_rptaPDK, ref mensaje_rptaPDK);
                    objLog.CrearArchivolog("[OUTPUT][codigo_rptaPDK]: ", Funciones.CheckStr(codigo_rptaPDK), null);
                    objLog.CrearArchivolog("[OUTPUT][mensaje_rptaPDK]: ", Funciones.CheckStr(mensaje_rptaPDK), null);

                    if (listPicking != null)
                    {
                        HttpContext.Current.Session["flagPicking"] = Funciones.CheckStr(listPicking.Codigo2);
                        HttpContext.Current.Session["flagDelivery"] = Funciones.CheckStr(listPicking.Codigo3);
                        objLog.CrearArchivolog("flagPicking: ", Funciones.CheckStr(listPicking.Codigo2), null);
                        objLog.CrearArchivolog("flagDelivery: ", Funciones.CheckStr(listPicking.Codigo3), null);
                        objLog.CrearArchivolog("OficinaVenta: ", Funciones.CheckStr(listPicking.Descripcion), null);
                    }
                }
            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog("ERROR consultaFlagPicking() ex.Message", ex.Message, null);
                objLog.CrearArchivolog("ERROR consultaFlagPicking() ex.StackTrace", ex.StackTrace, null);
            }

            objLog.CrearArchivolog("FIN consultaFlagPicking()", null, null);
            return listPicking;
        }
        #endregion

        //[PROY-140600] INI 
        public void GrabarLineasTipi(BEValidarLinea objValidaLineas)
        {
            GeneradorLog objLog = new GeneradorLog(CurrentUsers, string.Empty, null, "log_GrabarLineasTipi");

            objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi] ", "--- INICIO ---"), null, null);
            List<BEValidarLineaDetalle> lstLineDet = new List<BEValidarLineaDetalle>();
            BEValidarLinea objLineasTipi = new BEValidarLinea();
            string strLinActivas = string.Empty;
            string codRpta = string.Empty;
            string msjRpta = string.Empty;
            StringBuilder sbLineasActivas = new StringBuilder();
            try
            {

                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|lstConsolidadoLineas.Count: ", Funciones.CheckStr(objValidaLineas.lstConsolidadoLineas.Count())), null, null);
                if (objValidaLineas.lstConsolidadoLineas.Count() > 0)
                {
                    lstLineDet = objValidaLineas.lstConsolidadoLineas;
                    foreach (BEValidarLineaDetalle objLineDet in lstLineDet)
                    {
                        sbLineasActivas.Append((Funciones.CheckStr(objLineDet.strLinea)));
                        sbLineasActivas.Append("_");
                        sbLineasActivas.Append(Funciones.CheckStr(objLineDet.strSegmento));
                        sbLineasActivas.Append("|");

                        strLinActivas = sbLineasActivas.ToString();
                        objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|strLinActivas: ", Funciones.CheckStr(strLinActivas)), null, null);
                    }
                }

                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|hidNroSEC.Value: ", Funciones.CheckStr(hidNroSEC.Value)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|AppSettings.Key_CLTipoVentaPos: ", Funciones.CheckStr(AppSettings.Key_CLTipoVentaPos)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.tdoc_cliente: ", Funciones.CheckStr(objValidaLineas.tdoc_cliente)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.nroDoc_cliente: ", Funciones.CheckStr(objValidaLineas.nroDoc_cliente)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.intCantidadLineasActivas: ", Funciones.CheckStr(objValidaLineas.intCantidadLineasActivas)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|strLinActivas: ", Funciones.CheckStr(strLinActivas)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|strLinActivas: ", Funciones.CheckStr(objLineasTipi.nLineasNuevas)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|CurrentUsers: ", Funciones.CheckStr(CurrentUsers)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.CuentaUsuario: ", Funciones.CheckStr(objValidaLineas.CuentaUsuario)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.NombreUsuario: ", Funciones.CheckStr(objValidaLineas.NombreUsuario)), null, null);

                objLineasTipi.solin_codigo = Funciones.CheckInt64(hidNroSEC.Value);
                objLineasTipi.tipoVenta = Funciones.CheckStr(AppSettings.Key_CLTipoVentaPos);
                objLineasTipi.tdoc_cliente = objValidaLineas.tdoc_cliente;
                objLineasTipi.nroDoc_cliente = objValidaLineas.nroDoc_cliente;
                objLineasTipi.intCantidadLineasActivas = objValidaLineas.intCantidadLineasActivas;
                objLineasTipi.strLineasActivas = strLinActivas;
                objLineasTipi.nLineasNuevas = objValidaLineas.nLineasNuevas;
                objLineasTipi.CuentaUsuario = objValidaLineas.CuentaUsuario;
                objLineasTipi.NombreUsuario = objValidaLineas.NombreUsuario;
                objLineasTipi.usuario = CurrentUsers;

                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.solin_codigo: ", Funciones.CheckStr(objLineasTipi.solin_codigo)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.tipoVenta: ", Funciones.CheckStr(objLineasTipi.tipoVenta)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.tdoc_cliente: ", Funciones.CheckStr(objLineasTipi.tdoc_cliente)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.nroDoc_cliente: ", Funciones.CheckStr(objLineasTipi.nroDoc_cliente)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.intCantidadLineasActivas: ", Funciones.CheckStr(objLineasTipi.intCantidadLineasActivas)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.strLineasActivas: ", Funciones.CheckStr(objLineasTipi.strLineasActivas)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.strLineasActivas: ", Funciones.CheckStr(objLineasTipi.nLineasNuevas)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objLineasTipi.usuario: ", Funciones.CheckStr(objLineasTipi.usuario)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.CuentaUsuario: ", Funciones.CheckStr(objLineasTipi.CuentaUsuario)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|objValidaLineas.NombreUsuario: ", Funciones.CheckStr(objLineasTipi.NombreUsuario)), null, null);

                BLSolicitudNegocios.GrabarInfoContLineasTipi(objLineasTipi, ref codRpta, ref msjRpta);

                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|GrabarInfoContLineasTipi -> codRpta: ", Funciones.CheckStr(codRpta)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "[PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|GrabarInfoContLineasTipi -> msjRpta: ", Funciones.CheckStr(msjRpta)), null, null);

            }
            catch (Exception ex)
            {
                objLog.CrearArchivolog(string.Format("{0} : {1}", "ERROR [PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|ex.Message: ", Funciones.CheckStr(ex.Message)), null, null);
                objLog.CrearArchivolog(string.Format("{0} : {1}", "ERROR [PROY-140600][sisact_evaluacion_unificada][GrabarLineasTipi]|ex.StackTrace: ", Funciones.CheckStr(ex.StackTrace)), null, null);
            }
        }
        //[PROY-140600] FIN

        //PROY-140657 INI
        private static BodyResponseRegistraEnvioDEAU RegistrarAfiliacionDEAUAsistidos(BodyRequestRegistraEnvioDEAU objRegAfiliacion)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, objRegAfiliacion.numDocumento, null, "WEB");
            _objLog.CrearArchivolog("[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][INICIO]", null, null);
            BodyResponseRegistraEnvioDEAU objRegistrarAfiliacion = new BodyResponseRegistraEnvioDEAU();
            try
            {
                #region Request
                RequestRegistaEnvioDEAU objRequestRegistrarAfil = new RequestRegistaEnvioDEAU();
                BodyRequestRegistraEnvioDEAU objRegistrarAfilRequest = new BodyRequestRegistraEnvioDEAU();
                objRequestRegistrarAfil.MessageRequest.header.HeaderRequest = WebComunes.GenerarHeader(objRegAfiliacion.numDocumento, CurrentUsers);
                objRegistrarAfilRequest = objRegAfiliacion;

                #region log Datos Body
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.nroSec]: ", Funciones.CheckStr(objRegistrarAfilRequest.nroSec)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tipoDocumento]: ", Funciones.CheckStr(objRegistrarAfilRequest.tipoDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.descDocumento]: ", Funciones.CheckStr(objRegistrarAfilRequest.descDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.numDocumento]: ", Funciones.CheckStr(objRegistrarAfilRequest.numDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.nombresCliente]: ", Funciones.CheckStr(objRegistrarAfilRequest.nombresCliente)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.apellidosCliente]: ", Funciones.CheckStr(objRegistrarAfilRequest.apellidosCliente)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tipoCliente]: ", Funciones.CheckStr(objRegistrarAfilRequest.tipoCliente)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tipoOperacion]: ", Funciones.CheckStr(objRegistrarAfilRequest.tipoOperacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tipoProducto]: ", Funciones.CheckStr(objRegistrarAfilRequest.tipoProducto)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.canalVenta]: ", Funciones.CheckStr(objRegistrarAfilRequest.canalVenta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.codPdv]: ", Funciones.CheckStr(objRegistrarAfilRequest.codPdv)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.descPdv]: ", Funciones.CheckStr(objRegistrarAfilRequest.descPdv)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.origenSolicitud]: ", Funciones.CheckStr(objRegistrarAfilRequest.origenSolicitud)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.idEntidad]: ", Funciones.CheckStr(objRegistrarAfilRequest.idEntidad)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.descEntidad]: ", Funciones.CheckStr(objRegistrarAfilRequest.descEntidad)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.idOrigenCuenta]: ", Funciones.CheckStr(objRegistrarAfilRequest.idOrigenCuenta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.idMoneda]: ", Funciones.CheckStr(objRegistrarAfilRequest.idMoneda)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.customerId]: ", Funciones.CheckStr(objRegistrarAfilRequest.customerId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.idServPpal]: ", Funciones.CheckStr(objRegistrarAfilRequest.idServPpal)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.origenAfiliacion]: ", Funciones.CheckStr(objRegistrarAfilRequest.origenAfiliacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.nroSolicitud]: ", Funciones.CheckStr(objRegistrarAfilRequest.nroSolicitud)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tarjetaId]: ", Funciones.CheckStr(objRegistrarAfilRequest.tarjetaId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.numTarjeta]: ", Funciones.CheckStr(objRegistrarAfilRequest.numTarjeta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.flagMontoMaximo]: ", Funciones.CheckStr(objRegistrarAfilRequest.flagMontoMaximo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.monedaMontoMaximo]: ", Funciones.CheckStr(objRegistrarAfilRequest.monedaMontoMaximo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.montoMaximo]: ", Funciones.CheckStr(objRegistrarAfilRequest.montoMaximo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.canalMp]: ", Funciones.CheckStr(objRegistrarAfilRequest.canalMp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.estadoMp]: ", Funciones.CheckStr(objRegistrarAfilRequest.estadoMp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.comentario]: ", Funciones.CheckStr(objRegistrarAfilRequest.comentario)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.correoClienteEnvioLink]: ", Funciones.CheckStr(objRegistrarAfilRequest.correoClienteEnvioLink)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.telefonoClienteEnvioLink]: ", Funciones.CheckStr(objRegistrarAfilRequest.telefonoClienteEnvioLink)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tipiServicio]: ", Funciones.CheckStr(objRegistrarAfilRequest.tipiServicio)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.tipiValor]: ", Funciones.CheckStr(objRegistrarAfilRequest.tipiValor)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.telefonoClienteNotif]: ", Funciones.CheckStr(objRegistrarAfilRequest.telefonoClienteNotif)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.correoClienteNotif]: ", Funciones.CheckStr(objRegistrarAfilRequest.correoClienteNotif)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.usuarioRegistro]: ", Funciones.CheckStr(objRegistrarAfilRequest.estadoEnvioLink)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.estadoVenta]: ", Funciones.CheckStr(objRegistrarAfilRequest.estadoVenta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][objRegistrarAfilRequest.estadoAfiliacion]: ", Funciones.CheckStr(objRegistrarAfilRequest.estadoAfiliacion)), null, null);

                #endregion
                objRequestRegistrarAfil.MessageRequest.body = objRegistrarAfilRequest;
                #endregion

                #region Auditoria
                BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();
                objBEAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBEAuditoriaRequest.userId = CurrentUsers;//Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                objBEAuditoriaRequest.accept = "application/json";
                objBEAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                #endregion

                #region Response
                ResponseRegistaEnvioDEAU objResponseRegAfiliacion = new ResponseRegistaEnvioDEAU();

                objResponseRegAfiliacion = new RestAfiliaciónDEAUAsistidosWS().RegistrarAfiliacion(objRequestRegistrarAfil, objBEAuditoriaRequest);

                objRegistrarAfiliacion.codigoRespuesta = objResponseRegAfiliacion.MessageResponse.body.codigoRespuesta;
                objRegistrarAfiliacion.mensajeRespuesta = objResponseRegAfiliacion.MessageResponse.body.mensajeRespuesta;
                //objRegistrarAfiliacion.idTransaccion = objResponseRegAfiliacion.MessageResponse.body.idTransaccion;
                objRegistrarAfiliacion.idAfiliacion = objResponseRegAfiliacion.MessageResponse.body.idAfiliacion;

                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][RegistarAfiliacionDEAU] objResponseRegAfil.codigoRespuesta: " + Funciones.CheckStr(objRegistrarAfiliacion.codigoRespuesta), null, null);
                //_objLog.CrearArchivolog("[sisact_evaluacion_unificada][RegistarAfiliacionDEAU] objResponseRegAfil.idTransaccion: " + Funciones.CheckStr(objRegistrarAfiliacion.idTransaccion), null, null);
                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][RegistarAfiliacionDEAU] objResponseRegAfil.afiliacionId: " + Funciones.CheckStr(objRegistrarAfiliacion.idAfiliacion), null, null);

                #endregion

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[sisact_evaluacion_unificada][RegistarAfiliacionDEAU]ex.Message|ex.StackTrace", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("[sisact_evaluacion_unificada][RegistarAfiliacionDEAU][FIN]", null, null);
            return objRegistrarAfiliacion;
        }

        private static BodyResponseEnviaLinkDEAU EnviaLinkDEAU(BodyRequestEnviaLinkDEAU objEnviaLink)
        {

            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, objEnviaLink.msisdn, null, "WEB");
            _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU][INICIO]", null, null);
            BodyResponseEnviaLinkDEAU objRespEnviaLink = new BodyResponseEnviaLinkDEAU();
            try
            {
                #region Request
                RequestEnviaLinkDEAU objRequestEnviaLink = new RequestEnviaLinkDEAU();
                BodyRequestEnviaLinkDEAU objBodyRequestEnviaLink = new BodyRequestEnviaLinkDEAU();

                objRequestEnviaLink.MessageRequest.header.HeaderRequest = WebComunes.GenerarHeader(objEnviaLink.msisdn, CurrentUsers);


                #region Datos Body
                objBodyRequestEnviaLink.idTransaccion = objEnviaLink.idTransaccion;// "20210520124568";
                objBodyRequestEnviaLink.tipoFlujo = objEnviaLink.tipoFlujo;// "2";
                objBodyRequestEnviaLink.msisdn = objEnviaLink.msisdn; //"985955854";
                objBodyRequestEnviaLink.codCanal = objEnviaLink.codCanal;// "5";
                objBodyRequestEnviaLink.correo = objEnviaLink.correo; //"piero.xcb.231192@gmail.com";
                objBodyRequestEnviaLink.inicioVigenciaLink = objEnviaLink.inicioVigenciaLink;
                objBodyRequestEnviaLink.finVigenciaLink = objEnviaLink.finVigenciaLink;// "29/05/2021 12:43:00";	
                objBodyRequestEnviaLink.clickMaximoLink = objEnviaLink.clickMaximoLink;
                objBodyRequestEnviaLink.longitudHash = objEnviaLink.longitudHash;
                objBodyRequestEnviaLink.descripcion = objEnviaLink.descripcion;
                objBodyRequestEnviaLink.ip = objEnviaLink.ip;
                #endregion
                #region log Datos Body
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.idTransaccion]: ", Funciones.CheckStr(objBodyRequestEnviaLink.idTransaccion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.tipoFlujo]: ", Funciones.CheckStr(objBodyRequestEnviaLink.tipoFlujo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.msisdn]: ", Funciones.CheckStr(objBodyRequestEnviaLink.msisdn)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.codCanal]: ", Funciones.CheckStr(objBodyRequestEnviaLink.codCanal)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.correo]: ", Funciones.CheckStr(objBodyRequestEnviaLink.correo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.inicioVigenciaLink]: ", Funciones.CheckStr(objBodyRequestEnviaLink.inicioVigenciaLink)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.fechaVencimientoLink]: ", Funciones.CheckStr(objBodyRequestEnviaLink.finVigenciaLink)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.clickMaximoLink]: ", Funciones.CheckStr(objBodyRequestEnviaLink.clickMaximoLink)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.longitudHash]: ", Funciones.CheckStr(objBodyRequestEnviaLink.longitudHash)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.descripcion]: ", Funciones.CheckStr(objBodyRequestEnviaLink.descripcion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[sisact_evaluacion_unificada][EnviaLinkDEAU][objBodyRequestEnviaLink.ip]: ", Funciones.CheckStr(objBodyRequestEnviaLink.ip)), null, null);
                #endregion
                objRequestEnviaLink.MessageRequest.body = objBodyRequestEnviaLink;
                #endregion

                #region Auditoria
                BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();
                objBEAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBEAuditoriaRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                objBEAuditoriaRequest.accept = "application/json";
                objBEAuditoriaRequest.ipApplication = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentServer;
                #endregion

                #region Response
                ResponseEnviaLinkDEAU objResponseEnviaLink = new ResponseEnviaLinkDEAU();

                //RestAfiliaciónDEAUAsistidosWS RestAfiliaciónDEAUA = new RestAfiliaciónDEAUAsistidosWS();
                objResponseEnviaLink = new RestAfiliaciónDEAUAsistidosWS().EnviaLink(objRequestEnviaLink, objBEAuditoriaRequest);

                objRespEnviaLink.codigoRespuesta = objResponseEnviaLink.MessageResponse.body.codigoRespuesta;
                objRespEnviaLink.mensajeRespuesta = objResponseEnviaLink.MessageResponse.body.mensajeRespuesta;
                objRespEnviaLink.idTransaccion = objResponseEnviaLink.MessageResponse.body.idTransaccion;
                objRespEnviaLink.linkCliente = objResponseEnviaLink.MessageResponse.body.linkCliente;
                objRespEnviaLink.fechaexpiracion = objResponseEnviaLink.MessageResponse.body.fechaexpiracion;


                //MENSAJE ENVIO LINK
                if (Funciones.CheckInt64(objRespEnviaLink.codigoRespuesta) != 0)
                {
                    HttpContext.Current.Session["MensajeEnvioLink"] = "Error al intentar enviar el Link para afiliación al débito automático";
                }
                else
                {
                    HttpContext.Current.Session["MensajeEnvioLink"] = "Envio de Link para afiliación al débito automático, " + Funciones.CheckStr(objRespEnviaLink.mensajeRespuesta);
                }

                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU] objRespEnviaLink.codigoRespuesta: " + Funciones.CheckStr(objRespEnviaLink.codigoRespuesta), null, null);
                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU] objRespEnviaLink.mensajeRespuesta: " + Funciones.CheckStr(objRespEnviaLink.mensajeRespuesta), null, null);
                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU] objRespEnviaLink.idTransaccion: " + Funciones.CheckStr(objRespEnviaLink.idTransaccion), null, null);
                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU] objRespEnviaLink.linkCliente: " + Funciones.CheckStr(objRespEnviaLink.linkCliente), null, null);
                _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU] objRespEnviaLink.fechaexpiracion: " + Funciones.CheckStr(objRespEnviaLink.fechaexpiracion), null, null);

                #endregion

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[sisact_evaluacion_unificada][EnviaLinkDEAU]ex.Message|ex.StackTrace", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("[sisact_evaluacion_unificada][EnviaLinkDEAU][FIN]", null, null);
            return objRespEnviaLink;
        }

        //PROY-140657 FIN

        // INI INC000004030766
        public bool validarNumeroPortar()
        {
            string nroDocumento = hidNroDocumento.Value;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, nroDocumento, null, "WEB");
            string strCadenaEvaluacion = Funciones.CheckStr(hidCadenaDetalle.Value);
            _objLog.CrearArchivolog("strCadenaEvaluacion: ", strCadenaEvaluacion.ToString(), null);
            string[] arrPlanes = strCadenaEvaluacion.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);
            _objLog.CrearArchivolog("[arrPlanes]", strCadenaEvaluacion.ToString(), null);
            foreach (string strPlanes in arrPlanes)
            {
                string[] strPlanFila = strPlanes.Split(';');
                if (strPlanFila[30].Length == 9) //strPlanFila[30] = TELEFONO
                {
                    if (strPlanFila[30].Substring(0, 1) != "9")
                    {
                        _objLog.CrearArchivolog("strPlanFila[30] =>", strPlanFila[30].ToString(), null);
                        return false;
                    }
                }
            }
            return true;
        }
        // FIN INC000004030766

 //INICIO INC000003848031
        [System.Web.Services.WebMethod()]
        public static bool MostrarLogs(string accion ,string strLog)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
           
          _objLog.CrearArchivolog(String.Format("{0} => {1}", accion , strLog), null, null);

          return true;
        }

        [System.Web.Services.WebMethod()]
        public static bool session_hidNServicioServerV(string accion, string valor)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");

            HttpContext.Current.Session["hidNServicioServerV"] = Funciones.CheckStr(valor);

            _objLog.CrearArchivolog(String.Format("{0} => {1}", accion, " Session[hidNServicioServerV] : " + Funciones.CheckStr(valor)), null, null);

            return true;
        }
       //FIN INC000003848031

#region INICIATIVA-932 | MOVILIDAD IFI | BRYAN CHUMBES LIZARRAGA

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarDireccionIFI(string codTipoProductoActual)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "WEB");
            _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI)", null, null);

            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            objResponse.Boleano = false;

            string constTipoProductoInterInalam = ConfigurationManager.AppSettings["constTipoProductoInterInalam"];

            try
            {

                bool blDireccionIfi = (bool)HttpContext.Current.Session["flagDireccionIFI"];

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI)][codTipoProductoActual]", Funciones.CheckStr(codTipoProductoActual)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI)][constTipoProductoInterInalam]", Funciones.CheckStr(constTipoProductoInterInalam)), null, null);

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI)][blDireccionIfi]", Funciones.CheckStr(blDireccionIfi)), null, null);


                if (codTipoProductoActual == constTipoProductoInterInalam)
                {
                    _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI) - Producto es IFI", null, null);

                    if (blDireccionIfi)
                    {
                        _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI) - Direccion IFI ya llenada", null, null);

                        objResponse.Boleano = true;
                    }
                }
                else
                {
                    _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI) - Producto es diferente a IFI", null, null);
                    _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI) - Se setea la session para pedir nuevamente la direccion", null, null);

                    HttpContext.Current.Session["flagDireccionIFI"] = false;
                }

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI)][Error]", ex.Message, ex.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarDireccionIFI)", null, null);

            return objResponse;

        }


        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod ValidarCoberturaIFI(string tipoDocumento, string nroDocumento, string nombre, string apepaterno, string apematerno, string strPlanDetalleEval)
        {
            
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "WEB");
            _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI", null, null);

            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEDepartamento objdepartamento = new BEDepartamento();
            BEProvincia objprovincia = new BEProvincia();
            BEDistrito objdistrito = new BEDistrito();
            BEDireccionCliente objdircli = new BEDireccionCliente();

            BLGeneral objConsulta = new BLGeneral();

            objResponse.Error = false;
            objResponse.Boleano = false;
            string strDepartamento = string.Empty;
            string strProvincia = string.Empty;
            string strDistrito = string.Empty;
            string strCodRpta = string.Empty;
            string strMsgRpta = string.Empty;
            string strPlanError = string.Empty;
            string strMsjError = string.Empty;
            int cantError = 0;
            int cantExito = 0;
            int CantPlanes = 0;
            string strPlanesError = string.Empty;
            string strPlanesExito = string.Empty;
            StringBuilder sbPlanesError = new StringBuilder();
            StringBuilder sbPlanesExito = new StringBuilder();

            string idTransaccion = string.Empty;
            string codigoRespuestaServidor = string.Empty;
            string mensajeRespuestaServidor = string.Empty;
            bool existeCobertura = false;

            Int64 Key_MovilidadIFI = Funciones.CheckInt(ConfigurationManager.AppSettings["Key_MovilidadIFI"]);

            try
            {
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][tipoDocumento]", Funciones.CheckStr(tipoDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][nroDocumento]", Funciones.CheckStr(nroDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][nombre]", Funciones.CheckStr(nombre)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][apepaterno]", Funciones.CheckStr(apepaterno)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][apematerno]", Funciones.CheckStr(apematerno)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][strPlanDetalleEval]", Funciones.CheckStr(strPlanDetalleEval)), null, null);


                if (!string.IsNullOrEmpty(nroDocumento) && !string.IsNullOrEmpty(strPlanDetalleEval))
                {

                    BEDireccionCliente objDireccion = new BEDireccionCliente();


                    objDireccion = (BEDireccionCliente)HttpContext.Current.Session["objDireccion"];

                    if (objDireccion != null)
                    {
                        _objLog.CrearArchivolog("INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI) [Se ha enviado el detalle de la evaluacion]", null, null);

                        RestValidarCobertura objRestValidarCobertura = new RestValidarCobertura();
                        BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();

                        ClienteCobertura objClienteCobertura = new ClienteCobertura();
                        DireccionCobertura objDireccionCobertura = new DireccionCobertura();
                        SolicitudCobertura objSolicitudCobertura = new SolicitudCobertura();

                        RequestValidarCobertura objRequestValidarCobertura = new RequestValidarCobertura();
                        BodyRequestValidarCobertura objBodyValidarCobertura = new BodyRequestValidarCobertura();
                        ResponseValidarCobertura objResponseValidarCobertura = new ResponseValidarCobertura();
                        Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();


                        #region Header
                        objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Consumer_Generico"]);
                        objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Country_Generico"]);
                        objHeaderRequest.dispositivo = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal;
                        objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Language_Generico"]);
                        objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["ValidarCobertura_Service_modulo"]);
                        objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Msgtype_Generico"]);
                        objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["ValidarCobertura_Service_operation"]);
                        objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_System_Generico"]);
                        objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                        objHeaderRequest.userId = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objHeaderRequest.wsIp = ConfigurationManager.AppSettings["Service_Wsip_Generico"];

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.consumer]", Funciones.CheckStr(objHeaderRequest.consumer)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.country]", Funciones.CheckStr(objHeaderRequest.country)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.dispositivo]", Funciones.CheckStr(objHeaderRequest.dispositivo)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.modulo]", Funciones.CheckStr(objHeaderRequest.modulo)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.msgType]", Funciones.CheckStr(objHeaderRequest.msgType)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.operation]", Funciones.CheckStr(objHeaderRequest.operation)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.pid]", Funciones.CheckStr(objHeaderRequest.pid)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.system]", Funciones.CheckStr(objHeaderRequest.system)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.timestamp]", Funciones.CheckStr(objHeaderRequest.timestamp)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.userId]", Funciones.CheckStr(objHeaderRequest.userId)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][objHeaderRequest.wsIp]", Funciones.CheckStr(objHeaderRequest.wsIp)), null, null);
                        objRequestValidarCobertura.MessageRequest.Header.HeaderRequest = objHeaderRequest;
                        #endregion


                        #region Auditoria
                        objBEAuditoriaRequest.idAplicacion = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.canal = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.usuarioAplicacion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objBEAuditoriaRequest.usuarioSesion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objBEAuditoriaRequest.idTransaccionESB = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.idTransaccionNegocio = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.fechaInicio = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                        objBEAuditoriaRequest.nodoAdicional = "0";

                        #endregion

                        #region Body

                        objClienteCobertura.tipoDoc = tipoDocumento;
                        objClienteCobertura.numeroDoc = nroDocumento;
                        objClienteCobertura.nombres = nombre;
                        objClienteCobertura.apellidos = string.Format("{0} {1}",apepaterno,apematerno);
                        objClienteCobertura.correo = string.Empty;
                        objClienteCobertura.telefonoContacto = string.Empty;

                        objDireccionCobertura.departamento = objDireccion.Departamento;
                        objDireccionCobertura.provincia = objDireccion.Provincia;
                        objDireccionCobertura.distrito = objDireccion.Distrito;
                        objDireccionCobertura.direccion = objDireccion.Direccion;

                        objSolicitudCobertura.tipoProducto = "06";
                        objSolicitudCobertura.modalidad = "POSTPAGO";
                        objSolicitudCobertura.venta = string.Empty;
                        objSolicitudCobertura.monto = string.Empty;
                        objSolicitudCobertura.equipo = string.Empty;
                        objSolicitudCobertura.plan = string.Empty;

                        objBodyValidarCobertura.validarCoberturaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBodyValidarCobertura.validarCoberturaRequest.codAplicacion = Funciones.CheckStr(ConfigurationManager.AppSettings["CodigoAplicacionTiendaVirtual"]); ;
                        objBodyValidarCobertura.validarCoberturaRequest.latitud = objDireccion.Latitud;
                        objBodyValidarCobertura.validarCoberturaRequest.longitud = objDireccion.Longitud;

                        objBodyValidarCobertura.validarCoberturaRequest.motivo = "";
                        objBodyValidarCobertura.validarCoberturaRequest.cliente = objClienteCobertura;
                        objBodyValidarCobertura.validarCoberturaRequest.direccion = objDireccionCobertura;
                        objBodyValidarCobertura.validarCoberturaRequest.solicitud = objSolicitudCobertura;

                        #endregion

                        string[] arrayPlanes = strPlanDetalleEval.Split('|');

                        CantPlanes = arrayPlanes.Count();


                        List<BEParametro> lstParametroMovilidad = objConsulta.ListaParametrosGrupo(Key_MovilidadIFI);


                        foreach (string strPlanes in arrayPlanes)
                        {
                            string strIdFila = strPlanes.Split(';')[0];
                            string strTMCODE = strPlanes.Split(';')[2];
                            string strDescripcionPlan = strPlanes.Split(';')[3];

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][strIdFila]", Funciones.CheckStr(strIdFila)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][strTMCODE]", Funciones.CheckStr(strTMCODE)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][strDescripcionPlan]", Funciones.CheckStr(strDescripcionPlan)), null, null);

                            string strTipoTecnologia = string.Empty;

                            if (lstParametroMovilidad != null && lstParametroMovilidad.Count() > 0)
                            {
                                _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI) [Se obtuvieron los tipos de tecnologias]", null, null);

                                strTipoTecnologia = lstParametroMovilidad.Where(w => w.Valor1.Equals(strTMCODE)).ToList().Count > 0 ?
                                Funciones.CheckStr(lstParametroMovilidad.Where(w => w.Valor1.Equals(strTMCODE)).ToList()[0].Valor) : string.Empty;

                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][strTipoTecnologia]", Funciones.CheckStr(strTipoTecnologia)), null, null);

                                if (string.IsNullOrEmpty(strTipoTecnologia))
                                {

                                    objResponse.Error = true;
                                    objResponse.DescripcionError = string.Format("El plan {0} no tiene configurada una tecnologia",strDescripcionPlan);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }

                            }
                            else
                            {

                                objResponse.Error = true;
                                objResponse.DescripcionError = "No se obtuvieron los tipos de tecnologias";
                                _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI) [No se obtuvieron los tipos de tecnologias]", null, null);
                                return objResponse;
                            }


                            objBodyValidarCobertura.validarCoberturaRequest.tipoTecnologia = strTipoTecnologia;

                            objRequestValidarCobertura.MessageRequest.Body = objBodyValidarCobertura;


                            #region Response
                            try
                            {
                                _objLog.CrearArchivolog("INI INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [SERIVCIO DATAPOWER]", null, null); 
                            objResponseValidarCobertura = objRestValidarCobertura.validarCobertura(objRequestValidarCobertura, objBEAuditoriaRequest);

                            codigoRespuestaServidor = objResponseValidarCobertura.MessageResponse.body.validarCoberturaResponse.responseStatus.codigoRespuesta;
                            mensajeRespuestaServidor = objResponseValidarCobertura.MessageResponse.body.validarCoberturaResponse.responseStatus.descripcionRespuesta;


                            if (codigoRespuestaServidor == "0")
                            {
                                    existeCobertura = objResponseValidarCobertura.MessageResponse.body.validarCoberturaResponse.responseData.exiteCobertura == "SI" ? true : false;

                                if (!existeCobertura)
                                {
                                    cantError++;
                                    objResponse.Error = true;

                                    _objLog.CrearArchivolog(String.Format("{0} {1} {2}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][El plan]", Funciones.CheckStr(strPlanesError), "no tiene cobertura"), null, null);

                                    sbPlanesError.Append(strDescripcionPlan);
                                    sbPlanesError.AppendFormat(" {0} ", "-");
                                }
                                else
                                {
                                    cantExito++;

                                    _objLog.CrearArchivolog(String.Format("{0} {1} {2}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][El plan]", Funciones.CheckStr(strPlanesError), "si tiene cobertura"), null, null);

                                    sbPlanesExito.Append(strDescripcionPlan);
                                    sbPlanesExito.AppendFormat(" {0} ", "-");
                                }

                            }
                                    //INICIATIVA 992 INICIO
                                else if (codigoRespuestaServidor == "1")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgParametrosIFI;
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                else if (codigoRespuestaServidor == "2")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                   strPlanesError = strDescripcionPlan.ToString();
                                    objResponse.DescripcionError = string.Format("El plan {0} no cuenta con cobertura, no puede continuar.", strPlanesError);
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                else if (codigoRespuestaServidor == "3")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgErrorServicioIFI;
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                else if (codigoRespuestaServidor == "4")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgErrorConsultaIFI;
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                else if (codigoRespuestaServidor == "-1")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgErrorTimeOutIFI;
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                else if (codigoRespuestaServidor == "-2")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgErrorDisponibilidadIFI + " ValidarCoberturaIFI" + mensajeRespuestaServidor;
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                else if (codigoRespuestaServidor == "-3")
                                {
                                    _objLog.CrearArchivolog("INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                    objResponse.Error = true;
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgErrorInesperadoIFI + " " + mensajeRespuestaServidor;
                                    _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                    return objResponse;
                                }
                                //INICIATIVA 992 FIN
                            else
                            {
                                _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI) [ERROR AL VALIDAR LA COBERTURA DEL PLAN]", null, null);
                                objResponse.Error = true;
                                objResponse.DescripcionError = "Error al validar la cobertura de los planes";
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                                return objResponse;
                            }
                            }
                            catch (Exception ex)
                            {
                                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)][Error]", ex.Message, ex.StackTrace), null, null);
                                objResponse.Error = true;

                                if (ex.Message.IndexOf("Timeout") > 1 || ex.Message.IndexOf("timeout") > 1)
                                    objResponse.DescripcionError = ReadKeySettings.Key_MsgErrorTimeOutIFI;
                                else
                                    objResponse.DescripcionError = "Ocurrio un error al validar la cobertura de los planes";
                                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIATIVA 992 - Movilidad IFI (ValidarCoberturaIFI)][Error]", ex.Message, objResponse.DescripcionError), null, null);
                                return objResponse;
                            }

                            _objLog.CrearArchivolog("[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)] -> objResponseConsultaCobertura.MessageResponse.Body.listaZonaDisponibleResponse.responseAudit.idTransaccion : " + idTransaccion, null, null);
                            _objLog.CrearArchivolog("[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)] -> objResponseConsultaCobertura.MessageResponse.Body.listaZonaDisponibleResponse.responseAudit.codigoRespuesta : " + codigoRespuestaServidor, null, null);
                            _objLog.CrearArchivolog("[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)] -> objResponseConsultaCobertura.MessageResponse.Body.listaZonaDisponibleResponse.responseAudit.mensajeRespuesta : " + mensajeRespuestaServidor, null, null);
                            #endregion

                        }


                        if (objResponse.Error)
                        {
                            strPlanesError = sbPlanesError.ToString();
                            strPlanesError = strPlanesError.Substring(0, strPlanesError.Length - 3);

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][Los planes que no cuentan con cobertura son]", Funciones.CheckStr(strPlanesError)), null, null);

                            if (cantError == 1)
                            {
                                objResponse.DescripcionError = string.Format("El plan {0} no cuenta con cobertura, no puede continuar.", strPlanesError);
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                            }
                            else if (cantError < CantPlanes)
                            {
                                objResponse.DescripcionError = string.Format("Los planes {0} no cuentan con cobertura, no puede continuar.", strPlanesError);
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                            }
                            else if (cantError == CantPlanes)
                            {
                                objResponse.DescripcionError = "Los planes seleccionados no cuentan con cobertura, no puede continuar.";
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.DescripcionError)), null, null);
                            }
                        }
                        else
                        {
                            strPlanesExito = sbPlanesExito.ToString();
                            strPlanesExito = strPlanesExito.Substring(0, strPlanesExito.Length - 3);

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][Los planes que cuentan con cobertura son]", Funciones.CheckStr(strPlanesExito)), null, null);

                            if (cantExito == 1)
                            {
                                objResponse.Mensaje = string.Format("El plan {0} cuenta con cobertura, puede continuar.", strPlanesExito);
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.Mensaje)), null, null);
                            }
                            else if (cantExito < CantPlanes)
                            {
                                objResponse.Mensaje = string.Format("Los planes {0} cuentan con cobertura, puede continuar.", strPlanesExito);
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.Mensaje)), null, null);
      
                            }
                            else if (cantExito == CantPlanes)
                            {
                                objResponse.Mensaje = "Los planes seleccionados cuentan con cobertura, puede continuar.";
                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)]", Funciones.CheckStr(objResponse.Mensaje)), null, null);
                                
                            }
                        }
                    }
                    else
                    {
                        _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI) [No se ha enviado el detalle de la evaluacion]", null, null);

                        objResponse.Error = true;
                        objResponse.DescripcionError = "No se ha enviado la dirección del cliente";
                    }

                }
                else
                {
                    _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI) [No se ha enviado el detalle de la evaluacion]", null, null);

                    objResponse.Error = true;
                    objResponse.DescripcionError = "No se ha enviado el detalle de la evaluacion";
                }

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)][Error]", ex.Message, ex.StackTrace), null, null);
                objResponse.Error = true;
                objResponse.DescripcionError = "Ocurrio un error al validar la cobertura de los planes";
            }
            _objLog.CrearArchivolog("FIN INICIO INICIATIVA 932 - Movilidad IFI (ValidarCoberturaIFI)", null, null);

            return objResponse;
        }

        #endregion

        /*INICIO PROY-140715 - IDEA 140805 - No biometria en SISACT en caida RENIEC*/
        public static string ConsultaMensaje(string strOrigen, string strcodCanal, string strcodOficina)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            BEconsultarConfiguracion objdatosConfiguracion = new BEconsultarConfiguracion();
            _objLog.CrearArchivolog("INICIO DEL METODO ConsultaMensaje: ", null, null);
            string strMensaje = string.Empty;
            string strMostrar = string.Empty;
            string strUsuario = string.Empty;
            string strTipo = string.Empty;
            try
            {
                strMostrar = Funciones.CheckStr(ReadKeySettings.Key_MsjMostrar);
                if (strMostrar.Equals("1"))
                {
                    strUsuario = Funciones.CheckStr(Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers);
                    strTipo = new BWOperacionesContingencia().DesactivarContingencia(strUsuario);

                    BEUsuarioSession oPuntoVenta = new BEUsuarioSession();
                    oPuntoVenta = (BEUsuarioSession)HttpContext.Current.Session["Usuario"];

                    var oListConsultaDatosOficina = BLSincronizaSap.ConsultaDatosOficina(Funciones.CheckStr(oPuntoVenta.OficinaVenta), null);

                    var strCanal = String.Empty;
                    strCanal = Funciones.CheckStr(oListConsultaDatosOficina.TipoOficina);

                    strcodCanal = Funciones.CheckStr(strCanal);

                    _objLog.CrearArchivolog("strMostrar: " + strMostrar, null, null);
                    _objLog.CrearArchivolog("strTipo: " + strTipo, null, null);
                    _objLog.CrearArchivolog("strUsuario: " + strUsuario, null, null);
                    _objLog.CrearArchivolog("strcodCanal: " + strcodCanal, null, null);
                    _objLog.CrearArchivolog("strcodOficina: " + strcodOficina, null, null);

                    if (strTipo == "1" || strTipo == "2")
                    {
                        objdatosConfiguracion = new BWOperacionesContingencia().ConsultarConfiguracion(strUsuario, string.Empty, strTipo, strcodCanal, strcodOficina, string.Empty);
                        strMensaje = MensajeDinamico(objdatosConfiguracion, strOrigen, strcodCanal, strcodOficina, strTipo);
                    }
                }
            }
            catch (Exception e)
            {
                strMensaje = string.Empty;
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.Message), null, null);
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("FIN DEL METODO ConsultaMensaje: ", null, null);
            return strMensaje;
        }

        public static string MensajeDinamico(BEconsultarConfiguracion objConsultarConfiguracion, string strOrigen, string strCodCanal, string strCodOficina, string strTipo)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog("INICIO DEL METODO MensajeDinamico", null, null);

            string strMensaje = string.Empty;
            string strCanal = string.Empty;
            string strPDV = string.Empty;
            List<BEconfiguracionGeneral> objconfiguracionGeneral = new List<BEconfiguracionGeneral>();
            List<BEconfiguracionCanal> objconfiguracionCanal = new List<BEconfiguracionCanal>();
            List<BEconfiguracionPuntoVenta> objconfiguracionPuntoVenta = new List<BEconfiguracionPuntoVenta>();

            try
            {
                string sistema = Funciones.CheckStr(ReadKeySettings.Key_SistemaSISACT);
                objconfiguracionGeneral = objConsultarConfiguracion.configuracionGeneral.Where(x => x.sistema == sistema && x.codContingencia == strTipo).ToList();

                if(objconfiguracionGeneral.Count() > 0)
                {
                    strCanal = Funciones.CheckStr(objconfiguracionGeneral[0].canal);
                    strPDV = Funciones.CheckStr(objconfiguracionGeneral[0].puntoventa);

                    _objLog.CrearArchivolog(string.Format("strCanal => {0}", strCanal), null, null);
                    _objLog.CrearArchivolog(string.Format("strPDV => {0}", strPDV), null, null);
                }

                if(strCanal.Equals("0"))
                {
                    objconfiguracionCanal = objConsultarConfiguracion.configuracionCanal.Where(x => x.sistema == sistema && x.codCanal == strCodCanal).ToList();
                    if (objconfiguracionCanal.Count() > 0)
                    {
                        if (strTipo == "1")
                            strCanal = Funciones.CheckStr(objconfiguracionCanal[0].contingencia1);
                        else
                            strCanal = Funciones.CheckStr(objconfiguracionCanal[0].contingencia2);
                    }
                    _objLog.CrearArchivolog(string.Format("strCanal => {0}", strCanal), null, null);
                }

                if (strCanal.Equals("1"))
                {
                    if (strPDV.Equals("0"))
                    {
                        objconfiguracionPuntoVenta = objConsultarConfiguracion.configuracionPuntoVenta.Where(x => x.sistema == sistema && x.codCanal == strCodCanal && x.codOficina == strCodOficina).ToList();
                        if (objconfiguracionPuntoVenta.Count() > 0)
                        {
                            if(strTipo == "1")
                                strPDV = Funciones.CheckStr(objconfiguracionPuntoVenta[0].contingencia1);
                            else
                                strPDV = Funciones.CheckStr(objconfiguracionPuntoVenta[0].contingencia2);
                        }
                    }
                    _objLog.CrearArchivolog(string.Format("strPDV => {0}", strPDV), null, null);
                }

                if (strPDV.Equals("1"))
                {
                    string strMensajePreVenta = string.Empty;
                    string strMensajePreOper = string.Empty;

                    string strMensajePre = string.Empty;
                    string strMensajePost = string.Empty;

                    string strMensajeInf = Funciones.CheckStr(ReadKeySettings.Key_MsjInformativo);
                    string strMensajeRec = Funciones.CheckStr(ReadKeySettings.Key_MsjRecordatorio);

                    string strMensajePostVenta = MensajeVenta(objConsultarConfiguracion, strTipo, ref strMensajePreVenta);
                    string strMensajePostOperacion = MensajeOperacion(objConsultarConfiguracion, strTipo, ref strMensajePreOper);

                    if (!string.IsNullOrEmpty(strMensajePostVenta) && !string.IsNullOrEmpty(strMensajePostOperacion))
                        strMensajePost = string.Format("{0} Postpago en {1}", strMensajePostVenta, strMensajePostOperacion);
                    else if (!string.IsNullOrEmpty(strMensajePostVenta) && string.IsNullOrEmpty(strMensajePostOperacion))
                        strMensajePost = string.Format("{0} Postpago", strMensajePostVenta);
                    else if (string.IsNullOrEmpty(strMensajePostVenta) && !string.IsNullOrEmpty(strMensajePostOperacion))
                        strMensajePost = string.Format("{0} Postpago", strMensajePostOperacion);

                    if (!string.IsNullOrEmpty(strMensajePost))
                    {
                        string strMensaje_1 = string.Format(strMensajeInf, strMensajePost);
                        string strMensaje_2 = string.Format(strMensajeRec, strMensajePost);
                        strMensaje = string.Format("{0}|{1}", strMensaje_1, strMensaje_2);
                    }
                }
            }
            catch (Exception e)
            {
                strMensaje = string.Empty;
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.Message), null, null);
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("FIN DEL METODO MensajeDinamico: ", null, null);
            return strMensaje;

        }

        public static string MensajeVenta(BEconsultarConfiguracion objBEConsultarConfiguracion, string strTipo, ref string strMensajeContatPre)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog("INICIO DEL METODO MensajeVenta", null, null);
            string strMostrarVenta = Funciones.CheckStr(ReadKeySettings.Key_MsjMostrarVenta);
            string strMensaje = string.Empty;
            string mensaje1 = string.Empty;
            string mensaje2 = string.Empty;
            string strMensajeConscatPost = string.Empty;
            strMensajeContatPre = string.Empty;
            List<BEconfiguracionVenta> objconfiguracionVenta = new List<BEconfiguracionVenta>();
            List<BEconfiguracionVenta> objconfiguracionVentaPostPago = new List<BEconfiguracionVenta>();
            List<BEconfiguracionVenta> objconfiguracionVentaPrepago = new List<BEconfiguracionVenta>();
            
            List<BEconfiguracionOperacion> objconfiguracionOperacion = new List<BEconfiguracionOperacion>();
            List<BEconfiguracionOperacion> objconfiguracionOperacionPostPago = new List<BEconfiguracionOperacion>();
            List<BEconfiguracionOperacion> objconfiguracionOperacionPrepago = new List<BEconfiguracionOperacion>();
            
            try
            {
                if (strMostrarVenta.Equals("1"))
                {
                    if (strTipo.Equals("1"))
                        objconfiguracionVenta = objBEConsultarConfiguracion.configuracionVenta.Where(x => x.contingencia1 == "1").ToList();
                    else
                        objconfiguracionVenta = objBEConsultarConfiguracion.configuracionVenta.Where(x => x.contingencia2 == "1").ToList();

                    objconfiguracionVentaPostPago = objconfiguracionVenta.Where(x => x.sistema == "SISACTPOST").ToList();
                    objconfiguracionVentaPrepago = objconfiguracionVenta.Where(x => x.sistema == "SISACTPRE").ToList();

                    if (strTipo.Equals("1"))
                        objconfiguracionOperacion = objBEConsultarConfiguracion.configuracionOperacion.Where(x => x.contingencia1 == "1").ToList();
                    else
                        objconfiguracionOperacion = objBEConsultarConfiguracion.configuracionOperacion.Where(x => x.contingencia2 == "1").ToList();

                    objconfiguracionOperacionPostPago = objconfiguracionOperacion.Where(x => x.sistema == "SISACTPOST").ToList();
                    objconfiguracionOperacionPrepago = objconfiguracionOperacion.Where(x => x.sistema == "SISACTPRE").ToList();

                    if (objconfiguracionVentaPostPago.Count() > 0)
                    {
                        foreach (var v in objconfiguracionVentaPostPago)
                        {
                            bool rsp = false;
                            if (v.codVenta == "1")
                            {
                                foreach (var i in objconfiguracionOperacionPostPago)
                                {
                                    if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionAlta))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                    else if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionPorta))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                    else if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionRepo))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                    else if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionMigracion))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                }

                                if (rsp)
                                    mensaje1 = "Chip";
                            }
                            else if (v.codVenta == "2" || v.codVenta == "3")
                            {
                                foreach (var i in objconfiguracionOperacionPostPago)
                                {
                                    if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionAlta))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                    else if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionPorta))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                    else if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionMigracion))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                    else if (Funciones.CheckStr(i.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionReno))
                                    {
                                        rsp = true;
                                        break;
                                    }
                                }
                                if (rsp)
                                    mensaje2 = "Pack";
                            }
                        }
                    }

                    if (!string.IsNullOrEmpty(mensaje1))
                        strMensajeConscatPost = mensaje1;

                    if (!string.IsNullOrEmpty(strMensajeConscatPost))
                    {
                        if (!string.IsNullOrEmpty(mensaje2))
                            strMensajeConscatPost += " / " + mensaje2;
                    }
                    else
                    {
                        if (!string.IsNullOrEmpty(mensaje2))
                            strMensajeConscatPost = mensaje2;
                    }
                }
            }
            catch (Exception e)
            {
                strMensajeConscatPost = string.Empty;
                strMensajeContatPre = string.Empty;
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.Message), null, null);
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("FIN DEL METODO ConsultaMensaje: ", null, null);
            return strMensajeConscatPost;
        }

        public static string MensajeOperacion(BEconsultarConfiguracion objBEConsultarConfiguracion, string strTipo, ref string strMensajeConcatPre)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, null, null, "WEB");
            _objLog.CrearArchivolog("INICIO DEL METODO MensajeOperacion", null, null);
            string strMostrarVenta = Funciones.CheckStr(ReadKeySettings.Key_MsjMostrarVenta);
            string strMensaje = string.Empty;
            string descOpe = string.Empty;
            string strMensajeConscatPost = string.Empty;
            strMensajeConcatPre = string.Empty;
            List<BEconfiguracionOperacion> objconfiguracionOperacion = new List<BEconfiguracionOperacion>();
            List<BEconfiguracionOperacion> objconfiguracionOperacionPostPago = new List<BEconfiguracionOperacion>();
            List<BEconfiguracionOperacion> objconfiguracionOperacionPrepago = new List<BEconfiguracionOperacion>();

            List<BEconfiguracionVenta> objconfiguracionVenta = new List<BEconfiguracionVenta>();
            List<BEconfiguracionVenta> objconfiguracionVentaPostpago = new List<BEconfiguracionVenta>();
            List<BEconfiguracionVenta> objconfiguracionVentaPrepago = new List<BEconfiguracionVenta>();

            try
            {
                if (strMostrarVenta.Equals("1"))
                {
                    if (strTipo.Equals("1"))
                        objconfiguracionOperacion = objBEConsultarConfiguracion.configuracionOperacion.Where(x => x.contingencia1 == "1").ToList();
                    else
                        objconfiguracionOperacion = objBEConsultarConfiguracion.configuracionOperacion.Where(x => x.contingencia2 == "1").ToList();

                    objconfiguracionOperacionPostPago = objconfiguracionOperacion.Where(x => x.sistema == "SISACTPOST").ToList();
                    objconfiguracionOperacionPrepago = objconfiguracionOperacion.Where(x => x.sistema == "SISACTPRE").ToList();

                    if (strTipo.Equals("1"))
                        objconfiguracionVenta = objBEConsultarConfiguracion.configuracionVenta.Where(x => x.contingencia1 == "1").ToList();
                    else
                        objconfiguracionVenta = objBEConsultarConfiguracion.configuracionVenta.Where(x => x.contingencia2 == "1").ToList();

                    objconfiguracionVentaPostpago = objconfiguracionVenta.Where(x => x.sistema == "SISACTPOST").ToList();
                    objconfiguracionVentaPrepago = objconfiguracionVenta.Where(x => x.sistema == "SISACTPRE").ToList();

                    if (objconfiguracionOperacionPostPago.Count() > 0)
                    {
                        foreach (var o in objconfiguracionOperacionPostPago)
                        {
                            descOpe = string.Empty;
                            if (Funciones.CheckStr(o.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionAlta))
                            {
                                foreach (var i in objconfiguracionVentaPostpago)
                                {
                                    if (i.codVenta == "1" || i.codVenta == "2" || i.codVenta == "3")
                                    {
                                        descOpe = "Alta";
                                        break;
                                    }
                                }
                            }
                            else if (Funciones.CheckStr(o.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionPorta))
                            {
                                foreach (var i in objconfiguracionVentaPostpago)
                                {
                                    if (i.codVenta == "1" || i.codVenta == "2" || i.codVenta == "3")
                                    {
                                        descOpe = "Portabilidad";
                                        break;
                                    }
                                }
                            }
                            else if (Funciones.CheckStr(o.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionRepo))
                            {
                                foreach (var i in objconfiguracionVentaPostpago)
                                {
                                    if (i.codVenta == "1")
                                    {
                                        descOpe = "Reposición Chip";
                                        break;
                                    }
                                }
                            }
                            else if (Funciones.CheckStr(o.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionMigracion))
                            {
                                foreach (var i in objconfiguracionVentaPostpago)
                                {
                                    if (i.codVenta == "1" ||  i.codVenta == "2" || i.codVenta == "3")
                                    {
                                        descOpe = "Migración";
                                        break;
                                    }
                                }
                            }
                            else if (Funciones.CheckStr(o.codOperacion) == Funciones.CheckStr(ReadKeySettings.Key_OperacionReno))
                            {
                                foreach (var i in objconfiguracionVentaPostpago)
                                {
                                    if (i.codVenta == "2" || i.codVenta == "3")
                                    {
                                        descOpe = "Renovación";
                                        break;
                                    }
                                }
                            }

                            if (!string.IsNullOrEmpty(descOpe))
                            {
                                if (!string.IsNullOrEmpty(strMensajeConscatPost))
                                    strMensajeConscatPost += " / " + Funciones.CheckStr(descOpe);
                                else
                                    strMensajeConscatPost = Funciones.CheckStr(descOpe);
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                strMensajeConscatPost = string.Empty;
                strMensajeConcatPre = string.Empty;
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.Message), null, null);
                _objLog.CrearArchivolog(string.Format("Error => {0}", e.StackTrace), null, null);
            }
            _objLog.CrearArchivolog("FIN DEL METODO MensajeOperacion: ", null, null);
            return strMensajeConscatPost;
        }
        /*FIN PROY-140715 - IDEA 140805 - No biometria en SISACT en caida RENIEC*/

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod consultarLineasAdicionales(string strTipoDocumento, string strNumeroDocumento, string strCanal, string strIsPortabilidad)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "WEB");
            _objLog.CrearArchivolog("INICIO INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)", null, null);

            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            BEResponseWebMethod objResponseCamp = new BEResponseWebMethod();

            HttpContext.Current.Session["validacionLineasAdic"] = false;

            objResponse.EstadoSession = false;
            objResponse.Mensaje = string.Empty;

            string codigoRespuestaServidor = string.Empty;
            string mensajeRespuestaServidor = string.Empty;

            try
            {
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strTipoDocumento]", Funciones.CheckStr(strTipoDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strNumeroDocumento]", Funciones.CheckStr(strNumeroDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strCanal]", Funciones.CheckStr(strCanal)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strIsPortabilidad]", Funciones.CheckStr(strIsPortabilidad)), null, null);

                string strFlagGenerarLineasAdicionales = ReadKeySettings.Key_FlagGeneralLineasAdicionales;
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strFlagGenerarLineasAdicionales]", Funciones.CheckStr(strFlagGenerarLineasAdicionales)), null, null);

                if (strFlagGenerarLineasAdicionales == "1")
                {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Flag Encendido]", null, null);

                    if (ReadKeySettings.Key_CanalesPermitidosLineasAdic.IndexOf(strCanal) > -1 && ReadKeySettings.Key_DocumentosPermitidosLineasAdic.IndexOf(strTipoDocumento) > -1)
                    {
                        if (strTipoDocumento == Constantes.constTipoDoc_RUC)
                        {
                            string strTipoRuc = strNumeroDocumento.Substring(0, 2);

                            if (ReadKeySettings.Key_TipoRUCPermitidoLineasAdic.IndexOf(strTipoRuc) == -1)
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [RUC No permitido]", null, null);
                                return objResponse;
                            }

                        }

                        string flagP = strIsPortabilidad == "S" ? "P" : "N";

                        if (flagP == "P")
                        {
                            _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Es PORTABILIDAD]", null, null);

                            if (ReadKeySettings.Key_TipoOperacionPermitidoLineasAdic.IndexOf(flagP) > -1)
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [PORTABILIDAD permitido]", null, null);
                            }
                            else
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [PORTABILIDAD NO permitida]", null, null);
                                return objResponse;
                            }

                        }

                        HttpContext.Current.Session["validacionLineasAdic"] = true;

                        RestMotorPromociones objRestMotorPromociones = new RestMotorPromociones();
                        BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();

                        GetBonosRequest objGetBonosRequest = new GetBonosRequest();
                        BodyRequestGetBonos objBodyRequestGetBonos = new BodyRequestGetBonos();
                        GetBonosResponse objGetBonosResponse = new GetBonosResponse();

                        List<ListResultResponse> objLstResult = new List<ListResultResponse>();

                        Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();


                        #region Header
                        objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Consumer_Generico"]);
                        objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Country_Generico"]);
                        objHeaderRequest.dispositivo = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal;
                        objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Language_Generico"]);
                        objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["GetBono_Service_modulo"]);
                        objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Msgtype_Generico"]);
                        objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["GetBono_Service_operation"]);
                        objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_System_Generico"]);
                        objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                        objHeaderRequest.userId = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objHeaderRequest.wsIp = ConfigurationManager.AppSettings["Service_Wsip_Generico"];

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.consumer]", Funciones.CheckStr(objHeaderRequest.consumer)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.country]", Funciones.CheckStr(objHeaderRequest.country)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.dispositivo]", Funciones.CheckStr(objHeaderRequest.dispositivo)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.modulo]", Funciones.CheckStr(objHeaderRequest.modulo)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.msgType]", Funciones.CheckStr(objHeaderRequest.msgType)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.operation]", Funciones.CheckStr(objHeaderRequest.operation)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.pid]", Funciones.CheckStr(objHeaderRequest.pid)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.system]", Funciones.CheckStr(objHeaderRequest.system)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.timestamp]", Funciones.CheckStr(objHeaderRequest.timestamp)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.userId]", Funciones.CheckStr(objHeaderRequest.userId)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.wsIp]", Funciones.CheckStr(objHeaderRequest.wsIp)), null, null);

                        objGetBonosRequest.MessageRequest.Header.HeaderRequest = objHeaderRequest;

                        #endregion


                        #region Auditoria
                        objBEAuditoriaRequest.idAplicacion = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.canal = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.usuarioAplicacion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objBEAuditoriaRequest.usuarioSesion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objBEAuditoriaRequest.idTransaccionESB = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.idTransaccionNegocio = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.fechaInicio = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                        objBEAuditoriaRequest.nodoAdicional = "0";

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.idAplicacion]", Funciones.CheckStr(objBEAuditoriaRequest.idAplicacion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.canal]", Funciones.CheckStr(objBEAuditoriaRequest.canal)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.usuarioAplicacion]", Funciones.CheckStr(objBEAuditoriaRequest.usuarioAplicacion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.usuarioSesion]", Funciones.CheckStr(objBEAuditoriaRequest.usuarioSesion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.idTransaccionESB]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccionESB)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.idTransaccionNegocio]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccionNegocio)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.fechaInicio]", Funciones.CheckStr(objBEAuditoriaRequest.fechaInicio)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.nodoAdicional]", Funciones.CheckStr(objBEAuditoriaRequest.nodoAdicional)), null, null);

                        #endregion

                        #region Body

                        objBodyRequestGetBonos.msisdn = string.Empty;
                        objBodyRequestGetBonos.numeroDocumento = strNumeroDocumento;
                        objBodyRequestGetBonos.tipoDocumento = ObtenerDescripcionDocumento(strTipoDocumento);
                        objBodyRequestGetBonos.all = false;
                        objBodyRequestGetBonos.actived = true;
                        objBodyRequestGetBonos.deactivated = false;
                        objBodyRequestGetBonos.category = string.Empty;
                        objBodyRequestGetBonos.group = "DSCTO";
                        objBodyRequestGetBonos._event = string.Empty;

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.msisdn]", Funciones.CheckStr(objBodyRequestGetBonos.msisdn)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.numeroDocumento]", Funciones.CheckStr(objBodyRequestGetBonos.numeroDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.tipoDocumento]", Funciones.CheckStr(objBodyRequestGetBonos.tipoDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.all]", Funciones.CheckStr(objBodyRequestGetBonos.all)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.actived]", Funciones.CheckStr(objBodyRequestGetBonos.actived)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.deactivated]", Funciones.CheckStr(objBodyRequestGetBonos.deactivated)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.category]", Funciones.CheckStr(objBodyRequestGetBonos.category)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos.group]", Funciones.CheckStr(objBodyRequestGetBonos.group)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetBonos._event]", Funciones.CheckStr(objBodyRequestGetBonos._event)), null, null);

                        objGetBonosRequest.MessageRequest.Body = objBodyRequestGetBonos;

                        #endregion

                        objGetBonosResponse = objRestMotorPromociones.getBonos(objGetBonosRequest, objBEAuditoriaRequest);

                        codigoRespuestaServidor = objGetBonosResponse.MessageResponse.body.responseAudit.codigoRespuesta;
                        mensajeRespuestaServidor = objGetBonosResponse.MessageResponse.body.responseAudit.mensajeRespuesta;


                        if (codigoRespuestaServidor == "0")
                        {
                            objLstResult = objGetBonosResponse.MessageResponse.body.result;

                            if (objLstResult != null && objLstResult.Count() > 0)
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Devolvio lista de lineas]", null, null);

                                int count = 0;

                                foreach (ListResultResponse item in objLstResult)
                                {
                                    if (item.bonos != null && item.bonos.Count() > 0)
                                    {
                                        count++;
                                        _objLog.CrearArchivolog(String.Format("{0} {1} {2}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][Linea]", Funciones.CheckStr(item.msisdn), "SI tiene Bono"), null, null);
                                    }
                                }

                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][Cantidad de lineas con beneficio]", Funciones.CheckStr(count)), null, null);

                                if (count >= 1)
                                {
                                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cliente SI tiene beneficio Lineas adicionales]", null, null);
                                    objResponse.Mensaje = ReadKeySettings.Key_MsjClienteSITieneLineasAdic;
                                    objResponse.EstadoSession = true;
                                }
                                else
                                {
                                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cliente NO tiene beneficio Lineas adicionales]", null, null);
                                    //objResponse.Mensaje = ReadKeySettings.Key_MsjClienteNOTieneLineasAdic;
                                }

                            }
                            else
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cliente NO tiene beneficio Lineas adicionales]", null, null);
                                //objResponse.Mensaje = ReadKeySettings.Key_MsjClienteNOTieneLineasAdic;
                            }
                        }
                        else
                        {
                            _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Ocurrio un error al obtener Lineas adicionales]", null, null);
                        }



                //Consulta lineas y cargos fijos.
                objResponseCamp = obtenerLineasCliente(strTipoDocumento, strNumeroDocumento, strCanal, strIsPortabilidad);

                if (String.IsNullOrEmpty(objResponse.Mensaje))
                {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [NO Existen lineas adicionales que ya tienen el beneficio]", null, null);

                    if (objResponseCamp.EstadoSession)
                    {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Existen lineas con CF mayor al minimo permitido]", null, null);

                            objResponse.EstadoSession = true;
                        objResponse.Mensaje = objResponseCamp.Mensaje;
                    }
                    else
                    {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [NO Existen lineas con CF mayor al minimo permitido]", null, null);
                    }

                        }
                        else
                        {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [SI Existen lineas adicionales que ya tienen el beneficio]", null, null);
                }

            }
                    else
                    {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Canal o Tipo de documento NO permitido]", null, null);
                    }

                }
                else
                {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Flag apagado]", null, null);

                }

            }
            catch (Exception ex)
            {

                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][Error]", ex.Message, ex.StackTrace), null, null);
            }

            _objLog.CrearArchivolog("FIN INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)", null, null);

            return objResponse;
        }

       // [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod obtenerLineasCliente(string strTipoDocumento, string strNumeroDocumento, string strCanal, string strIsPortabilidad)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "WEB");
            _objLog.CrearArchivolog("INICIO INICIATIVA 888 - Beneficio Lineas Adicionales (obtenerLineasCliente)", null, null);

            BEResponseWebMethod objResponse = new BEResponseWebMethod();

            HttpContext.Current.Session["blMostrarCampanasDescuento"] = false;

            objResponse.EstadoSession = false;
            objResponse.Mensaje = string.Empty;

            string codigoRespuestaServidor = string.Empty;
            string mensajeRespuestaServidor = string.Empty;

            try
            {
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strTipoDocumento]", Funciones.CheckStr(strTipoDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strNumeroDocumento]", Funciones.CheckStr(strNumeroDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strCanal]", Funciones.CheckStr(strCanal)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][strIsPortabilidad]", Funciones.CheckStr(strIsPortabilidad)), null, null);


                RestMotorPromociones objRestMotorPromociones = new RestMotorPromociones();
                BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();

                GetMultilineaInfoRequest objGetMultilineaInfoRequest = new GetMultilineaInfoRequest();
                BodyRequestGetMultilineaInfo objBodyRequestGetMultilineaInfo = new BodyRequestGetMultilineaInfo();
                GetMultilineaInfoResponse objGetMultilineaInfoResponse = new GetMultilineaInfoResponse();

                List<ListResultResponseG> objLstResultResponseG = new List<ListResultResponseG>();

                Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();


                #region Header
                objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Consumer_Generico"]);
                objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Country_Generico"]);
                objHeaderRequest.dispositivo = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal;
                objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Language_Generico"]);
                objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["GetMultilineaInfo_Service_modulo"]);
                objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Msgtype_Generico"]);
                objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["GetMultilineaInfo_Service_operation"]);
                objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_System_Generico"]);
                objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                objHeaderRequest.userId = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                objHeaderRequest.wsIp = ConfigurationManager.AppSettings["Service_Wsip_Generico"];

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.consumer]", Funciones.CheckStr(objHeaderRequest.consumer)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.country]", Funciones.CheckStr(objHeaderRequest.country)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.dispositivo]", Funciones.CheckStr(objHeaderRequest.dispositivo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.modulo]", Funciones.CheckStr(objHeaderRequest.modulo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.msgType]", Funciones.CheckStr(objHeaderRequest.msgType)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.operation]", Funciones.CheckStr(objHeaderRequest.operation)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.pid]", Funciones.CheckStr(objHeaderRequest.pid)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.system]", Funciones.CheckStr(objHeaderRequest.system)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.timestamp]", Funciones.CheckStr(objHeaderRequest.timestamp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.userId]", Funciones.CheckStr(objHeaderRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objHeaderRequest.wsIp]", Funciones.CheckStr(objHeaderRequest.wsIp)), null, null);

                objGetMultilineaInfoRequest.MessageRequest.Header.HeaderRequest = objHeaderRequest;

                #endregion


                #region Auditoria
                objBEAuditoriaRequest.idAplicacion = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                objBEAuditoriaRequest.canal = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                objBEAuditoriaRequest.usuarioAplicacion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                objBEAuditoriaRequest.usuarioSesion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                objBEAuditoriaRequest.idTransaccionESB = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.idTransaccionNegocio = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBEAuditoriaRequest.fechaInicio = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBEAuditoriaRequest.nodoAdicional = "0";

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.idAplicacion]", Funciones.CheckStr(objBEAuditoriaRequest.idAplicacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.canal]", Funciones.CheckStr(objBEAuditoriaRequest.canal)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.usuarioAplicacion]", Funciones.CheckStr(objBEAuditoriaRequest.usuarioAplicacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.usuarioSesion]", Funciones.CheckStr(objBEAuditoriaRequest.usuarioSesion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.idTransaccionESB]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccionESB)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.idTransaccionNegocio]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccionNegocio)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.fechaInicio]", Funciones.CheckStr(objBEAuditoriaRequest.fechaInicio)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBEAuditoriaRequest.nodoAdicional]", Funciones.CheckStr(objBEAuditoriaRequest.nodoAdicional)), null, null);

                #endregion

                #region Body

                objBodyRequestGetMultilineaInfo.numeroDocumento = strNumeroDocumento;
                objBodyRequestGetMultilineaInfo.tipoDocumento = ObtenerDescripcionDocumento(strTipoDocumento);

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetMultilineaInfo.numeroDocumento]", Funciones.CheckStr(objBodyRequestGetMultilineaInfo.numeroDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][objBodyRequestGetMultilineaInfo.tipoDocumento]", Funciones.CheckStr(objBodyRequestGetMultilineaInfo.tipoDocumento)), null, null);

                objGetMultilineaInfoRequest.MessageRequest.Body = objBodyRequestGetMultilineaInfo;

                #endregion

                objGetMultilineaInfoResponse = objRestMotorPromociones.getMultilineaInfo(objGetMultilineaInfoRequest, objBEAuditoriaRequest);

                codigoRespuestaServidor = objGetMultilineaInfoResponse.MessageResponse.body.responseAudit.codigoRespuesta;
                mensajeRespuestaServidor = objGetMultilineaInfoResponse.MessageResponse.body.responseAudit.mensajeRespuesta;


                if (codigoRespuestaServidor == "0")
                {
                    objLstResultResponseG = objGetMultilineaInfoResponse.MessageResponse.body.result;

                    if (objLstResultResponseG != null && objLstResultResponseG.Count() > 0)
                    {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Devolvio lista de lineas]", null, null);

                        int count = 0;
                        int index = 0;
                        double dblCargoFijoValidacion = Funciones.CheckDbl(ReadKeySettings.Key_CargoFijoMinimo);
                        string strPlanesPermitidosTOBE = String.Format("{0}{1}{2}{3}{4}", ReadKeySettings.Key_PlanesPermitidosTOBE1, ReadKeySettings.Key_PlanesPermitidosTOBE2, ReadKeySettings.Key_PlanesPermitidosTOBE3, ReadKeySettings.Key_PlanesPermitidosTOBE4, ReadKeySettings.Key_PlanesPermitidosTOBE5);
                        string strPlanesPermitidosASIS = ReadKeySettings.Key_PlanesPermitidosASIS;

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][dblCargoFijoValidacion]", Funciones.CheckStr(dblCargoFijoValidacion)), null, null);

                        foreach (ListResultResponseG item in objLstResultResponseG)
                        {
                            index++;
                            double dblCargoFijo = Funciones.CheckDbl(item.cargoFijo);
                            string strPlataforma = item.system;
                            bool blPermitido = false;

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][Datos la linea #]", Funciones.CheckStr(index)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.msisdn]", Funciones.CheckStr(item.msisdn)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.system]", Funciones.CheckStr(item.system)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.cargoFijo]", Funciones.CheckStr(item.cargoFijo)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.plan]", Funciones.CheckStr(item.plan)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.planDesc]", Funciones.CheckStr(item.planDesc)), null, null);

                            if (dblCargoFijo >= dblCargoFijoValidacion)
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cargo fijo es mayor o igual al Cargo fijo minimo configurado]", null, null);

                                if (strPlataforma == "BSCSCBIO")
                                {
                                    blPermitido = strPlanesPermitidosTOBE.IndexOf(item.plan) > -1;
                                }
                                else
                                {
                                    blPermitido = strPlanesPermitidosASIS.IndexOf(item.plan) > -1;
                                }

                                if (blPermitido)
                                {
                                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Plan permitido para entrega de bono]", null, null);
                                    count++;
                                }
                                else
                                {
                                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Plan NO permitido para entrega de bono]", null, null);
                                }

                                HttpContext.Current.Session["blMostrarCampanasDescuento"] = true;
                            }
                            else
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cargo fijo es menor al Cargo fijo minimo configurado]", null, null);
                            }
                        }

                        if (count >= 1)
                        {
                            _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cliente tiene lineas con CF mayor al minimo establecido]", null, null);
                            objResponse.Mensaje = ReadKeySettings.Key_MsjClienteTieneLineasMayorCFMinimo;
                    }
                    else
                    {
                            _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cliente NO tiene lineas con CF mayor al minimo establecido]", null, null);
                            objResponse.Mensaje = ReadKeySettings.Key_MsjClienteNoTieneLineasMayorCFMinimo;
                    }

                }
                else
                {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Cliente NO tiene Lineas]", null, null);
                        objResponse.Mensaje = ReadKeySettings.Key_MsjClienteNuevo;
                    }

                    objResponse.EstadoSession = true;
                }
                else
                {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales) [Ocurrio un error al obtener Lineas adicionales]", null, null);
                }

            }
            catch (Exception ex)
            {

                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)][Error]", ex.Message, ex.StackTrace), null, null);
            }

            _objLog.CrearArchivolog("FIN INICIATIVA 888 - Beneficio Lineas Adicionales (consultarLineasAdicionales)", null, null);

            return objResponse;
        }

        [System.Web.Services.WebMethod()]
        public static BEResponseWebMethod validarLineasAdicionales(string strTipoDocumento, string strNumeroDocumento, string strTipoProducto, string strOperacion, string strOferta, string strModVenta, string strIsPortabilidad, string hidCadenaDetalle)
        {
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, "", null, "WEB");
            _objLog.CrearArchivolog("INICIO INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)", null, null);

            BEResponseWebMethod objResponse = new BEResponseWebMethod();
            objResponse.EstadoSession = false;
            List<BEPlanDetalleVenta> detallesEvaluacion = new List<BEPlanDetalleVenta>();
            List<ListNewContractRequest> objlstNewContract = new List<ListNewContractRequest>();
            List<ListContractResponse> objlstContracResponse = new List<ListContractResponse>();

            StringBuilder sbListaLineas = new StringBuilder();
            string strListLineas = string.Empty;

            string codigoRespuestaServidor = string.Empty;
            string mensajeRespuestaServidor = string.Empty;

            try
            {
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strTipoDocumento]", Funciones.CheckStr(strTipoDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strNumeroDocumento]", Funciones.CheckStr(strNumeroDocumento)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strTipoProducto]", Funciones.CheckStr(strTipoProducto)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strOperacion]", Funciones.CheckStr(strOperacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strOferta]", Funciones.CheckStr(strOferta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strModVenta]", Funciones.CheckStr(strModVenta)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][strIsPortabilidad]", Funciones.CheckStr(strIsPortabilidad)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][hidCadenaDetalle]", Funciones.CheckStr(hidCadenaDetalle)), null, null);

                bool flagValidaLineasAdic = (bool)HttpContext.Current.Session["validacionLineasAdic"];

                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][flagValidaLineasAdic]", Funciones.CheckStr(flagValidaLineasAdic)), null, null);

                if (flagValidaLineasAdic)
                {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales) [SI cumplio validacion inicial]", null, null);

                    if (ReadKeySettings.Key_ProductosPermitidosLineasAdic.IndexOf(strTipoProducto) > -1 &&
                        ReadKeySettings.Key_TipoOperacionPermitidoLineasAdic.IndexOf(strOperacion) > -1 &&
                        ReadKeySettings.Key_ModalidadVentaPermitidoLineasAdic.IndexOf(strModVenta) > -1 &&
                        ReadKeySettings.Key_TipoOfertaPermitidoLineasAdic.IndexOf(strOferta) > -1)
                    {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales) [SI cumplio con validacion de parametros]", null, null);

                        string[] arrPlanes = hidCadenaDetalle.Split(new char[] { '|' }, StringSplitOptions.RemoveEmptyEntries);

                        foreach (string strPlanes in arrPlanes)
                        {
                            string[] strPlanFila = strPlanes.Split(';');
                            BEPlanDetalleVenta objPlanDetalle = new BEPlanDetalleVenta();
                            string[] arrPlan = strPlanFila[9].Split('_');
                            objPlanDetalle.PLANC_CODIGO = arrPlan[0];
                            objPlanDetalle.S_CARGO_FIJO = arrPlan[1];
                            objPlanDetalle.CODIGO_BSCS = arrPlan[6];
                            objPlanDetalle.PLANV_DESCRIPCION = strPlanFila[11];
                            objPlanDetalle.TELEFONO = strPlanFila[30];
                            objPlanDetalle.CAMPANA_DESC = strPlanFila[16];
                            detallesEvaluacion.Add(objPlanDetalle);
                        }


                        RestMotorPromociones objRestMotorPromociones = new RestMotorPromociones();
                        BEAuditoriaRequest objBEAuditoriaRequest = new BEAuditoriaRequest();

                        SimulacionMultilineasRequest objSimulacionMultilineasRequest = new SimulacionMultilineasRequest();
                        BodyRequestSimulacionMultilineas objBodyRequestSimulacionMultilineasRequest = new BodyRequestSimulacionMultilineas();
                        SimulacionMultilineasResponse objSimulacionMultilineasResponse = new SimulacionMultilineasResponse();

                        List<ListResultResponse> objLstResult = new List<ListResultResponse>();

                        Claro.SISACT.Entity.DataPowerRest.HeaderRequest objHeaderRequest = new Claro.SISACT.Entity.DataPowerRest.HeaderRequest();


                        #region Header
                        objHeaderRequest.consumer = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Consumer_Generico"]);
                        objHeaderRequest.country = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Country_Generico"]);
                        objHeaderRequest.dispositivo = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentTerminal;
                        objHeaderRequest.language = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Language_Generico"]);
                        objHeaderRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["SimulacionMultilinea_Service_modulo"]);
                        objHeaderRequest.msgType = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_Msgtype_Generico"]);
                        objHeaderRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["SimulacionMultilinea_Service_operation"]);
                        objHeaderRequest.pid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objHeaderRequest.system = Funciones.CheckStr(ConfigurationManager.AppSettings["Service_System_Generico"]);
                        objHeaderRequest.timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.fffZ");
                        objHeaderRequest.userId = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objHeaderRequest.wsIp = ConfigurationManager.AppSettings["Service_Wsip_Generico"];

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.consumer]", Funciones.CheckStr(objHeaderRequest.consumer)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.country]", Funciones.CheckStr(objHeaderRequest.country)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.dispositivo]", Funciones.CheckStr(objHeaderRequest.dispositivo)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.modulo]", Funciones.CheckStr(objHeaderRequest.modulo)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.msgType]", Funciones.CheckStr(objHeaderRequest.msgType)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.operation]", Funciones.CheckStr(objHeaderRequest.operation)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.pid]", Funciones.CheckStr(objHeaderRequest.pid)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.system]", Funciones.CheckStr(objHeaderRequest.system)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.timestamp]", Funciones.CheckStr(objHeaderRequest.timestamp)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.userId]", Funciones.CheckStr(objHeaderRequest.userId)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objHeaderRequest.wsIp]", Funciones.CheckStr(objHeaderRequest.wsIp)), null, null);

                        objSimulacionMultilineasRequest.MessageRequest.Header.HeaderRequest = objHeaderRequest;

                        #endregion


                        #region Auditoria
                        objBEAuditoriaRequest.idAplicacion = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.canal = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                        objBEAuditoriaRequest.usuarioAplicacion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objBEAuditoriaRequest.usuarioSesion = Claro.SISACT.Web.Base.Sisact_Webbase.CurrentUsers;
                        objBEAuditoriaRequest.idTransaccionESB = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.idTransaccionNegocio = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                        objBEAuditoriaRequest.fechaInicio = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ssZ");
                        objBEAuditoriaRequest.nodoAdicional = "0";

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.idAplicacion]", Funciones.CheckStr(objBEAuditoriaRequest.idAplicacion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.canal]", Funciones.CheckStr(objBEAuditoriaRequest.canal)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.usuarioAplicacion]", Funciones.CheckStr(objBEAuditoriaRequest.usuarioAplicacion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.usuarioSesion]", Funciones.CheckStr(objBEAuditoriaRequest.usuarioSesion)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.idTransaccionESB]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccionESB)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.idTransaccionNegocio]", Funciones.CheckStr(objBEAuditoriaRequest.idTransaccionNegocio)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.fechaInicio]", Funciones.CheckStr(objBEAuditoriaRequest.fechaInicio)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBEAuditoriaRequest.nodoAdicional]", Funciones.CheckStr(objBEAuditoriaRequest.nodoAdicional)), null, null);

                        #endregion

                        #region Body

                        objBodyRequestSimulacionMultilineasRequest.tipoDocumento = ObtenerDescripcionDocumento(strTipoDocumento);
                        objBodyRequestSimulacionMultilineasRequest.numeroDocumento = strNumeroDocumento;
                        objBodyRequestSimulacionMultilineasRequest.lineasAdicionales = true;
                        objBodyRequestSimulacionMultilineasRequest.duplicaGb = false;
                        objBodyRequestSimulacionMultilineasRequest.fullClaro = false;

                        int index = 0;
                        string strDescOperacion = string.Empty;

                        foreach (BEPlanDetalleVenta item in detallesEvaluacion)
                        {
                            index++;

                            ListNewContractRequest objNewContract = new ListNewContractRequest();

                            if (String.IsNullOrEmpty(item.TELEFONO))
                            {
                                string characters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";

                                string randomCaracter = string.Concat(Enumerable.Repeat(characters.ToArray().GetValue(index), 9));

                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][randomCaracter]", Funciones.CheckStr(randomCaracter)), null, null);

                                item.TELEFONO = String.Format("51{0}", randomCaracter);
                            }
                            else
                            {
                                item.TELEFONO = String.Format("51{0}", item.TELEFONO);
                            }
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.TELEFONO]", Funciones.CheckStr(item.TELEFONO)), null, null);

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][item.CODIGO_BSCS]", Funciones.CheckStr(item.CODIGO_BSCS)), null, null);

                            BEItemGenerico objCBIO = new BLGeneral_II().ListarTopeAutomaticoCBIO(item.CODIGO_BSCS, 0);
                            string strPlanFinal = string.Empty;

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][CodigoRPTA]", Funciones.CheckStr(objCBIO.Codigo2)), null, null);

                            if (objCBIO.Codigo2 == "0")
                            {
                                strPlanFinal = objCBIO.Valor1;
                                strDescOperacion = strIsPortabilidad == "S" ? "PORTABILIDAD" : "ALTA";
                            }
                            else
                            {
                                strPlanFinal = item.CODIGO_BSCS;
                                strDescOperacion = strIsPortabilidad == "S" ? "PORTAASIS" : "ALTAASIS";
                            }


                            objNewContract.linea = item.TELEFONO;
                            objNewContract.operacionOrigen = strDescOperacion;
                            objNewContract.planFinal = strPlanFinal;
                            objNewContract.cargoFijoPlanDestino = item.S_CARGO_FIJO;
                            objNewContract.campania = item.CAMPANA_DESC;
                            objNewContract.tipoProducto = "MOVIL";
                            objNewContract.tipoSuscripcion = "POSTPAGO";
                            objNewContract.antiguedadLinea = "0";
                            objNewContract.poNameDestino = item.PLANV_DESCRIPCION;

                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][Datos del ITEM #]", Funciones.CheckStr(index)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.linea]", Funciones.CheckStr(objNewContract.linea)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.operacionOrigen]", Funciones.CheckStr(objNewContract.operacionOrigen)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.planFinal]", Funciones.CheckStr(objNewContract.planFinal)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.cargoFijoPlanDestino]", Funciones.CheckStr(objNewContract.cargoFijoPlanDestino)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.campania]", Funciones.CheckStr(objNewContract.campania)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.tipoProducto]", Funciones.CheckStr(objNewContract.tipoProducto)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.tipoSuscripcion]", Funciones.CheckStr(objNewContract.tipoSuscripcion)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.antiguedadLinea]", Funciones.CheckStr(objNewContract.antiguedadLinea)), null, null);
                            _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objNewContract.poNameDestino]", Funciones.CheckStr(objNewContract.poNameDestino)), null, null);

                            objlstNewContract.Add(objNewContract);

                        }

                        objBodyRequestSimulacionMultilineasRequest.newContract = objlstNewContract;

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBodyRequestSimulacionMultilineasRequest.tipoDocumento]", Funciones.CheckStr(objBodyRequestSimulacionMultilineasRequest.tipoDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBodyRequestSimulacionMultilineasRequest.numeroDocumento]", Funciones.CheckStr(objBodyRequestSimulacionMultilineasRequest.numeroDocumento)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBodyRequestSimulacionMultilineasRequest.lineasAdicionales]", Funciones.CheckStr(objBodyRequestSimulacionMultilineasRequest.lineasAdicionales)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBodyRequestSimulacionMultilineasRequest.duplicaGb]", Funciones.CheckStr(objBodyRequestSimulacionMultilineasRequest.duplicaGb)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][objBodyRequestSimulacionMultilineasRequest.fullClaro]", Funciones.CheckStr(objBodyRequestSimulacionMultilineasRequest.fullClaro)), null, null);


                        objSimulacionMultilineasRequest.MessageRequest.Body = objBodyRequestSimulacionMultilineasRequest;

                        #endregion

                        objSimulacionMultilineasResponse = objRestMotorPromociones.simulacionMultilineas(objSimulacionMultilineasRequest, objBEAuditoriaRequest);

                        codigoRespuestaServidor = objSimulacionMultilineasResponse.MessageResponse.body.responseAudit.codigoRespuesta;
                        mensajeRespuestaServidor = objSimulacionMultilineasResponse.MessageResponse.body.responseAudit.mensajeRespuesta;

                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][codigoRespuestaServidor]", Funciones.CheckStr(codigoRespuestaServidor)), null, null);
                        _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][mensajeRespuestaServidor]", Funciones.CheckStr(mensajeRespuestaServidor)), null, null);


                        if (codigoRespuestaServidor == "0")
                        {

                            objlstContracResponse = objSimulacionMultilineasResponse.MessageResponse.body.result.contract;

                            if (objlstContracResponse != null && objlstContracResponse.Count() > 0)
                            {
                                _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales) [SI devolvio lista de lineas]", null, null);

                                foreach (ListContractResponse item in objlstContracResponse)
                                {
                                    string linea = item.msisdn;
                                    bool blLineaReal = linea.All(Char.IsNumber);

                                    linea = blLineaReal ? String.Format("{0}{1}", linea.Substring(0, linea.Length - 3), "xxx") : " - ";

                                    sbListaLineas.AppendFormat("{0}|", linea);
                                    sbListaLineas.AppendFormat("{0}|", item.plan);
                                    string flagDescuento = string.IsNullOrEmpty(item.promotionCode) ? "No" : "Sí";
                                    sbListaLineas.AppendFormat("{0},", flagDescuento);
                                }

                                strListLineas = sbListaLineas.ToString();
                                strListLineas = strListLineas.Substring(0, strListLineas.Length - 1);

                                _objLog.CrearArchivolog(String.Format("{0} --> {1}", "[INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][Cadena de Lineas ]", Funciones.CheckStr(strListLineas)), null, null);
                            }

                            objResponse.EstadoSession = true;
                            objResponse.Cadena = strListLineas;
                        }
                    }
                    else
                    {
                        _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales) [NO cumplio con validacion de parametros]", null, null);
                    }
                }
                else
                {
                    _objLog.CrearArchivolog("INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales) [NO cumplio validacion inicial]", null, null);
                }
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(string.Format("{0} => [{1}|{2}]", "[INICIO INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)][Error]", ex.Message, ex.StackTrace), null, null);

            }

            _objLog.CrearArchivolog("FIN INICIATIVA 888 - Beneficio Lineas Adicionales (validarLineasAdicionales)", null, null);

            return objResponse;
        }

        public static string ObtenerDescripcionDocumento(string strTipoDocumento)
        {
            string strDescripcionDocumento = string.Empty;
            List<BETipoDocumento> objListaDocumento = (new BLGeneral()).ListarTipoDocumento();
            strDescripcionDocumento = Funciones.CheckStr(objListaDocumento.Where(x => x.ID_SISACT == strTipoDocumento).FirstOrDefault().DESCRIPCION);

            return strDescripcionDocumento;
        }

        #region [PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil]
        public bool RegistrarEvalVentasVarias(RegistrarVentaAccCuotasTypeRequest objReques)
        {

            RestVentasCuotas rService = new RestVentasCuotas();
            RegistrarVentaAccCuotasResponse objResponse = new RegistrarVentaAccCuotasResponse();
            RegistrarVentaAccCuotasRequest objRequest = new RegistrarVentaAccCuotasRequest();
            Dictionary<string, string> dcParameters = new Dictionary<string, string>();
            string strCodRpst, strMsjRpst, strIdTransaccion = string.Empty;
            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, Funciones.CheckStr(objReques.numeroSec), null, "WEB");

            try
            {

                Claro.SISACT.Entity.DataPowerRest.Generic.HeaderRequest headersRequest = rService.GetHeader_v2();
                headersRequest.dispositivo = CurrentTerminal;
                headersRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                headersRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["DP_consModulo_Generico"]);
                headersRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["DP_consOperacion_Generico"]);
                headersRequest.wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["conswsipPedidosTienda"]);

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [dispositivo] ", Funciones.CheckStr(headersRequest.dispositivo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [userId] ", Funciones.CheckStr(headersRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [modulo] ", Funciones.CheckStr(headersRequest.modulo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [operation] ", Funciones.CheckStr(headersRequest.operation)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [wsIp] ", Funciones.CheckStr(headersRequest.wsIp)), null, null);


                objRequest.MessageRequest.Header.HeaderRequest = headersRequest;
                objRequest.MessageRequest.Body.ventaAccesorioRequest = objReques;

                BEAuditoriaRequest objBeAuditoriaRequest = new BEAuditoriaRequest();
                objBeAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBeAuditoriaRequest.timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBeAuditoriaRequest.userId = Funciones.CheckStr(CurrentUser);
                objBeAuditoriaRequest.msgid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBeAuditoriaRequest.dataPower = true;
                objBeAuditoriaRequest.accept = "application/json";
                objBeAuditoriaRequest.urlTimeOut_Rest = Funciones.CheckStr(ConfigurationManager.AppSettings["ConsMejorasPorta_TimeOut"]);
                objBeAuditoriaRequest.wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["conswsipPedidosTienda"]);
                objBeAuditoriaRequest.ipTransaccion = Funciones.CheckStr(HttpContext.Current.Session["CurrentTerminal"]);
                objBeAuditoriaRequest.usuarioAplicacion = Funciones.CheckStr(CurrentUser);
                objBeAuditoriaRequest.urlRest = "urlRegAccCuotas";
                objBeAuditoriaRequest.ipApplication = CurrentServer;

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [idTransaccion] ", Funciones.CheckStr(objBeAuditoriaRequest.idTransaccion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [timestamp] ", Funciones.CheckStr(objBeAuditoriaRequest.timestamp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [userId] ", Funciones.CheckStr(objBeAuditoriaRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [msgid] ", Funciones.CheckStr(objBeAuditoriaRequest.msgid)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [dataPower] ", Funciones.CheckStr(objBeAuditoriaRequest.dataPower)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [accept] ", Funciones.CheckStr(objBeAuditoriaRequest.accept)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [urlTimeOut_Rest] ", Funciones.CheckStr(objBeAuditoriaRequest.urlTimeOut_Rest)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [wsIp] ", Funciones.CheckStr(objBeAuditoriaRequest.wsIp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [ipTransaccion] ", Funciones.CheckStr(objBeAuditoriaRequest.ipTransaccion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [usuarioAplicacion] ", Funciones.CheckStr(objBeAuditoriaRequest.usuarioAplicacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [ipApplication] ", Funciones.CheckStr(objBeAuditoriaRequest.ipApplication)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [urlRest] ", Funciones.CheckStr(objBeAuditoriaRequest.urlRest)), null, null);

                objResponse = rService.RegistrarVtaAccCuotas(dcParameters, objRequest, objBeAuditoriaRequest);

                strCodRpst = objResponse.MessageResponse.Body.ventaAccesorioResponse.responseStatus.codigoRespuesta;
                strMsjRpst = objResponse.MessageResponse.Body.ventaAccesorioResponse.responseStatus.mensajeRespuesta;
                strIdTransaccion = objResponse.MessageResponse.Body.ventaAccesorioResponse.responseStatus.idTransaccion;

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [strCodRpst] ", Funciones.CheckStr(strCodRpst)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [strMsjRpst] ", Funciones.CheckStr(strMsjRpst)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [strIdTransaccion] ", Funciones.CheckStr(strIdTransaccion)), null, null);


                if (Equals(strCodRpst, "0"))
                {
                    return true;
                }

                return false;
            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [Message] ", Funciones.CheckStr(ex.Message)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [StackTrace] ", Funciones.CheckStr(ex.StackTrace)), null, null);
                return false;
            }
        }

        private static bool valCuotasAccPendXLinea(string strLineaCuenta, string strTipoDoc, string strNroDoc, string CurrentUsers, string strCoid, string CurrentTerminal)
        {
            RestVentasCuotas rService = new RestVentasCuotas();
            ValdCuoAccPendXLineaResponse objResponse = new ValdCuoAccPendXLineaResponse();
            ValdCuoAccPendXLineaRequest objRequest = new ValdCuoAccPendXLineaRequest();
            Dictionary<string, string> dcParameters = new Dictionary<string, string>();
            ValdCuoAccPendXLineaTypeRequest objRqts = new ValdCuoAccPendXLineaTypeRequest();

            GeneradorLog _objLog = new GeneradorLog(CurrentUsers, strNroDoc, null, "WEB");

            string strCantHoras = string.Empty;
            bool blRespuesta = false;
            string strCodRpst, strMsjRpst, strIdTransaccion = string.Empty;

            try
            {

                Claro.SISACT.Entity.DataPowerRest.Generic.HeaderRequest headersRequest = rService.GetHeader_v2();
                headersRequest.dispositivo = CurrentTerminal;
                headersRequest.userId = Funciones.CheckStr(ConfigurationManager.AppSettings["system_ConsultaClave"]);
                headersRequest.modulo = Funciones.CheckStr(ConfigurationManager.AppSettings["DP_consModulo_Generico"]);
                headersRequest.operation = Funciones.CheckStr(ConfigurationManager.AppSettings["DP_consOperacion_Generico"]);
                headersRequest.wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["conswsipPedidosTienda"]);

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [dispositivo] ", Funciones.CheckStr(headersRequest.dispositivo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [userId] ", Funciones.CheckStr(headersRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [modulo] ", Funciones.CheckStr(headersRequest.modulo)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [operation] ", Funciones.CheckStr(headersRequest.operation)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [wsIp] ", Funciones.CheckStr(headersRequest.wsIp)), null, null);

                strCantHoras = Funciones.CheckStr(ReadKeySettings.Key_RangoHoras);
                objRqts.numeroPedido = string.Empty;
                objRqts.lineaFacturar = strLineaCuenta;
                objRqts.tipoDocCliente = strTipoDoc;
                objRqts.docCliente = strNroDoc;
                objRqts.cantidadXhoras = strCantHoras;
                objRqts.coID = strCoid;
                objRqts.listaOpcional = null;

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [numeroPedido] ", Funciones.CheckStr(objRqts.numeroPedido)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [lineaFacturar] ", Funciones.CheckStr(objRqts.lineaFacturar)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [tipoDocCliente] ", Funciones.CheckStr(objRqts.tipoDocCliente)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [docCliente] ", Funciones.CheckStr(objRqts.docCliente)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [cantidadXhoras] ", Funciones.CheckStr(objRqts.cantidadXhoras)), null, null);

                objRequest.MessageRequest.Body.bodyRequest = objRqts;

                objRequest.MessageRequest.Header.HeaderRequest = headersRequest;

                #region Datos Auditoria
                BEAuditoriaRequest objBeAuditoriaRequest = new BEAuditoriaRequest();
                objBeAuditoriaRequest.idTransaccion = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBeAuditoriaRequest.timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ssZ");
                objBeAuditoriaRequest.userId = Funciones.CheckStr(CurrentUsers);
                objBeAuditoriaRequest.msgid = DateTime.Now.ToString("yyyyMMddHHmmssfff");
                objBeAuditoriaRequest.dataPower = true;
                objBeAuditoriaRequest.accept = "application/json";
                objBeAuditoriaRequest.urlTimeOut_Rest = Funciones.CheckStr(ConfigurationManager.AppSettings["ConsMejorasPorta_TimeOut"]);
                objBeAuditoriaRequest.wsIp = Funciones.CheckStr(ConfigurationManager.AppSettings["conswsipPedidosTienda"]);
                objBeAuditoriaRequest.ipTransaccion = Funciones.CheckStr(HttpContext.Current.Session["CurrentTerminal"]);
                objBeAuditoriaRequest.usuarioAplicacion = Funciones.CheckStr(CurrentUsers);
                objBeAuditoriaRequest.urlRest = "urlValVtaAccCuotas";
                objBeAuditoriaRequest.ipApplication = CurrentServer;

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [idTransaccion] ", Funciones.CheckStr(objBeAuditoriaRequest.idTransaccion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [timestamp] ", Funciones.CheckStr(objBeAuditoriaRequest.timestamp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [userId] ", Funciones.CheckStr(objBeAuditoriaRequest.userId)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [msgid] ", Funciones.CheckStr(objBeAuditoriaRequest.msgid)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [dataPower] ", Funciones.CheckStr(objBeAuditoriaRequest.dataPower)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [accept] ", Funciones.CheckStr(objBeAuditoriaRequest.accept)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [urlTimeOut_Rest] ", Funciones.CheckStr(objBeAuditoriaRequest.urlTimeOut_Rest)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [wsIp] ", Funciones.CheckStr(objBeAuditoriaRequest.wsIp)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [ipTransaccion] ", Funciones.CheckStr(objBeAuditoriaRequest.ipTransaccion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [usuarioAplicacion] ", Funciones.CheckStr(objBeAuditoriaRequest.usuarioAplicacion)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [ipApplication] ", Funciones.CheckStr(objBeAuditoriaRequest.ipApplication)), null, null);

                if (strLineaCuenta != "" || strCoid != "")
                {
                    objBeAuditoriaRequest.urlRest = "urlValCtasPendXLin";
                }

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [urlRest] ", Funciones.CheckStr(objBeAuditoriaRequest.urlRest)), null, null);
                #endregion

                objResponse = rService.ValidarCuoAccPendXLinea(dcParameters, objRequest, objBeAuditoriaRequest);

                strCodRpst = objResponse.MessageResponse.Body.bodyResponse.responseStatus.codigoRespuesta;
                strMsjRpst = objResponse.MessageResponse.Body.bodyResponse.responseStatus.mensajeRespuesta;
                strIdTransaccion = objResponse.MessageResponse.Body.bodyResponse.responseStatus.idTransaccion;

                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [strCodRpst] ", Funciones.CheckStr(strCodRpst)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [strMsjRpst] ", Funciones.CheckStr(strMsjRpst)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [strIdTransaccion] ", Funciones.CheckStr(strIdTransaccion)), null, null);

                if (strCodRpst.Equals("0"))
                {
                    blRespuesta = true;
                }

            }
            catch (Exception ex)
            {
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [Message] ", Funciones.CheckStr(ex.Message)), null, null);
                _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [StackTrace] ", Funciones.CheckStr(ex.StackTrace)), null, null);
                blRespuesta = false;
            }

            _objLog.CrearArchivolog(String.Format("{0} => {1}", "[PROY-140743 - IDEA-141192 - Venta en cuotas accesorios con cargo al recibo fijo móvil] - [blRespuesta] ", Funciones.CheckStr(blRespuesta)), null, null);

            return blRespuesta;
        }
        #endregion
    }
}
