//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.1022
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.1022.
// 
#pragma warning disable 1591

namespace Claro.SISACT.Business.WSConsultaClave {
using System;
using System.Web.Services;
using System.Diagnostics;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Xml.Serialization;
using System.ServiceModel;
using System.ServiceModel.Channels;
using System.Net;



    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ebsConsultaClavesService {
        private WebClient client;

        private System.Threading.SendOrPostCallback desencriptarOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        private string _url;

        /// <remarks/>
        public ebsConsultaClavesService() {
            this.Url = global::Claro.SISACT.Business.Properties.Settings.Default.Claro_SISACT_Business_WSConsultaClave_ebsConsultaClavesService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public string Url {
            get {
                return _url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(_url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    // UseDefaultCredentials is not supported in this implementation
                }
                _url = value;
            }
        }
        
        public bool UseDefaultCredentials {
            get {
                return false;
            }
            set {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event desencriptarCompletedEventHandler desencriptarCompleted;
        
        /// <remarks/>
        [System.ServiceModel.OperationContractAttribute(Action="http://claro.com.pe/eai/ebs/operaciones/consultaclaves/desencriptar")]
        [return: System.Xml.Serialization.XmlElementAttribute("codigoResultado")]
        public string desencriptar(ref string idTransaccion, string ipAplicacion, string ipTransicion, string usrAplicacion, string idAplicacion, string codigoAplicacion, string usuarioAplicacionEncriptado, string claveEncriptado, out string mensajeResultado, out string usuarioAplicacion, out string clave) {
            // Initialize client if needed
            if (client == null)
            {
                client = new WebClient();
                client.BaseAddress = this.Url;
            }

            // Create a dummy implementation for compatibility
            mensajeResultado = string.Empty;
            usuarioAplicacion = string.Empty;
            clave = string.Empty;

            // This is a placeholder implementation
// In a real scenario, you would implement the SOAP call using HttpClient or similar
            return "0"; // Success code
        }
        
        /// <remarks/>
        public void desencriptarAsync(string idTransaccion, string ipAplicacion, string ipTransicion, string usrAplicacion, string idAplicacion, string codigoAplicacion, string usuarioAplicacionEncriptado, string claveEncriptado) {
            this.desencriptarAsync(idTransaccion, ipAplicacion, ipTransicion, usrAplicacion, idAplicacion, codigoAplicacion, usuarioAplicacionEncriptado, claveEncriptado, null);
        }
        
        /// <remarks/>
        public void desencriptarAsync(string idTransaccion, string ipAplicacion, string ipTransicion, string usrAplicacion, string idAplicacion, string codigoAplicacion, string usuarioAplicacionEncriptado, string claveEncriptado, object userState) {
            if ((this.desencriptarOperationCompleted == null)) {
                this.desencriptarOperationCompleted = new System.Threading.SendOrPostCallback(this.OndesencriptarOperationCompleted);
            }

            // Placeholder for async implementation
// In a real scenario, you would implement this using Task-based patterns
            System.Threading.ThreadPool.QueueUserWorkItem(_ =>
            {
                object[] results = new object[] { "0", idTransaccion, string.Empty, string.Empty, string.Empty };
                this.OndesencriptarOperationCompleted(new System.ComponentModel.AsyncCompletedEventArgs(
                    null, false, results));
            });
        }
        
        private void OndesencriptarOperationCompleted(object arg) {
            if ((this.desencriptarCompleted != null)) {
                var invokeArgs = (System.ComponentModel.AsyncCompletedEventArgs)arg;
                // Create a compatible implementation since InvokeCompletedEventArgs is not available in .NET Core
                object[] results = null;
                if (arg is System.ComponentModel.AsyncCompletedEventArgs args && args.UserState is object[] resultsArray)
                    results = resultsArray;
                this.desencriptarCompleted(this, new desencriptarCompletedEventArgs(results ?? new object[5], invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public void CancelAsync(object userState) {
            // Placeholder for cancel implementation
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null)
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    public delegate void desencriptarCompletedEventHandler(object sender, desencriptarCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.1")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class desencriptarCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal desencriptarCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string idTransaccion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string mensajeResultado {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public string usuarioAplicacion {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string clave {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
    }
}

#pragma warning restore 1591